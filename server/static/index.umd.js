(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === "object" && typeof module === "object")
    module.exports = factory(require("vue"));
  else if (typeof define === "function" && define.amd) define([], factory);
  else if (typeof exports === "object")
    exports["previewer"] = factory(require("vue"));
  else root["previewer"] = factory(root["Vue"]);
})(
  typeof self !== "undefined" ? self : this,
  function (__WEBPACK_EXTERNAL_MODULE__8bbf__) {
    return /******/ (function (modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/ var installedModules = {};
      /******/
      /******/ // The require function
      /******/ function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/ if (installedModules[moduleId]) {
          /******/ return installedModules[moduleId].exports;
          /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/ var module = (installedModules[moduleId] = {
          /******/ i: moduleId,
          /******/ l: false,
          /******/ exports: {},
          /******/
        });
        /******/
        /******/ // Execute the module function
        /******/ modules[moduleId].call(
          module.exports,
          module,
          module.exports,
          __webpack_require__
        );
        /******/
        /******/ // Flag the module as loaded
        /******/ module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/ return module.exports;
        /******/
      }
      /******/
      /******/
      /******/ // expose the modules object (__webpack_modules__)
      /******/ __webpack_require__.m = modules;
      /******/
      /******/ // expose the module cache
      /******/ __webpack_require__.c = installedModules;
      /******/
      /******/ // define getter function for harmony exports
      /******/ __webpack_require__.d = function (exports, name, getter) {
        /******/ if (!__webpack_require__.o(exports, name)) {
          /******/ Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter,
          });
          /******/
        }
        /******/
      };
      /******/
      /******/ // define __esModule on exports
      /******/ __webpack_require__.r = function (exports) {
        /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          /******/ Object.defineProperty(exports, Symbol.toStringTag, {
            value: "Module",
          });
          /******/
        }
        /******/ Object.defineProperty(exports, "__esModule", { value: true });
        /******/
      };
      /******/
      /******/ // create a fake namespace object
      /******/ // mode & 1: value is a module id, require it
      /******/ // mode & 2: merge all properties of value into the ns
      /******/ // mode & 4: return value when already ns object
      /******/ // mode & 8|1: behave like require
      /******/ __webpack_require__.t = function (value, mode) {
        /******/ if (mode & 1) value = __webpack_require__(value);
        /******/ if (mode & 8) return value;
        /******/ if (
          mode & 4 &&
          typeof value === "object" &&
          value &&
          value.__esModule
        )
          return value;
        /******/ var ns = Object.create(null);
        /******/ __webpack_require__.r(ns);
        /******/ Object.defineProperty(ns, "default", {
          enumerable: true,
          value: value,
        });
        /******/ if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(
              ns,
              key,
              function (key) {
                return value[key];
              }.bind(null, key)
            );
        /******/ return ns;
        /******/
      };
      /******/
      /******/ // getDefaultExport function for compatibility with non-harmony modules
      /******/ __webpack_require__.n = function (module) {
        /******/ var getter =
          module && module.__esModule
            ? /******/ function getDefault() {
                return module["default"];
              }
            : /******/ function getModuleExports() {
                return module;
              };
        /******/ __webpack_require__.d(getter, "a", getter);
        /******/ return getter;
        /******/
      };
      /******/
      /******/ // Object.prototype.hasOwnProperty.call
      /******/ __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/
      /******/ // __webpack_public_path__
      /******/ __webpack_require__.p = "";
      /******/
      /******/
      /******/ // Load entry module and return exports
      /******/ return __webpack_require__((__webpack_require__.s = "fb15"));
      /******/
    })(
      /************************************************************************/
      /******/ {
        /***/ "00b4": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          // TODO: Remove from `core-js@4` since it's moved to entry points
          __webpack_require__("ac1f");
          var $ = __webpack_require__("23e7");
          var isCallable = __webpack_require__("1626");
          var isObject = __webpack_require__("861d");

          var DELEGATES_TO_EXEC = (function () {
            var execCalled = false;
            var re = /[ac]/;
            re.exec = function () {
              execCalled = true;
              return /./.exec.apply(this, arguments);
            };
            return re.test("abc") === true && execCalled;
          })();

          var nativeTest = /./.test;

          // `RegExp.prototype.test` method
          // https://tc39.es/ecma262/#sec-regexp.prototype.test
          $(
            { target: "RegExp", proto: true, forced: !DELEGATES_TO_EXEC },
            {
              test: function (str) {
                var exec = this.exec;
                if (!isCallable(exec)) return nativeTest.call(this, str);
                var result = exec.call(this, str);
                if (result !== null && !isObject(result)) {
                  throw new Error(
                    "RegExp exec method returned something other than an Object or null"
                  );
                }
                return !!result;
              },
            }
          );

          /***/
        },

        /***/ "00ee": /***/ function (module, exports, __webpack_require__) {
          var wellKnownSymbol = __webpack_require__("b622");

          var TO_STRING_TAG = wellKnownSymbol("toStringTag");
          var test = {};

          test[TO_STRING_TAG] = "z";

          module.exports = String(test) === "[object z]";

          /***/
        },

        /***/ "00fd": /***/ function (module, exports, __webpack_require__) {
          var Symbol = __webpack_require__("9e69");

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */
          var nativeObjectToString = objectProto.toString;

          /** Built-in value references. */
          var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

          /**
           * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the raw `toStringTag`.
           */
          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag];

            try {
              value[symToStringTag] = undefined;
              var unmasked = true;
            } catch (e) {}

            var result = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result;
          }

          module.exports = getRawTag;

          /***/
        },

        /***/ "0366": /***/ function (module, exports, __webpack_require__) {
          var aCallable = __webpack_require__("59ed");

          // optional / simple context binding
          module.exports = function (fn, that, length) {
            aCallable(fn);
            if (that === undefined) return fn;
            switch (length) {
              case 0:
                return function () {
                  return fn.call(that);
                };
              case 1:
                return function (a) {
                  return fn.call(that, a);
                };
              case 2:
                return function (a, b) {
                  return fn.call(that, a, b);
                };
              case 3:
                return function (a, b, c) {
                  return fn.call(that, a, b, c);
                };
            }
            return function (/* ...args */) {
              return fn.apply(that, arguments);
            };
          };

          /***/
        },

        /***/ "03dd": /***/ function (module, exports, __webpack_require__) {
          var isPrototype = __webpack_require__("eac5"),
            nativeKeys = __webpack_require__("57a5");

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
              if (hasOwnProperty.call(object, key) && key != "constructor") {
                result.push(key);
              }
            }
            return result;
          }

          module.exports = baseKeys;

          /***/
        },

        /***/ "0538": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var aCallable = __webpack_require__("59ed");
          var isObject = __webpack_require__("861d");

          var slice = [].slice;
          var factories = {};

          var construct = function (C, argsLength, args) {
            if (!(argsLength in factories)) {
              for (var list = [], i = 0; i < argsLength; i++)
                list[i] = "a[" + i + "]";
              // eslint-disable-next-line no-new-func -- we have no proper alternatives, IE8- only
              factories[argsLength] = Function(
                "C,a",
                "return new C(" + list.join(",") + ")"
              );
            }
            return factories[argsLength](C, args);
          };

          // `Function.prototype.bind` method implementation
          // https://tc39.es/ecma262/#sec-function.prototype.bind
          module.exports =
            Function.bind ||
            function bind(that /* , ...args */) {
              var fn = aCallable(this);
              var partArgs = slice.call(arguments, 1);
              var boundFunction = function bound(/* args... */) {
                var args = partArgs.concat(slice.call(arguments));
                return this instanceof boundFunction
                  ? construct(fn, args.length, args)
                  : fn.apply(that, args);
              };
              if (isObject(fn.prototype))
                boundFunction.prototype = fn.prototype;
              return boundFunction;
            };

          /***/
        },

        /***/ "057f": /***/ function (module, exports, __webpack_require__) {
          /* eslint-disable es/no-object-getownpropertynames -- safe */
          var toIndexedObject = __webpack_require__("fc6a");
          var $getOwnPropertyNames = __webpack_require__("241c").f;

          var toString = {}.toString;

          var windowNames =
            typeof window == "object" && window && Object.getOwnPropertyNames
              ? Object.getOwnPropertyNames(window)
              : [];

          var getWindowNames = function (it) {
            try {
              return $getOwnPropertyNames(it);
            } catch (error) {
              return windowNames.slice();
            }
          };

          // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
          module.exports.f = function getOwnPropertyNames(it) {
            return windowNames && toString.call(it) == "[object Window]"
              ? getWindowNames(it)
              : $getOwnPropertyNames(toIndexedObject(it));
          };

          /***/
        },

        /***/ "06cf": /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var propertyIsEnumerableModule = __webpack_require__("d1e7");
          var createPropertyDescriptor = __webpack_require__("5c6c");
          var toIndexedObject = __webpack_require__("fc6a");
          var toPropertyKey = __webpack_require__("a04b");
          var hasOwn = __webpack_require__("1a2d");
          var IE8_DOM_DEFINE = __webpack_require__("0cfb");

          // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
          var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

          // `Object.getOwnPropertyDescriptor` method
          // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
          exports.f = DESCRIPTORS
            ? $getOwnPropertyDescriptor
            : function getOwnPropertyDescriptor(O, P) {
                O = toIndexedObject(O);
                P = toPropertyKey(P);
                if (IE8_DOM_DEFINE)
                  try {
                    return $getOwnPropertyDescriptor(O, P);
                  } catch (error) {
                    /* empty */
                  }
                if (hasOwn(O, P))
                  return createPropertyDescriptor(
                    !propertyIsEnumerableModule.f.call(O, P),
                    O[P]
                  );
              };

          /***/
        },

        /***/ "0746": /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Tab_vue_vue_type_style_index_0_id_19c2e5e0_scoped_true_lang_less__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__("7e24");
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Tab_vue_vue_type_style_index_0_id_19c2e5e0_scoped_true_lang_less__WEBPACK_IMPORTED_MODULE_0___default =
            /*#__PURE__*/ __webpack_require__.n(
              _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Tab_vue_vue_type_style_index_0_id_19c2e5e0_scoped_true_lang_less__WEBPACK_IMPORTED_MODULE_0__
            );
          /* unused harmony reexport * */

          /***/
        },

        /***/ "07c7": /***/ function (module, exports) {
          /**
           * This method returns `false`.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {boolean} Returns `false`.
           * @example
           *
           * _.times(2, _.stubFalse);
           * // => [false, false]
           */
          function stubFalse() {
            return false;
          }

          module.exports = stubFalse;

          /***/
        },

        /***/ "07fa": /***/ function (module, exports, __webpack_require__) {
          var toLength = __webpack_require__("50c4");

          // `LengthOfArrayLike` abstract operation
          // https://tc39.es/ecma262/#sec-lengthofarraylike
          module.exports = function (obj) {
            return toLength(obj.length);
          };

          /***/
        },

        /***/ "087d": /***/ function (module, exports) {
          /**
           * Appends the elements of `values` to `array`.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to append.
           * @returns {Array} Returns `array`.
           */
          function arrayPush(array, values) {
            var index = -1,
              length = values.length,
              offset = array.length;

            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }

          module.exports = arrayPush;

          /***/
        },

        /***/ "08cc": /***/ function (module, exports, __webpack_require__) {
          var isObject = __webpack_require__("1a8c");

          /**
           * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` if suitable for strict
           *  equality comparisons, else `false`.
           */
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }

          module.exports = isStrictComparable;

          /***/
        },

        /***/ "0b07": /***/ function (module, exports, __webpack_require__) {
          var baseIsNative = __webpack_require__("34ac"),
            getValue = __webpack_require__("3698");

          /**
           * Gets the native function at `key` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the method to get.
           * @returns {*} Returns the function if it's native, else `undefined`.
           */
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
          }

          module.exports = getNative;

          /***/
        },

        /***/ "0b42": /***/ function (module, exports, __webpack_require__) {
          var isArray = __webpack_require__("e8b5");
          var isConstructor = __webpack_require__("68ee");
          var isObject = __webpack_require__("861d");
          var wellKnownSymbol = __webpack_require__("b622");

          var SPECIES = wellKnownSymbol("species");

          // a part of `ArraySpeciesCreate` abstract operation
          // https://tc39.es/ecma262/#sec-arrayspeciescreate
          module.exports = function (originalArray) {
            var C;
            if (isArray(originalArray)) {
              C = originalArray.constructor;
              // cross-realm fallback
              if (isConstructor(C) && (C === Array || isArray(C.prototype)))
                C = undefined;
              else if (isObject(C)) {
                C = C[SPECIES];
                if (C === null) C = undefined;
              }
            }
            return C === undefined ? Array : C;
          };

          /***/
        },

        /***/ "0cb2": /***/ function (module, exports, __webpack_require__) {
          var toObject = __webpack_require__("7b0b");

          var floor = Math.floor;
          var replace = "".replace;
          var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
          var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

          // `GetSubstitution` abstract operation
          // https://tc39.es/ecma262/#sec-getsubstitution
          module.exports = function (
            matched,
            str,
            position,
            captures,
            namedCaptures,
            replacement
          ) {
            var tailPos = position + matched.length;
            var m = captures.length;
            var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
            if (namedCaptures !== undefined) {
              namedCaptures = toObject(namedCaptures);
              symbols = SUBSTITUTION_SYMBOLS;
            }
            return replace.call(replacement, symbols, function (match, ch) {
              var capture;
              switch (ch.charAt(0)) {
                case "$":
                  return "$";
                case "&":
                  return matched;
                case "`":
                  return str.slice(0, position);
                case "'":
                  return str.slice(tailPos);
                case "<":
                  capture = namedCaptures[ch.slice(1, -1)];
                  break;
                default:
                  // \d\d?
                  var n = +ch;
                  if (n === 0) return match;
                  if (n > m) {
                    var f = floor(n / 10);
                    if (f === 0) return match;
                    if (f <= m)
                      return captures[f - 1] === undefined
                        ? ch.charAt(1)
                        : captures[f - 1] + ch.charAt(1);
                    return match;
                  }
                  capture = captures[n - 1];
              }
              return capture === undefined ? "" : capture;
            });
          };

          /***/
        },

        /***/ "0cfb": /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var fails = __webpack_require__("d039");
          var createElement = __webpack_require__("cc12");

          // Thank's IE8 for his funny defineProperty
          module.exports =
            !DESCRIPTORS &&
            !fails(function () {
              // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
              return (
                Object.defineProperty(createElement("div"), "a", {
                  get: function () {
                    return 7;
                  },
                }).a != 7
              );
            });

          /***/
        },

        /***/ "0d24": /***/ function (module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function (module) {
            var root = __webpack_require__("2b3e"),
              stubFalse = __webpack_require__("07c7");

            /** Detect free variable `exports`. */
            var freeExports = true && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule =
              freeExports &&
              typeof module == "object" &&
              module &&
              !module.nodeType &&
              module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports =
              freeModule && freeModule.exports === freeExports;

            /** Built-in value references. */
            var Buffer = moduleExports ? root.Buffer : undefined;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            module.exports = isBuffer;

            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__("62e4")(module)));

          /***/
        },

        /***/ "0d3b": /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");
          var wellKnownSymbol = __webpack_require__("b622");
          var IS_PURE = __webpack_require__("c430");

          var ITERATOR = wellKnownSymbol("iterator");

          module.exports = !fails(function () {
            var url = new URL("b?a=1&b=2&c=3", "http://a");
            var searchParams = url.searchParams;
            var result = "";
            url.pathname = "c%20d";
            searchParams.forEach(function (value, key) {
              searchParams["delete"]("b");
              result += key + value;
            });
            return (
              (IS_PURE && !url.toJSON) ||
              !searchParams.sort ||
              url.href !== "http://a/c%20d?a=1&c=3" ||
              searchParams.get("c") !== "3" ||
              String(new URLSearchParams("?a=1")) !== "a=1" ||
              !searchParams[ITERATOR] ||
              // throws in Edge
              new URL("https://a@b").username !== "a" ||
              new URLSearchParams(new URLSearchParams("a=b")).get("a") !==
                "b" ||
              // not punycoded in Edge
              new URL("http://тест").host !== "xn--e1aybc" ||
              // not escaped in Chrome 62-
              new URL("http://a#б").hash !== "#%D0%B1" ||
              // fails in Chrome 66-
              result !== "a1c3" ||
              // throws in Safari
              new URL("http://x", undefined).host !== "x"
            );
          });

          /***/
        },

        /***/ "0d51": /***/ function (module, exports) {
          module.exports = function (argument) {
            try {
              return String(argument);
            } catch (error) {
              return "Object";
            }
          };

          /***/
        },

        /***/ "0fcc": /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Img_vue_vue_type_style_index_0_id_1c1ffb2e_lang_less__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__("7e06");
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Img_vue_vue_type_style_index_0_id_1c1ffb2e_lang_less__WEBPACK_IMPORTED_MODULE_0___default =
            /*#__PURE__*/ __webpack_require__.n(
              _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Img_vue_vue_type_style_index_0_id_1c1ffb2e_lang_less__WEBPACK_IMPORTED_MODULE_0__
            );
          /* unused harmony reexport * */

          /***/
        },

        /***/ "107c": /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");
          var global = __webpack_require__("da84");

          // babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
          var $RegExp = global.RegExp;

          module.exports = fails(function () {
            var re = $RegExp("(?<a>b)", "g");
            return (
              re.exec("b").groups.a !== "b" || "b".replace(re, "$<a>c") !== "bc"
            );
          });

          /***/
        },

        /***/ 1276: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
          var isRegExp = __webpack_require__("44e7");
          var anObject = __webpack_require__("825a");
          var requireObjectCoercible = __webpack_require__("1d80");
          var speciesConstructor = __webpack_require__("4840");
          var advanceStringIndex = __webpack_require__("8aa5");
          var toLength = __webpack_require__("50c4");
          var toString = __webpack_require__("577e");
          var getMethod = __webpack_require__("dc4a");
          var callRegExpExec = __webpack_require__("14c3");
          var regexpExec = __webpack_require__("9263");
          var stickyHelpers = __webpack_require__("9f7f");
          var fails = __webpack_require__("d039");

          var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
          var arrayPush = [].push;
          var min = Math.min;
          var MAX_UINT32 = 0xffffffff;

          // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
          // Weex JS has frozen built-in prototypes, so use try / catch wrapper
          var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
            // eslint-disable-next-line regexp/no-empty-group -- required for testing
            var re = /(?:)/;
            var originalExec = re.exec;
            re.exec = function () {
              return originalExec.apply(this, arguments);
            };
            var result = "ab".split(re);
            return (
              result.length !== 2 || result[0] !== "a" || result[1] !== "b"
            );
          });

          // @@split logic
          fixRegExpWellKnownSymbolLogic(
            "split",
            function (SPLIT, nativeSplit, maybeCallNative) {
              var internalSplit;
              if (
                "abbc".split(/(b)*/)[1] == "c" ||
                // eslint-disable-next-line regexp/no-empty-group -- required for testing
                "test".split(/(?:)/, -1).length != 4 ||
                "ab".split(/(?:ab)*/).length != 2 ||
                ".".split(/(.?)(.?)/).length != 4 ||
                // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
                ".".split(/()()/).length > 1 ||
                "".split(/.?/).length
              ) {
                // based on es5-shim implementation, need to rework it
                internalSplit = function (separator, limit) {
                  var string = toString(requireObjectCoercible(this));
                  var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                  if (lim === 0) return [];
                  if (separator === undefined) return [string];
                  // If `separator` is not a regex, use native split
                  if (!isRegExp(separator)) {
                    return nativeSplit.call(string, separator, lim);
                  }
                  var output = [];
                  var flags =
                    (separator.ignoreCase ? "i" : "") +
                    (separator.multiline ? "m" : "") +
                    (separator.unicode ? "u" : "") +
                    (separator.sticky ? "y" : "");
                  var lastLastIndex = 0;
                  // Make `global` and avoid `lastIndex` issues by working with a copy
                  var separatorCopy = new RegExp(separator.source, flags + "g");
                  var match, lastIndex, lastLength;
                  while ((match = regexpExec.call(separatorCopy, string))) {
                    lastIndex = separatorCopy.lastIndex;
                    if (lastIndex > lastLastIndex) {
                      output.push(string.slice(lastLastIndex, match.index));
                      if (match.length > 1 && match.index < string.length)
                        arrayPush.apply(output, match.slice(1));
                      lastLength = match[0].length;
                      lastLastIndex = lastIndex;
                      if (output.length >= lim) break;
                    }
                    if (separatorCopy.lastIndex === match.index)
                      separatorCopy.lastIndex++; // Avoid an infinite loop
                  }
                  if (lastLastIndex === string.length) {
                    if (lastLength || !separatorCopy.test("")) output.push("");
                  } else output.push(string.slice(lastLastIndex));
                  return output.length > lim ? output.slice(0, lim) : output;
                };
                // Chakra, V8
              } else if ("0".split(undefined, 0).length) {
                internalSplit = function (separator, limit) {
                  return separator === undefined && limit === 0
                    ? []
                    : nativeSplit.call(this, separator, limit);
                };
              } else internalSplit = nativeSplit;

              return [
                // `String.prototype.split` method
                // https://tc39.es/ecma262/#sec-string.prototype.split
                function split(separator, limit) {
                  var O = requireObjectCoercible(this);
                  var splitter =
                    separator == undefined
                      ? undefined
                      : getMethod(separator, SPLIT);
                  return splitter
                    ? splitter.call(separator, O, limit)
                    : internalSplit.call(toString(O), separator, limit);
                },
                // `RegExp.prototype[@@split]` method
                // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
                //
                // NOTE: This cannot be properly polyfilled in engines that don't support
                // the 'y' flag.
                function (string, limit) {
                  var rx = anObject(this);
                  var S = toString(string);
                  var res = maybeCallNative(
                    internalSplit,
                    rx,
                    S,
                    limit,
                    internalSplit !== nativeSplit
                  );

                  if (res.done) return res.value;

                  var C = speciesConstructor(rx, RegExp);

                  var unicodeMatching = rx.unicode;
                  var flags =
                    (rx.ignoreCase ? "i" : "") +
                    (rx.multiline ? "m" : "") +
                    (rx.unicode ? "u" : "") +
                    (UNSUPPORTED_Y ? "g" : "y");

                  // ^(? + rx + ) is needed, in combination with some S slicing, to
                  // simulate the 'y' flag.
                  var splitter = new C(
                    UNSUPPORTED_Y ? "^(?:" + rx.source + ")" : rx,
                    flags
                  );
                  var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
                  if (lim === 0) return [];
                  if (S.length === 0)
                    return callRegExpExec(splitter, S) === null ? [S] : [];
                  var p = 0;
                  var q = 0;
                  var A = [];
                  while (q < S.length) {
                    splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
                    var z = callRegExpExec(
                      splitter,
                      UNSUPPORTED_Y ? S.slice(q) : S
                    );
                    var e;
                    if (
                      z === null ||
                      (e = min(
                        toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)),
                        S.length
                      )) === p
                    ) {
                      q = advanceStringIndex(S, q, unicodeMatching);
                    } else {
                      A.push(S.slice(p, q));
                      if (A.length === lim) return A;
                      for (var i = 1; i <= z.length - 1; i++) {
                        A.push(z[i]);
                        if (A.length === lim) return A;
                      }
                      q = p = e;
                    }
                  }
                  A.push(S.slice(p));
                  return A;
                },
              ];
            },
            !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC,
            UNSUPPORTED_Y
          );

          /***/
        },

        /***/ 1290: /***/ function (module, exports) {
          /**
           * Checks if `value` is suitable for use as unique object key.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
           */
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" ||
              type == "number" ||
              type == "symbol" ||
              type == "boolean"
              ? value !== "__proto__"
              : value === null;
          }

          module.exports = isKeyable;

          /***/
        },

        /***/ "129f": /***/ function (module, exports) {
          // `SameValue` abstract operation
          // https://tc39.es/ecma262/#sec-samevalue
          // eslint-disable-next-line es/no-object-is -- safe
          module.exports =
            Object.is ||
            function is(x, y) {
              // eslint-disable-next-line no-self-compare -- NaN check
              return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
            };

          /***/
        },

        /***/ 1310: /***/ function (module, exports) {
          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }

          module.exports = isObjectLike;

          /***/
        },

        /***/ 1368: /***/ function (module, exports, __webpack_require__) {
          var coreJsData = __webpack_require__("da03");

          /** Used to detect methods masquerading as native. */
          var maskSrcKey = (function () {
            var uid = /[^.]+$/.exec(
              (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ""
            );
            return uid ? "Symbol(src)_1." + uid : "";
          })();

          /**
           * Checks if `func` has its source masked.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` is masked, else `false`.
           */
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }

          module.exports = isMasked;

          /***/
        },

        /***/ "14c3": /***/ function (module, exports, __webpack_require__) {
          var anObject = __webpack_require__("825a");
          var isCallable = __webpack_require__("1626");
          var classof = __webpack_require__("c6b6");
          var regexpExec = __webpack_require__("9263");

          // `RegExpExec` abstract operation
          // https://tc39.es/ecma262/#sec-regexpexec
          module.exports = function (R, S) {
            var exec = R.exec;
            if (isCallable(exec)) {
              var result = exec.call(R, S);
              if (result !== null) anObject(result);
              return result;
            }
            if (classof(R) === "RegExp") return regexpExec.call(R, S);
            throw TypeError("RegExp#exec called on incompatible receiver");
          };

          /***/
        },

        /***/ "159b": /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var DOMIterables = __webpack_require__("fdbc");
          var DOMTokenListPrototype = __webpack_require__("785a");
          var forEach = __webpack_require__("17c2");
          var createNonEnumerableProperty = __webpack_require__("9112");

          var handlePrototype = function (CollectionPrototype) {
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype && CollectionPrototype.forEach !== forEach)
              try {
                createNonEnumerableProperty(
                  CollectionPrototype,
                  "forEach",
                  forEach
                );
              } catch (error) {
                CollectionPrototype.forEach = forEach;
              }
          };

          for (var COLLECTION_NAME in DOMIterables) {
            if (DOMIterables[COLLECTION_NAME]) {
              handlePrototype(
                global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype
              );
            }
          }

          handlePrototype(DOMTokenListPrototype);

          /***/
        },

        /***/ 1626: /***/ function (module, exports) {
          // `IsCallable` abstract operation
          // https://tc39.es/ecma262/#sec-iscallable
          module.exports = function (argument) {
            return typeof argument === "function";
          };

          /***/
        },

        /***/ "17c2": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $forEach = __webpack_require__("b727").forEach;
          var arrayMethodIsStrict = __webpack_require__("a640");

          var STRICT_METHOD = arrayMethodIsStrict("forEach");

          // `Array.prototype.forEach` method implementation
          // https://tc39.es/ecma262/#sec-array.prototype.foreach
          module.exports = !STRICT_METHOD
            ? function forEach(callbackfn /* , thisArg */) {
                return $forEach(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
                // eslint-disable-next-line es/no-array-prototype-foreach -- safe
              }
            : [].forEach;

          /***/
        },

        /***/ 1838: /***/ function (module, exports, __webpack_require__) {
          var baseIsEqual = __webpack_require__("c05f"),
            get = __webpack_require__("9b02"),
            hasIn = __webpack_require__("8604"),
            isKey = __webpack_require__("f608"),
            isStrictComparable = __webpack_require__("08cc"),
            matchesStrictComparable = __webpack_require__("20ec"),
            toKey = __webpack_require__("f4d6");

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /**
           * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
           *
           * @private
           * @param {string} path The path of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           */
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function (object) {
              var objValue = get(object, path);
              return objValue === undefined && objValue === srcValue
                ? hasIn(object, path)
                : baseIsEqual(
                    srcValue,
                    objValue,
                    COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                  );
            };
          }

          module.exports = baseMatchesProperty;

          /***/
        },

        /***/ "18d8": /***/ function (module, exports, __webpack_require__) {
          var memoizeCapped = __webpack_require__("234d");

          /** Used to match property names within property paths. */
          var rePropName =
            /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

          /** Used to match backslashes in property paths. */
          var reEscapeChar = /\\(\\)?/g;

          /**
           * Converts `string` to a property path array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the property path array.
           */
          var stringToPath = memoizeCapped(function (string) {
            var result = [];
            if (string.charCodeAt(0) === 46 /* . */) {
              result.push("");
            }
            string.replace(
              rePropName,
              function (match, number, quote, subString) {
                result.push(
                  quote
                    ? subString.replace(reEscapeChar, "$1")
                    : number || match
                );
              }
            );
            return result;
          });

          module.exports = stringToPath;

          /***/
        },

        /***/ "19aa": /***/ function (module, exports) {
          module.exports = function (it, Constructor, name) {
            if (it instanceof Constructor) return it;
            throw TypeError(
              "Incorrect " + (name ? name + " " : "") + "invocation"
            );
          };

          /***/
        },

        /***/ "1a2d": /***/ function (module, exports, __webpack_require__) {
          var toObject = __webpack_require__("7b0b");

          var hasOwnProperty = {}.hasOwnProperty;

          // `HasOwnProperty` abstract operation
          // https://tc39.es/ecma262/#sec-hasownproperty
          module.exports =
            Object.hasOwn ||
            function hasOwn(it, key) {
              return hasOwnProperty.call(toObject(it), key);
            };

          /***/
        },

        /***/ "1a8c": /***/ function (module, exports) {
          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }

          module.exports = isObject;

          /***/
        },

        /***/ "1be4": /***/ function (module, exports, __webpack_require__) {
          var getBuiltIn = __webpack_require__("d066");

          module.exports = getBuiltIn("document", "documentElement");

          /***/
        },

        /***/ "1c3c": /***/ function (module, exports, __webpack_require__) {
          var Symbol = __webpack_require__("9e69"),
            Uint8Array = __webpack_require__("2474"),
            eq = __webpack_require__("9638"),
            equalArrays = __webpack_require__("a2be"),
            mapToArray = __webpack_require__("edfa"),
            setToArray = __webpack_require__("ac41");

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /** `Object#toString` result references. */
          var boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            errorTag = "[object Error]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            symbolTag = "[object Symbol]";

          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]";

          /** Used to convert symbols to primitives and strings. */
          var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

          /**
           * A specialized version of `baseIsEqualDeep` for comparing objects of
           * the same `toStringTag`.
           *
           * **Note:** This function only supports comparing values with tags of
           * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {string} tag The `toStringTag` of the objects to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function equalByTag(
            object,
            other,
            tag,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            switch (tag) {
              case dataViewTag:
                if (
                  object.byteLength != other.byteLength ||
                  object.byteOffset != other.byteOffset
                ) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;

              case arrayBufferTag:
                if (
                  object.byteLength != other.byteLength ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))
                ) {
                  return false;
                }
                return true;

              case boolTag:
              case dateTag:
              case numberTag:
                // Coerce booleans to `1` or `0` and dates to milliseconds.
                // Invalid dates are coerced to `NaN`.
                return eq(+object, +other);

              case errorTag:
                return (
                  object.name == other.name && object.message == other.message
                );

              case regexpTag:
              case stringTag:
                // Coerce regexes to strings and treat strings, primitives and objects,
                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                // for more details.
                return object == other + "";

              case mapTag:
                var convert = mapToArray;

              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);

                if (object.size != other.size && !isPartial) {
                  return false;
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;

                // Recursively compare objects (susceptible to call stack limits).
                stack.set(object, other);
                var result = equalArrays(
                  convert(object),
                  convert(other),
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                );
                stack["delete"](object);
                return result;

              case symbolTag:
                if (symbolValueOf) {
                  return (
                    symbolValueOf.call(object) == symbolValueOf.call(other)
                  );
                }
            }
            return false;
          }

          module.exports = equalByTag;

          /***/
        },

        /***/ "1c7e": /***/ function (module, exports, __webpack_require__) {
          var wellKnownSymbol = __webpack_require__("b622");

          var ITERATOR = wellKnownSymbol("iterator");
          var SAFE_CLOSING = false;

          try {
            var called = 0;
            var iteratorWithReturn = {
              next: function () {
                return { done: !!called++ };
              },
              return: function () {
                SAFE_CLOSING = true;
              },
            };
            iteratorWithReturn[ITERATOR] = function () {
              return this;
            };
            // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
            Array.from(iteratorWithReturn, function () {
              throw 2;
            });
          } catch (error) {
            /* empty */
          }

          module.exports = function (exec, SKIP_CLOSING) {
            if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
            var ITERATION_SUPPORT = false;
            try {
              var object = {};
              object[ITERATOR] = function () {
                return {
                  next: function () {
                    return { done: (ITERATION_SUPPORT = true) };
                  },
                };
              };
              exec(object);
            } catch (error) {
              /* empty */
            }
            return ITERATION_SUPPORT;
          };

          /***/
        },

        /***/ "1cdc": /***/ function (module, exports, __webpack_require__) {
          var userAgent = __webpack_require__("342f");

          module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);

          /***/
        },

        /***/ "1cec": /***/ function (module, exports, __webpack_require__) {
          var getNative = __webpack_require__("0b07"),
            root = __webpack_require__("2b3e");

          /* Built-in method references that are verified to be native. */
          var Promise = getNative(root, "Promise");

          module.exports = Promise;

          /***/
        },

        /***/ "1d80": /***/ function (module, exports) {
          // `RequireObjectCoercible` abstract operation
          // https://tc39.es/ecma262/#sec-requireobjectcoercible
          module.exports = function (it) {
            if (it == undefined) throw TypeError("Can't call method on " + it);
            return it;
          };

          /***/
        },

        /***/ "1dde": /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");
          var wellKnownSymbol = __webpack_require__("b622");
          var V8_VERSION = __webpack_require__("2d00");

          var SPECIES = wellKnownSymbol("species");

          module.exports = function (METHOD_NAME) {
            // We can't use this feature detection in V8 since it causes
            // deoptimization and serious performance degradation
            // https://github.com/zloirock/core-js/issues/677
            return (
              V8_VERSION >= 51 ||
              !fails(function () {
                var array = [];
                var constructor = (array.constructor = {});
                constructor[SPECIES] = function () {
                  return { foo: 1 };
                };
                return array[METHOD_NAME](Boolean).foo !== 1;
              })
            );
          };

          /***/
        },

        /***/ "1efc": /***/ function (module, exports) {
          /**
           * Removes `key` and its value from the hash.
           *
           * @private
           * @name delete
           * @memberOf Hash
           * @param {Object} hash The hash to modify.
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
          }

          module.exports = hashDelete;

          /***/
        },

        /***/ "1fc8": /***/ function (module, exports, __webpack_require__) {
          var getMapData = __webpack_require__("4245");

          /**
           * Sets the map `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf MapCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the map cache instance.
           */
          function mapCacheSet(key, value) {
            var data = getMapData(this, key),
              size = data.size;

            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
          }

          module.exports = mapCacheSet;

          /***/
        },

        /***/ "20ec": /***/ function (module, exports) {
          /**
           * A specialized version of `matchesProperty` for source values suitable
           * for strict equality comparisons, i.e. `===`.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           */
          function matchesStrictComparable(key, srcValue) {
            return function (object) {
              if (object == null) {
                return false;
              }
              return (
                object[key] === srcValue &&
                (srcValue !== undefined || key in Object(object))
              );
            };
          }

          module.exports = matchesStrictComparable;

          /***/
        },

        /***/ 2266: /***/ function (module, exports, __webpack_require__) {
          var anObject = __webpack_require__("825a");
          var isArrayIteratorMethod = __webpack_require__("e95a");
          var lengthOfArrayLike = __webpack_require__("07fa");
          var bind = __webpack_require__("0366");
          var getIterator = __webpack_require__("9a1f");
          var getIteratorMethod = __webpack_require__("35a1");
          var iteratorClose = __webpack_require__("2a62");

          var Result = function (stopped, result) {
            this.stopped = stopped;
            this.result = result;
          };

          module.exports = function (iterable, unboundFunction, options) {
            var that = options && options.that;
            var AS_ENTRIES = !!(options && options.AS_ENTRIES);
            var IS_ITERATOR = !!(options && options.IS_ITERATOR);
            var INTERRUPTED = !!(options && options.INTERRUPTED);
            var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
            var iterator, iterFn, index, length, result, next, step;

            var stop = function (condition) {
              if (iterator) iteratorClose(iterator, "normal", condition);
              return new Result(true, condition);
            };

            var callFn = function (value) {
              if (AS_ENTRIES) {
                anObject(value);
                return INTERRUPTED
                  ? fn(value[0], value[1], stop)
                  : fn(value[0], value[1]);
              }
              return INTERRUPTED ? fn(value, stop) : fn(value);
            };

            if (IS_ITERATOR) {
              iterator = iterable;
            } else {
              iterFn = getIteratorMethod(iterable);
              if (!iterFn)
                throw TypeError(String(iterable) + " is not iterable");
              // optimisation for array iterators
              if (isArrayIteratorMethod(iterFn)) {
                for (
                  index = 0, length = lengthOfArrayLike(iterable);
                  length > index;
                  index++
                ) {
                  result = callFn(iterable[index]);
                  if (result && result instanceof Result) return result;
                }
                return new Result(false);
              }
              iterator = getIterator(iterable, iterFn);
            }

            next = iterator.next;
            while (!(step = next.call(iterator)).done) {
              try {
                result = callFn(step.value);
              } catch (error) {
                iteratorClose(iterator, "throw", error);
              }
              if (
                typeof result == "object" &&
                result &&
                result instanceof Result
              )
                return result;
            }
            return new Result(false);
          };

          /***/
        },

        /***/ "234d": /***/ function (module, exports, __webpack_require__) {
          var memoize = __webpack_require__("e380");

          /** Used as the maximum memoize cache size. */
          var MAX_MEMOIZE_SIZE = 500;

          /**
           * A specialized version of `_.memoize` which clears the memoized function's
           * cache when it exceeds `MAX_MEMOIZE_SIZE`.
           *
           * @private
           * @param {Function} func The function to have its output memoized.
           * @returns {Function} Returns the new memoized function.
           */
          function memoizeCapped(func) {
            var result = memoize(func, function (key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });

            var cache = result.cache;
            return result;
          }

          module.exports = memoizeCapped;

          /***/
        },

        /***/ "23cb": /***/ function (module, exports, __webpack_require__) {
          var toIntegerOrInfinity = __webpack_require__("5926");

          var max = Math.max;
          var min = Math.min;

          // Helper for a popular repeating case of the spec:
          // Let integer be ? ToInteger(index).
          // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
          module.exports = function (index, length) {
            var integer = toIntegerOrInfinity(index);
            return integer < 0
              ? max(integer + length, 0)
              : min(integer, length);
          };

          /***/
        },

        /***/ "23e7": /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
          var createNonEnumerableProperty = __webpack_require__("9112");
          var redefine = __webpack_require__("6eeb");
          var setGlobal = __webpack_require__("ce4e");
          var copyConstructorProperties = __webpack_require__("e893");
          var isForced = __webpack_require__("94ca");

          /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/
          module.exports = function (options, source) {
            var TARGET = options.target;
            var GLOBAL = options.global;
            var STATIC = options.stat;
            var FORCED, target, key, targetProperty, sourceProperty, descriptor;
            if (GLOBAL) {
              target = global;
            } else if (STATIC) {
              target = global[TARGET] || setGlobal(TARGET, {});
            } else {
              target = (global[TARGET] || {}).prototype;
            }
            if (target)
              for (key in source) {
                sourceProperty = source[key];
                if (options.noTargetGet) {
                  descriptor = getOwnPropertyDescriptor(target, key);
                  targetProperty = descriptor && descriptor.value;
                } else targetProperty = target[key];
                FORCED = isForced(
                  GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key,
                  options.forced
                );
                // contained in target
                if (!FORCED && targetProperty !== undefined) {
                  if (typeof sourceProperty === typeof targetProperty) continue;
                  copyConstructorProperties(sourceProperty, targetProperty);
                }
                // add a flag to not completely full polyfills
                if (options.sham || (targetProperty && targetProperty.sham)) {
                  createNonEnumerableProperty(sourceProperty, "sham", true);
                }
                // extend global
                redefine(target, key, sourceProperty, options);
              }
          };

          /***/
        },

        /***/ "241c": /***/ function (module, exports, __webpack_require__) {
          var internalObjectKeys = __webpack_require__("ca84");
          var enumBugKeys = __webpack_require__("7839");

          var hiddenKeys = enumBugKeys.concat("length", "prototype");

          // `Object.getOwnPropertyNames` method
          // https://tc39.es/ecma262/#sec-object.getownpropertynames
          // eslint-disable-next-line es/no-object-getownpropertynames -- safe
          exports.f =
            Object.getOwnPropertyNames ||
            function getOwnPropertyNames(O) {
              return internalObjectKeys(O, hiddenKeys);
            };

          /***/
        },

        /***/ "242e": /***/ function (module, exports, __webpack_require__) {
          var baseFor = __webpack_require__("72af"),
            keys = __webpack_require__("ec69");

          /**
           * The base implementation of `_.forOwn` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Object} Returns `object`.
           */
          function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
          }

          module.exports = baseForOwn;

          /***/
        },

        /***/ 2474: /***/ function (module, exports, __webpack_require__) {
          var root = __webpack_require__("2b3e");

          /** Built-in value references. */
          var Uint8Array = root.Uint8Array;

          module.exports = Uint8Array;

          /***/
        },

        /***/ 2478: /***/ function (module, exports, __webpack_require__) {
          var getMapData = __webpack_require__("4245");

          /**
           * Gets the map value for `key`.
           *
           * @private
           * @name get
           * @memberOf MapCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }

          module.exports = mapCacheGet;

          /***/
        },

        /***/ 2524: /***/ function (module, exports, __webpack_require__) {
          var nativeCreate = __webpack_require__("6044");

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          /**
           * Sets the hash `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Hash
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the hash instance.
           */
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] =
              nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
          }

          module.exports = hashSet;

          /***/
        },

        /***/ 2532: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var notARegExp = __webpack_require__("5a34");
          var requireObjectCoercible = __webpack_require__("1d80");
          var toString = __webpack_require__("577e");
          var correctIsRegExpLogic = __webpack_require__("ab13");

          // `String.prototype.includes` method
          // https://tc39.es/ecma262/#sec-string.prototype.includes
          $(
            {
              target: "String",
              proto: true,
              forced: !correctIsRegExpLogic("includes"),
            },
            {
              includes: function includes(searchString /* , position = 0 */) {
                return !!~toString(requireObjectCoercible(this)).indexOf(
                  toString(notARegExp(searchString)),
                  arguments.length > 1 ? arguments[1] : undefined
                );
              },
            }
          );

          /***/
        },

        /***/ "253c": /***/ function (module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__("3729"),
            isObjectLike = __webpack_require__("1310");

          /** `Object#toString` result references. */
          var argsTag = "[object Arguments]";

          /**
           * The base implementation of `_.isArguments`.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           */
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }

          module.exports = baseIsArguments;

          /***/
        },

        /***/ "25f0": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var PROPER_FUNCTION_NAME = __webpack_require__("5e77").PROPER;
          var redefine = __webpack_require__("6eeb");
          var anObject = __webpack_require__("825a");
          var $toString = __webpack_require__("577e");
          var fails = __webpack_require__("d039");
          var flags = __webpack_require__("ad6d");

          var TO_STRING = "toString";
          var RegExpPrototype = RegExp.prototype;
          var nativeToString = RegExpPrototype[TO_STRING];

          var NOT_GENERIC = fails(function () {
            return nativeToString.call({ source: "a", flags: "b" }) != "/a/b";
          });
          // FF44- RegExp#toString has a wrong name
          var INCORRECT_NAME =
            PROPER_FUNCTION_NAME && nativeToString.name != TO_STRING;

          // `RegExp.prototype.toString` method
          // https://tc39.es/ecma262/#sec-regexp.prototype.tostring
          if (NOT_GENERIC || INCORRECT_NAME) {
            redefine(
              RegExp.prototype,
              TO_STRING,
              function toString() {
                var R = anObject(this);
                var p = $toString(R.source);
                var rf = R.flags;
                var f = $toString(
                  rf === undefined &&
                    R instanceof RegExp &&
                    !("flags" in RegExpPrototype)
                    ? flags.call(R)
                    : rf
                );
                return "/" + p + "/" + f;
              },
              { unsafe: true }
            );
          }

          /***/
        },

        /***/ 2626: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var getBuiltIn = __webpack_require__("d066");
          var definePropertyModule = __webpack_require__("9bf2");
          var wellKnownSymbol = __webpack_require__("b622");
          var DESCRIPTORS = __webpack_require__("83ab");

          var SPECIES = wellKnownSymbol("species");

          module.exports = function (CONSTRUCTOR_NAME) {
            var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
            var defineProperty = definePropertyModule.f;

            if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
              defineProperty(Constructor, SPECIES, {
                configurable: true,
                get: function () {
                  return this;
                },
              });
            }
          };

          /***/
        },

        /***/ "26e8": /***/ function (module, exports) {
          /**
           * The base implementation of `_.hasIn` without support for deep paths.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {Array|string} key The key to check.
           * @returns {boolean} Returns `true` if `key` exists, else `false`.
           */
          function baseHasIn(object, key) {
            return object != null && key in Object(object);
          }

          module.exports = baseHasIn;

          /***/
        },

        /***/ "28c9": /***/ function (module, exports) {
          /**
           * Removes all key-value entries from the list cache.
           *
           * @private
           * @name clear
           * @memberOf ListCache
           */
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }

          module.exports = listCacheClear;

          /***/
        },

        /***/ "29f3": /***/ function (module, exports) {
          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */
          var nativeObjectToString = objectProto.toString;

          /**
           * Converts `value` to a string using `Object.prototype.toString`.
           *
           * @private
           * @param {*} value The value to convert.
           * @returns {string} Returns the converted string.
           */
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }

          module.exports = objectToString;

          /***/
        },

        /***/ "2a62": /***/ function (module, exports, __webpack_require__) {
          var anObject = __webpack_require__("825a");
          var getMethod = __webpack_require__("dc4a");

          module.exports = function (iterator, kind, value) {
            var innerResult, innerError;
            anObject(iterator);
            try {
              innerResult = getMethod(iterator, "return");
              if (!innerResult) {
                if (kind === "throw") throw value;
                return value;
              }
              innerResult = innerResult.call(iterator);
            } catch (error) {
              innerError = true;
              innerResult = error;
            }
            if (kind === "throw") throw value;
            if (innerError) throw innerResult;
            anObject(innerResult);
            return value;
          };

          /***/
        },

        /***/ "2b3d": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
          __webpack_require__("3ca3");
          var $ = __webpack_require__("23e7");
          var DESCRIPTORS = __webpack_require__("83ab");
          var USE_NATIVE_URL = __webpack_require__("0d3b");
          var global = __webpack_require__("da84");
          var defineProperties = __webpack_require__("37e8");
          var redefine = __webpack_require__("6eeb");
          var anInstance = __webpack_require__("19aa");
          var hasOwn = __webpack_require__("1a2d");
          var assign = __webpack_require__("60da");
          var arrayFrom = __webpack_require__("4df4");
          var codeAt = __webpack_require__("6547").codeAt;
          var toASCII = __webpack_require__("5fb2");
          var $toString = __webpack_require__("577e");
          var setToStringTag = __webpack_require__("d44e");
          var URLSearchParamsModule = __webpack_require__("9861");
          var InternalStateModule = __webpack_require__("69f3");

          var NativeURL = global.URL;
          var URLSearchParams = URLSearchParamsModule.URLSearchParams;
          var getInternalSearchParamsState = URLSearchParamsModule.getState;
          var setInternalState = InternalStateModule.set;
          var getInternalURLState = InternalStateModule.getterFor("URL");
          var floor = Math.floor;
          var pow = Math.pow;

          var INVALID_AUTHORITY = "Invalid authority";
          var INVALID_SCHEME = "Invalid scheme";
          var INVALID_HOST = "Invalid host";
          var INVALID_PORT = "Invalid port";

          var ALPHA = /[a-z]/i;
          // eslint-disable-next-line regexp/no-obscure-range -- safe
          var ALPHANUMERIC = /[\d+-.a-z]/i;
          var DIGIT = /\d/;
          var HEX_START = /^0x/i;
          var OCT = /^[0-7]+$/;
          var DEC = /^\d+$/;
          var HEX = /^[\da-f]+$/i;
          /* eslint-disable regexp/no-control-character -- safe */
          var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
          var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT =
            /[\0\t\n\r #/:<>?@[\\\]^|]/;
          var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE =
            /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
          var TAB_AND_NEW_LINE = /[\t\n\r]/g;
          /* eslint-enable regexp/no-control-character -- safe */
          var EOF;

          var parseHost = function (url, input) {
            var result, codePoints, index;
            if (input.charAt(0) == "[") {
              if (input.charAt(input.length - 1) != "]") return INVALID_HOST;
              result = parseIPv6(input.slice(1, -1));
              if (!result) return INVALID_HOST;
              url.host = result;
              // opaque host
            } else if (!isSpecial(url)) {
              if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input))
                return INVALID_HOST;
              result = "";
              codePoints = arrayFrom(input);
              for (index = 0; index < codePoints.length; index++) {
                result += percentEncode(
                  codePoints[index],
                  C0ControlPercentEncodeSet
                );
              }
              url.host = result;
            } else {
              input = toASCII(input);
              if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
              result = parseIPv4(input);
              if (result === null) return INVALID_HOST;
              url.host = result;
            }
          };

          var parseIPv4 = function (input) {
            var parts = input.split(".");
            var partsLength, numbers, index, part, radix, number, ipv4;
            if (parts.length && parts[parts.length - 1] == "") {
              parts.pop();
            }
            partsLength = parts.length;
            if (partsLength > 4) return input;
            numbers = [];
            for (index = 0; index < partsLength; index++) {
              part = parts[index];
              if (part == "") return input;
              radix = 10;
              if (part.length > 1 && part.charAt(0) == "0") {
                radix = HEX_START.test(part) ? 16 : 8;
                part = part.slice(radix == 8 ? 1 : 2);
              }
              if (part === "") {
                number = 0;
              } else {
                if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part))
                  return input;
                number = parseInt(part, radix);
              }
              numbers.push(number);
            }
            for (index = 0; index < partsLength; index++) {
              number = numbers[index];
              if (index == partsLength - 1) {
                if (number >= pow(256, 5 - partsLength)) return null;
              } else if (number > 255) return null;
            }
            ipv4 = numbers.pop();
            for (index = 0; index < numbers.length; index++) {
              ipv4 += numbers[index] * pow(256, 3 - index);
            }
            return ipv4;
          };

          // eslint-disable-next-line max-statements -- TODO
          var parseIPv6 = function (input) {
            var address = [0, 0, 0, 0, 0, 0, 0, 0];
            var pieceIndex = 0;
            var compress = null;
            var pointer = 0;
            var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

            var chr = function () {
              return input.charAt(pointer);
            };

            if (chr() == ":") {
              if (input.charAt(1) != ":") return;
              pointer += 2;
              pieceIndex++;
              compress = pieceIndex;
            }
            while (chr()) {
              if (pieceIndex == 8) return;
              if (chr() == ":") {
                if (compress !== null) return;
                pointer++;
                pieceIndex++;
                compress = pieceIndex;
                continue;
              }
              value = length = 0;
              while (length < 4 && HEX.test(chr())) {
                value = value * 16 + parseInt(chr(), 16);
                pointer++;
                length++;
              }
              if (chr() == ".") {
                if (length == 0) return;
                pointer -= length;
                if (pieceIndex > 6) return;
                numbersSeen = 0;
                while (chr()) {
                  ipv4Piece = null;
                  if (numbersSeen > 0) {
                    if (chr() == "." && numbersSeen < 4) pointer++;
                    else return;
                  }
                  if (!DIGIT.test(chr())) return;
                  while (DIGIT.test(chr())) {
                    number = parseInt(chr(), 10);
                    if (ipv4Piece === null) ipv4Piece = number;
                    else if (ipv4Piece == 0) return;
                    else ipv4Piece = ipv4Piece * 10 + number;
                    if (ipv4Piece > 255) return;
                    pointer++;
                  }
                  address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                  numbersSeen++;
                  if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
                }
                if (numbersSeen != 4) return;
                break;
              } else if (chr() == ":") {
                pointer++;
                if (!chr()) return;
              } else if (chr()) return;
              address[pieceIndex++] = value;
            }
            if (compress !== null) {
              swaps = pieceIndex - compress;
              pieceIndex = 7;
              while (pieceIndex != 0 && swaps > 0) {
                swap = address[pieceIndex];
                address[pieceIndex--] = address[compress + swaps - 1];
                address[compress + --swaps] = swap;
              }
            } else if (pieceIndex != 8) return;
            return address;
          };

          var findLongestZeroSequence = function (ipv6) {
            var maxIndex = null;
            var maxLength = 1;
            var currStart = null;
            var currLength = 0;
            var index = 0;
            for (; index < 8; index++) {
              if (ipv6[index] !== 0) {
                if (currLength > maxLength) {
                  maxIndex = currStart;
                  maxLength = currLength;
                }
                currStart = null;
                currLength = 0;
              } else {
                if (currStart === null) currStart = index;
                ++currLength;
              }
            }
            if (currLength > maxLength) {
              maxIndex = currStart;
              maxLength = currLength;
            }
            return maxIndex;
          };

          var serializeHost = function (host) {
            var result, index, compress, ignore0;
            // ipv4
            if (typeof host == "number") {
              result = [];
              for (index = 0; index < 4; index++) {
                result.unshift(host % 256);
                host = floor(host / 256);
              }
              return result.join(".");
              // ipv6
            } else if (typeof host == "object") {
              result = "";
              compress = findLongestZeroSequence(host);
              for (index = 0; index < 8; index++) {
                if (ignore0 && host[index] === 0) continue;
                if (ignore0) ignore0 = false;
                if (compress === index) {
                  result += index ? ":" : "::";
                  ignore0 = true;
                } else {
                  result += host[index].toString(16);
                  if (index < 7) result += ":";
                }
              }
              return "[" + result + "]";
            }
            return host;
          };

          var C0ControlPercentEncodeSet = {};
          var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
            " ": 1,
            '"': 1,
            "<": 1,
            ">": 1,
            "`": 1,
          });
          var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
            "#": 1,
            "?": 1,
            "{": 1,
            "}": 1,
          });
          var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
            "/": 1,
            ":": 1,
            ";": 1,
            "=": 1,
            "@": 1,
            "[": 1,
            "\\": 1,
            "]": 1,
            "^": 1,
            "|": 1,
          });

          var percentEncode = function (chr, set) {
            var code = codeAt(chr, 0);
            return code > 0x20 && code < 0x7f && !hasOwn(set, chr)
              ? chr
              : encodeURIComponent(chr);
          };

          var specialSchemes = {
            ftp: 21,
            file: null,
            http: 80,
            https: 443,
            ws: 80,
            wss: 443,
          };

          var isSpecial = function (url) {
            return hasOwn(specialSchemes, url.scheme);
          };

          var includesCredentials = function (url) {
            return url.username != "" || url.password != "";
          };

          var cannotHaveUsernamePasswordPort = function (url) {
            return !url.host || url.cannotBeABaseURL || url.scheme == "file";
          };

          var isWindowsDriveLetter = function (string, normalized) {
            var second;
            return (
              string.length == 2 &&
              ALPHA.test(string.charAt(0)) &&
              ((second = string.charAt(1)) == ":" ||
                (!normalized && second == "|"))
            );
          };

          var startsWithWindowsDriveLetter = function (string) {
            var third;
            return (
              string.length > 1 &&
              isWindowsDriveLetter(string.slice(0, 2)) &&
              (string.length == 2 ||
                (third = string.charAt(2)) === "/" ||
                third === "\\" ||
                third === "?" ||
                third === "#")
            );
          };

          var shortenURLsPath = function (url) {
            var path = url.path;
            var pathSize = path.length;
            if (
              pathSize &&
              (url.scheme != "file" ||
                pathSize != 1 ||
                !isWindowsDriveLetter(path[0], true))
            ) {
              path.pop();
            }
          };

          var isSingleDot = function (segment) {
            return segment === "." || segment.toLowerCase() === "%2e";
          };

          var isDoubleDot = function (segment) {
            segment = segment.toLowerCase();
            return (
              segment === ".." ||
              segment === "%2e." ||
              segment === ".%2e" ||
              segment === "%2e%2e"
            );
          };

          // States:
          var SCHEME_START = {};
          var SCHEME = {};
          var NO_SCHEME = {};
          var SPECIAL_RELATIVE_OR_AUTHORITY = {};
          var PATH_OR_AUTHORITY = {};
          var RELATIVE = {};
          var RELATIVE_SLASH = {};
          var SPECIAL_AUTHORITY_SLASHES = {};
          var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
          var AUTHORITY = {};
          var HOST = {};
          var HOSTNAME = {};
          var PORT = {};
          var FILE = {};
          var FILE_SLASH = {};
          var FILE_HOST = {};
          var PATH_START = {};
          var PATH = {};
          var CANNOT_BE_A_BASE_URL_PATH = {};
          var QUERY = {};
          var FRAGMENT = {};

          // eslint-disable-next-line max-statements -- TODO
          var parseURL = function (url, input, stateOverride, base) {
            var state = stateOverride || SCHEME_START;
            var pointer = 0;
            var buffer = "";
            var seenAt = false;
            var seenBracket = false;
            var seenPasswordToken = false;
            var codePoints, chr, bufferCodePoints, failure;

            if (!stateOverride) {
              url.scheme = "";
              url.username = "";
              url.password = "";
              url.host = null;
              url.port = null;
              url.path = [];
              url.query = null;
              url.fragment = null;
              url.cannotBeABaseURL = false;
              input = input.replace(
                LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE,
                ""
              );
            }

            input = input.replace(TAB_AND_NEW_LINE, "");

            codePoints = arrayFrom(input);

            while (pointer <= codePoints.length) {
              chr = codePoints[pointer];
              switch (state) {
                case SCHEME_START:
                  if (chr && ALPHA.test(chr)) {
                    buffer += chr.toLowerCase();
                    state = SCHEME;
                  } else if (!stateOverride) {
                    state = NO_SCHEME;
                    continue;
                  } else return INVALID_SCHEME;
                  break;

                case SCHEME:
                  if (
                    chr &&
                    (ALPHANUMERIC.test(chr) ||
                      chr == "+" ||
                      chr == "-" ||
                      chr == ".")
                  ) {
                    buffer += chr.toLowerCase();
                  } else if (chr == ":") {
                    if (
                      stateOverride &&
                      (isSpecial(url) != hasOwn(specialSchemes, buffer) ||
                        (buffer == "file" &&
                          (includesCredentials(url) || url.port !== null)) ||
                        (url.scheme == "file" && !url.host))
                    )
                      return;
                    url.scheme = buffer;
                    if (stateOverride) {
                      if (
                        isSpecial(url) &&
                        specialSchemes[url.scheme] == url.port
                      )
                        url.port = null;
                      return;
                    }
                    buffer = "";
                    if (url.scheme == "file") {
                      state = FILE;
                    } else if (
                      isSpecial(url) &&
                      base &&
                      base.scheme == url.scheme
                    ) {
                      state = SPECIAL_RELATIVE_OR_AUTHORITY;
                    } else if (isSpecial(url)) {
                      state = SPECIAL_AUTHORITY_SLASHES;
                    } else if (codePoints[pointer + 1] == "/") {
                      state = PATH_OR_AUTHORITY;
                      pointer++;
                    } else {
                      url.cannotBeABaseURL = true;
                      url.path.push("");
                      state = CANNOT_BE_A_BASE_URL_PATH;
                    }
                  } else if (!stateOverride) {
                    buffer = "";
                    state = NO_SCHEME;
                    pointer = 0;
                    continue;
                  } else return INVALID_SCHEME;
                  break;

                case NO_SCHEME:
                  if (!base || (base.cannotBeABaseURL && chr != "#"))
                    return INVALID_SCHEME;
                  if (base.cannotBeABaseURL && chr == "#") {
                    url.scheme = base.scheme;
                    url.path = base.path.slice();
                    url.query = base.query;
                    url.fragment = "";
                    url.cannotBeABaseURL = true;
                    state = FRAGMENT;
                    break;
                  }
                  state = base.scheme == "file" ? FILE : RELATIVE;
                  continue;

                case SPECIAL_RELATIVE_OR_AUTHORITY:
                  if (chr == "/" && codePoints[pointer + 1] == "/") {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                    pointer++;
                  } else {
                    state = RELATIVE;
                    continue;
                  }
                  break;

                case PATH_OR_AUTHORITY:
                  if (chr == "/") {
                    state = AUTHORITY;
                    break;
                  } else {
                    state = PATH;
                    continue;
                  }

                case RELATIVE:
                  url.scheme = base.scheme;
                  if (chr == EOF) {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = base.query;
                  } else if (chr == "/" || (chr == "\\" && isSpecial(url))) {
                    state = RELATIVE_SLASH;
                  } else if (chr == "?") {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = "";
                    state = QUERY;
                  } else if (chr == "#") {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = base.query;
                    url.fragment = "";
                    state = FRAGMENT;
                  } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.path.pop();
                    state = PATH;
                    continue;
                  }
                  break;

                case RELATIVE_SLASH:
                  if (isSpecial(url) && (chr == "/" || chr == "\\")) {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  } else if (chr == "/") {
                    state = AUTHORITY;
                  } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    state = PATH;
                    continue;
                  }
                  break;

                case SPECIAL_AUTHORITY_SLASHES:
                  state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  if (chr != "/" || buffer.charAt(pointer + 1) != "/") continue;
                  pointer++;
                  break;

                case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                  if (chr != "/" && chr != "\\") {
                    state = AUTHORITY;
                    continue;
                  }
                  break;

                case AUTHORITY:
                  if (chr == "@") {
                    if (seenAt) buffer = "%40" + buffer;
                    seenAt = true;
                    bufferCodePoints = arrayFrom(buffer);
                    for (var i = 0; i < bufferCodePoints.length; i++) {
                      var codePoint = bufferCodePoints[i];
                      if (codePoint == ":" && !seenPasswordToken) {
                        seenPasswordToken = true;
                        continue;
                      }
                      var encodedCodePoints = percentEncode(
                        codePoint,
                        userinfoPercentEncodeSet
                      );
                      if (seenPasswordToken) url.password += encodedCodePoints;
                      else url.username += encodedCodePoints;
                    }
                    buffer = "";
                  } else if (
                    chr == EOF ||
                    chr == "/" ||
                    chr == "?" ||
                    chr == "#" ||
                    (chr == "\\" && isSpecial(url))
                  ) {
                    if (seenAt && buffer == "") return INVALID_AUTHORITY;
                    pointer -= arrayFrom(buffer).length + 1;
                    buffer = "";
                    state = HOST;
                  } else buffer += chr;
                  break;

                case HOST:
                case HOSTNAME:
                  if (stateOverride && url.scheme == "file") {
                    state = FILE_HOST;
                    continue;
                  } else if (chr == ":" && !seenBracket) {
                    if (buffer == "") return INVALID_HOST;
                    failure = parseHost(url, buffer);
                    if (failure) return failure;
                    buffer = "";
                    state = PORT;
                    if (stateOverride == HOSTNAME) return;
                  } else if (
                    chr == EOF ||
                    chr == "/" ||
                    chr == "?" ||
                    chr == "#" ||
                    (chr == "\\" && isSpecial(url))
                  ) {
                    if (isSpecial(url) && buffer == "") return INVALID_HOST;
                    if (
                      stateOverride &&
                      buffer == "" &&
                      (includesCredentials(url) || url.port !== null)
                    )
                      return;
                    failure = parseHost(url, buffer);
                    if (failure) return failure;
                    buffer = "";
                    state = PATH_START;
                    if (stateOverride) return;
                    continue;
                  } else {
                    if (chr == "[") seenBracket = true;
                    else if (chr == "]") seenBracket = false;
                    buffer += chr;
                  }
                  break;

                case PORT:
                  if (DIGIT.test(chr)) {
                    buffer += chr;
                  } else if (
                    chr == EOF ||
                    chr == "/" ||
                    chr == "?" ||
                    chr == "#" ||
                    (chr == "\\" && isSpecial(url)) ||
                    stateOverride
                  ) {
                    if (buffer != "") {
                      var port = parseInt(buffer, 10);
                      if (port > 0xffff) return INVALID_PORT;
                      url.port =
                        isSpecial(url) && port === specialSchemes[url.scheme]
                          ? null
                          : port;
                      buffer = "";
                    }
                    if (stateOverride) return;
                    state = PATH_START;
                    continue;
                  } else return INVALID_PORT;
                  break;

                case FILE:
                  url.scheme = "file";
                  if (chr == "/" || chr == "\\") state = FILE_SLASH;
                  else if (base && base.scheme == "file") {
                    if (chr == EOF) {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = base.query;
                    } else if (chr == "?") {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = "";
                      state = QUERY;
                    } else if (chr == "#") {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = base.query;
                      url.fragment = "";
                      state = FRAGMENT;
                    } else {
                      if (
                        !startsWithWindowsDriveLetter(
                          codePoints.slice(pointer).join("")
                        )
                      ) {
                        url.host = base.host;
                        url.path = base.path.slice();
                        shortenURLsPath(url);
                      }
                      state = PATH;
                      continue;
                    }
                  } else {
                    state = PATH;
                    continue;
                  }
                  break;

                case FILE_SLASH:
                  if (chr == "/" || chr == "\\") {
                    state = FILE_HOST;
                    break;
                  }
                  if (
                    base &&
                    base.scheme == "file" &&
                    !startsWithWindowsDriveLetter(
                      codePoints.slice(pointer).join("")
                    )
                  ) {
                    if (isWindowsDriveLetter(base.path[0], true))
                      url.path.push(base.path[0]);
                    else url.host = base.host;
                  }
                  state = PATH;
                  continue;

                case FILE_HOST:
                  if (
                    chr == EOF ||
                    chr == "/" ||
                    chr == "\\" ||
                    chr == "?" ||
                    chr == "#"
                  ) {
                    if (!stateOverride && isWindowsDriveLetter(buffer)) {
                      state = PATH;
                    } else if (buffer == "") {
                      url.host = "";
                      if (stateOverride) return;
                      state = PATH_START;
                    } else {
                      failure = parseHost(url, buffer);
                      if (failure) return failure;
                      if (url.host == "localhost") url.host = "";
                      if (stateOverride) return;
                      buffer = "";
                      state = PATH_START;
                    }
                    continue;
                  } else buffer += chr;
                  break;

                case PATH_START:
                  if (isSpecial(url)) {
                    state = PATH;
                    if (chr != "/" && chr != "\\") continue;
                  } else if (!stateOverride && chr == "?") {
                    url.query = "";
                    state = QUERY;
                  } else if (!stateOverride && chr == "#") {
                    url.fragment = "";
                    state = FRAGMENT;
                  } else if (chr != EOF) {
                    state = PATH;
                    if (chr != "/") continue;
                  }
                  break;

                case PATH:
                  if (
                    chr == EOF ||
                    chr == "/" ||
                    (chr == "\\" && isSpecial(url)) ||
                    (!stateOverride && (chr == "?" || chr == "#"))
                  ) {
                    if (isDoubleDot(buffer)) {
                      shortenURLsPath(url);
                      if (chr != "/" && !(chr == "\\" && isSpecial(url))) {
                        url.path.push("");
                      }
                    } else if (isSingleDot(buffer)) {
                      if (chr != "/" && !(chr == "\\" && isSpecial(url))) {
                        url.path.push("");
                      }
                    } else {
                      if (
                        url.scheme == "file" &&
                        !url.path.length &&
                        isWindowsDriveLetter(buffer)
                      ) {
                        if (url.host) url.host = "";
                        buffer = buffer.charAt(0) + ":"; // normalize windows drive letter
                      }
                      url.path.push(buffer);
                    }
                    buffer = "";
                    if (
                      url.scheme == "file" &&
                      (chr == EOF || chr == "?" || chr == "#")
                    ) {
                      while (url.path.length > 1 && url.path[0] === "") {
                        url.path.shift();
                      }
                    }
                    if (chr == "?") {
                      url.query = "";
                      state = QUERY;
                    } else if (chr == "#") {
                      url.fragment = "";
                      state = FRAGMENT;
                    }
                  } else {
                    buffer += percentEncode(chr, pathPercentEncodeSet);
                  }
                  break;

                case CANNOT_BE_A_BASE_URL_PATH:
                  if (chr == "?") {
                    url.query = "";
                    state = QUERY;
                  } else if (chr == "#") {
                    url.fragment = "";
                    state = FRAGMENT;
                  } else if (chr != EOF) {
                    url.path[0] += percentEncode(
                      chr,
                      C0ControlPercentEncodeSet
                    );
                  }
                  break;

                case QUERY:
                  if (!stateOverride && chr == "#") {
                    url.fragment = "";
                    state = FRAGMENT;
                  } else if (chr != EOF) {
                    if (chr == "'" && isSpecial(url)) url.query += "%27";
                    else if (chr == "#") url.query += "%23";
                    else
                      url.query += percentEncode(
                        chr,
                        C0ControlPercentEncodeSet
                      );
                  }
                  break;

                case FRAGMENT:
                  if (chr != EOF)
                    url.fragment += percentEncode(
                      chr,
                      fragmentPercentEncodeSet
                    );
                  break;
              }

              pointer++;
            }
          };

          // `URL` constructor
          // https://url.spec.whatwg.org/#url-class
          var URLConstructor = function URL(url /* , base */) {
            var that = anInstance(this, URLConstructor, "URL");
            var base = arguments.length > 1 ? arguments[1] : undefined;
            var urlString = $toString(url);
            var state = setInternalState(that, { type: "URL" });
            var baseState, failure;
            if (base !== undefined) {
              if (base instanceof URLConstructor)
                baseState = getInternalURLState(base);
              else {
                failure = parseURL((baseState = {}), $toString(base));
                if (failure) throw TypeError(failure);
              }
            }
            failure = parseURL(state, urlString, null, baseState);
            if (failure) throw TypeError(failure);
            var searchParams = (state.searchParams = new URLSearchParams());
            var searchParamsState = getInternalSearchParamsState(searchParams);
            searchParamsState.updateSearchParams(state.query);
            searchParamsState.updateURL = function () {
              state.query = String(searchParams) || null;
            };
            if (!DESCRIPTORS) {
              that.href = serializeURL.call(that);
              that.origin = getOrigin.call(that);
              that.protocol = getProtocol.call(that);
              that.username = getUsername.call(that);
              that.password = getPassword.call(that);
              that.host = getHost.call(that);
              that.hostname = getHostname.call(that);
              that.port = getPort.call(that);
              that.pathname = getPathname.call(that);
              that.search = getSearch.call(that);
              that.searchParams = getSearchParams.call(that);
              that.hash = getHash.call(that);
            }
          };

          var URLPrototype = URLConstructor.prototype;

          var serializeURL = function () {
            var url = getInternalURLState(this);
            var scheme = url.scheme;
            var username = url.username;
            var password = url.password;
            var host = url.host;
            var port = url.port;
            var path = url.path;
            var query = url.query;
            var fragment = url.fragment;
            var output = scheme + ":";
            if (host !== null) {
              output += "//";
              if (includesCredentials(url)) {
                output += username + (password ? ":" + password : "") + "@";
              }
              output += serializeHost(host);
              if (port !== null) output += ":" + port;
            } else if (scheme == "file") output += "//";
            output += url.cannotBeABaseURL
              ? path[0]
              : path.length
              ? "/" + path.join("/")
              : "";
            if (query !== null) output += "?" + query;
            if (fragment !== null) output += "#" + fragment;
            return output;
          };

          var getOrigin = function () {
            var url = getInternalURLState(this);
            var scheme = url.scheme;
            var port = url.port;
            if (scheme == "blob")
              try {
                return new URLConstructor(scheme.path[0]).origin;
              } catch (error) {
                return "null";
              }
            if (scheme == "file" || !isSpecial(url)) return "null";
            return (
              scheme +
              "://" +
              serializeHost(url.host) +
              (port !== null ? ":" + port : "")
            );
          };

          var getProtocol = function () {
            return getInternalURLState(this).scheme + ":";
          };

          var getUsername = function () {
            return getInternalURLState(this).username;
          };

          var getPassword = function () {
            return getInternalURLState(this).password;
          };

          var getHost = function () {
            var url = getInternalURLState(this);
            var host = url.host;
            var port = url.port;
            return host === null
              ? ""
              : port === null
              ? serializeHost(host)
              : serializeHost(host) + ":" + port;
          };

          var getHostname = function () {
            var host = getInternalURLState(this).host;
            return host === null ? "" : serializeHost(host);
          };

          var getPort = function () {
            var port = getInternalURLState(this).port;
            return port === null ? "" : String(port);
          };

          var getPathname = function () {
            var url = getInternalURLState(this);
            var path = url.path;
            return url.cannotBeABaseURL
              ? path[0]
              : path.length
              ? "/" + path.join("/")
              : "";
          };

          var getSearch = function () {
            var query = getInternalURLState(this).query;
            return query ? "?" + query : "";
          };

          var getSearchParams = function () {
            return getInternalURLState(this).searchParams;
          };

          var getHash = function () {
            var fragment = getInternalURLState(this).fragment;
            return fragment ? "#" + fragment : "";
          };

          var accessorDescriptor = function (getter, setter) {
            return {
              get: getter,
              set: setter,
              configurable: true,
              enumerable: true,
            };
          };

          if (DESCRIPTORS) {
            defineProperties(URLPrototype, {
              // `URL.prototype.href` accessors pair
              // https://url.spec.whatwg.org/#dom-url-href
              href: accessorDescriptor(serializeURL, function (href) {
                var url = getInternalURLState(this);
                var urlString = $toString(href);
                var failure = parseURL(url, urlString);
                if (failure) throw TypeError(failure);
                getInternalSearchParamsState(
                  url.searchParams
                ).updateSearchParams(url.query);
              }),
              // `URL.prototype.origin` getter
              // https://url.spec.whatwg.org/#dom-url-origin
              origin: accessorDescriptor(getOrigin),
              // `URL.prototype.protocol` accessors pair
              // https://url.spec.whatwg.org/#dom-url-protocol
              protocol: accessorDescriptor(getProtocol, function (protocol) {
                var url = getInternalURLState(this);
                parseURL(url, $toString(protocol) + ":", SCHEME_START);
              }),
              // `URL.prototype.username` accessors pair
              // https://url.spec.whatwg.org/#dom-url-username
              username: accessorDescriptor(getUsername, function (username) {
                var url = getInternalURLState(this);
                var codePoints = arrayFrom($toString(username));
                if (cannotHaveUsernamePasswordPort(url)) return;
                url.username = "";
                for (var i = 0; i < codePoints.length; i++) {
                  url.username += percentEncode(
                    codePoints[i],
                    userinfoPercentEncodeSet
                  );
                }
              }),
              // `URL.prototype.password` accessors pair
              // https://url.spec.whatwg.org/#dom-url-password
              password: accessorDescriptor(getPassword, function (password) {
                var url = getInternalURLState(this);
                var codePoints = arrayFrom($toString(password));
                if (cannotHaveUsernamePasswordPort(url)) return;
                url.password = "";
                for (var i = 0; i < codePoints.length; i++) {
                  url.password += percentEncode(
                    codePoints[i],
                    userinfoPercentEncodeSet
                  );
                }
              }),
              // `URL.prototype.host` accessors pair
              // https://url.spec.whatwg.org/#dom-url-host
              host: accessorDescriptor(getHost, function (host) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                parseURL(url, $toString(host), HOST);
              }),
              // `URL.prototype.hostname` accessors pair
              // https://url.spec.whatwg.org/#dom-url-hostname
              hostname: accessorDescriptor(getHostname, function (hostname) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                parseURL(url, $toString(hostname), HOSTNAME);
              }),
              // `URL.prototype.port` accessors pair
              // https://url.spec.whatwg.org/#dom-url-port
              port: accessorDescriptor(getPort, function (port) {
                var url = getInternalURLState(this);
                if (cannotHaveUsernamePasswordPort(url)) return;
                port = $toString(port);
                if (port == "") url.port = null;
                else parseURL(url, port, PORT);
              }),
              // `URL.prototype.pathname` accessors pair
              // https://url.spec.whatwg.org/#dom-url-pathname
              pathname: accessorDescriptor(getPathname, function (pathname) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                url.path = [];
                parseURL(url, $toString(pathname), PATH_START);
              }),
              // `URL.prototype.search` accessors pair
              // https://url.spec.whatwg.org/#dom-url-search
              search: accessorDescriptor(getSearch, function (search) {
                var url = getInternalURLState(this);
                search = $toString(search);
                if (search == "") {
                  url.query = null;
                } else {
                  if ("?" == search.charAt(0)) search = search.slice(1);
                  url.query = "";
                  parseURL(url, search, QUERY);
                }
                getInternalSearchParamsState(
                  url.searchParams
                ).updateSearchParams(url.query);
              }),
              // `URL.prototype.searchParams` getter
              // https://url.spec.whatwg.org/#dom-url-searchparams
              searchParams: accessorDescriptor(getSearchParams),
              // `URL.prototype.hash` accessors pair
              // https://url.spec.whatwg.org/#dom-url-hash
              hash: accessorDescriptor(getHash, function (hash) {
                var url = getInternalURLState(this);
                hash = $toString(hash);
                if (hash == "") {
                  url.fragment = null;
                  return;
                }
                if ("#" == hash.charAt(0)) hash = hash.slice(1);
                url.fragment = "";
                parseURL(url, hash, FRAGMENT);
              }),
            });
          }

          // `URL.prototype.toJSON` method
          // https://url.spec.whatwg.org/#dom-url-tojson
          redefine(
            URLPrototype,
            "toJSON",
            function toJSON() {
              return serializeURL.call(this);
            },
            { enumerable: true }
          );

          // `URL.prototype.toString` method
          // https://url.spec.whatwg.org/#URL-stringification-behavior
          redefine(
            URLPrototype,
            "toString",
            function toString() {
              return serializeURL.call(this);
            },
            { enumerable: true }
          );

          if (NativeURL) {
            var nativeCreateObjectURL = NativeURL.createObjectURL;
            var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
            // `URL.createObjectURL` method
            // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            if (nativeCreateObjectURL)
              redefine(
                URLConstructor,
                "createObjectURL",
                function createObjectURL(blob) {
                  return nativeCreateObjectURL.apply(NativeURL, arguments);
                }
              );
            // `URL.revokeObjectURL` method
            // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            if (nativeRevokeObjectURL)
              redefine(
                URLConstructor,
                "revokeObjectURL",
                function revokeObjectURL(url) {
                  return nativeRevokeObjectURL.apply(NativeURL, arguments);
                }
              );
          }

          setToStringTag(URLConstructor, "URL");

          $(
            { global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS },
            {
              URL: URLConstructor,
            }
          );

          /***/
        },

        /***/ "2b3e": /***/ function (module, exports, __webpack_require__) {
          var freeGlobal = __webpack_require__("585a");

          /** Detect free variable `self`. */
          var freeSelf =
            typeof self == "object" && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function("return this")();

          module.exports = root;

          /***/
        },

        /***/ "2c3e": /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var UNSUPPORTED_Y = __webpack_require__("9f7f").UNSUPPORTED_Y;
          var defineProperty = __webpack_require__("9bf2").f;
          var getInternalState = __webpack_require__("69f3").get;
          var RegExpPrototype = RegExp.prototype;

          // `RegExp.prototype.sticky` getter
          // https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky
          if (DESCRIPTORS && UNSUPPORTED_Y) {
            defineProperty(RegExpPrototype, "sticky", {
              configurable: true,
              get: function () {
                if (this === RegExpPrototype) return undefined;
                // We can't use InternalStateModule.getterFor because
                // we don't add metadata for regexps created by a literal.
                if (this instanceof RegExp) {
                  return !!getInternalState(this).sticky;
                }
                throw TypeError("Incompatible receiver, RegExp required");
              },
            });
          }

          /***/
        },

        /***/ "2ca0": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
          var toLength = __webpack_require__("50c4");
          var toString = __webpack_require__("577e");
          var notARegExp = __webpack_require__("5a34");
          var requireObjectCoercible = __webpack_require__("1d80");
          var correctIsRegExpLogic = __webpack_require__("ab13");
          var IS_PURE = __webpack_require__("c430");

          // eslint-disable-next-line es/no-string-prototype-startswith -- safe
          var $startsWith = "".startsWith;
          var min = Math.min;

          var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
          // https://github.com/zloirock/core-js/pull/702
          var MDN_POLYFILL_BUG =
            !IS_PURE &&
            !CORRECT_IS_REGEXP_LOGIC &&
            !!(function () {
              var descriptor = getOwnPropertyDescriptor(
                String.prototype,
                "startsWith"
              );
              return descriptor && !descriptor.writable;
            })();

          // `String.prototype.startsWith` method
          // https://tc39.es/ecma262/#sec-string.prototype.startswith
          $(
            {
              target: "String",
              proto: true,
              forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC,
            },
            {
              startsWith: function startsWith(
                searchString /* , position = 0 */
              ) {
                var that = toString(requireObjectCoercible(this));
                notARegExp(searchString);
                var index = toLength(
                  min(
                    arguments.length > 1 ? arguments[1] : undefined,
                    that.length
                  )
                );
                var search = toString(searchString);
                return $startsWith
                  ? $startsWith.call(that, search, index)
                  : that.slice(index, index + search.length) === search;
              },
            }
          );

          /***/
        },

        /***/ "2cf4": /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var isCallable = __webpack_require__("1626");
          var fails = __webpack_require__("d039");
          var bind = __webpack_require__("0366");
          var html = __webpack_require__("1be4");
          var createElement = __webpack_require__("cc12");
          var IS_IOS = __webpack_require__("1cdc");
          var IS_NODE = __webpack_require__("605d");

          var set = global.setImmediate;
          var clear = global.clearImmediate;
          var process = global.process;
          var MessageChannel = global.MessageChannel;
          var Dispatch = global.Dispatch;
          var counter = 0;
          var queue = {};
          var ONREADYSTATECHANGE = "onreadystatechange";
          var location, defer, channel, port;

          try {
            // Deno throws a ReferenceError on `location` access without `--location` flag
            location = global.location;
          } catch (error) {
            /* empty */
          }

          var run = function (id) {
            // eslint-disable-next-line no-prototype-builtins -- safe
            if (queue.hasOwnProperty(id)) {
              var fn = queue[id];
              delete queue[id];
              fn();
            }
          };

          var runner = function (id) {
            return function () {
              run(id);
            };
          };

          var listener = function (event) {
            run(event.data);
          };

          var post = function (id) {
            // old engines have not location.origin
            global.postMessage(
              String(id),
              location.protocol + "//" + location.host
            );
          };

          // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
          if (!set || !clear) {
            set = function setImmediate(fn) {
              var args = [];
              var argumentsLength = arguments.length;
              var i = 1;
              while (argumentsLength > i) args.push(arguments[i++]);
              queue[++counter] = function () {
                // eslint-disable-next-line no-new-func -- spec requirement
                (isCallable(fn) ? fn : Function(fn)).apply(undefined, args);
              };
              defer(counter);
              return counter;
            };
            clear = function clearImmediate(id) {
              delete queue[id];
            };
            // Node.js 0.8-
            if (IS_NODE) {
              defer = function (id) {
                process.nextTick(runner(id));
              };
              // Sphere (JS game engine) Dispatch API
            } else if (Dispatch && Dispatch.now) {
              defer = function (id) {
                Dispatch.now(runner(id));
              };
              // Browsers with MessageChannel, includes WebWorkers
              // except iOS - https://github.com/zloirock/core-js/issues/624
            } else if (MessageChannel && !IS_IOS) {
              channel = new MessageChannel();
              port = channel.port2;
              channel.port1.onmessage = listener;
              defer = bind(port.postMessage, port, 1);
              // Browsers with postMessage, skip WebWorkers
              // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
            } else if (
              global.addEventListener &&
              isCallable(global.postMessage) &&
              !global.importScripts &&
              location &&
              location.protocol !== "file:" &&
              !fails(post)
            ) {
              defer = post;
              global.addEventListener("message", listener, false);
              // IE8-
            } else if (ONREADYSTATECHANGE in createElement("script")) {
              defer = function (id) {
                html.appendChild(createElement("script"))[ONREADYSTATECHANGE] =
                  function () {
                    html.removeChild(this);
                    run(id);
                  };
              };
              // Rest old browsers
            } else {
              defer = function (id) {
                setTimeout(runner(id), 0);
              };
            }
          }

          module.exports = {
            set: set,
            clear: clear,
          };

          /***/
        },

        /***/ "2d00": /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var userAgent = __webpack_require__("342f");

          var process = global.process;
          var Deno = global.Deno;
          var versions =
            (process && process.versions) || (Deno && Deno.version);
          var v8 = versions && versions.v8;
          var match, version;

          if (v8) {
            match = v8.split(".");
            version = match[0] < 4 ? 1 : match[0] + match[1];
          } else if (userAgent) {
            match = userAgent.match(/Edge\/(\d+)/);
            if (!match || match[1] >= 74) {
              match = userAgent.match(/Chrome\/(\d+)/);
              if (match) version = match[1];
            }
          }

          module.exports = version && +version;

          /***/
        },

        /***/ "2d7c": /***/ function (module, exports) {
          /**
           * A specialized version of `_.filter` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */
          function arrayFilter(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }
            return result;
          }

          module.exports = arrayFilter;

          /***/
        },

        /***/ "2ef0": /***/ function (module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function (global, module) {
            var __WEBPACK_AMD_DEFINE_RESULT__;
            /**
             * @license
             * Lodash <https://lodash.com/>
             * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */
            (function () {
              /** Used as a safe reference for `undefined` in pre-ES5 environments. */
              var undefined;

              /** Used as the semantic version number. */
              var VERSION = "4.17.21";

              /** Used as the size to enable large array optimizations. */
              var LARGE_ARRAY_SIZE = 200;

              /** Error message constants. */
              var CORE_ERROR_TEXT =
                  "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
                FUNC_ERROR_TEXT = "Expected a function",
                INVALID_TEMPL_VAR_ERROR_TEXT =
                  "Invalid `variable` option passed into `_.template`";

              /** Used to stand-in for `undefined` hash values. */
              var HASH_UNDEFINED = "__lodash_hash_undefined__";

              /** Used as the maximum memoize cache size. */
              var MAX_MEMOIZE_SIZE = 500;

              /** Used as the internal argument placeholder. */
              var PLACEHOLDER = "__lodash_placeholder__";

              /** Used to compose bitmasks for cloning. */
              var CLONE_DEEP_FLAG = 1,
                CLONE_FLAT_FLAG = 2,
                CLONE_SYMBOLS_FLAG = 4;

              /** Used to compose bitmasks for value comparisons. */
              var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

              /** Used to compose bitmasks for function metadata. */
              var WRAP_BIND_FLAG = 1,
                WRAP_BIND_KEY_FLAG = 2,
                WRAP_CURRY_BOUND_FLAG = 4,
                WRAP_CURRY_FLAG = 8,
                WRAP_CURRY_RIGHT_FLAG = 16,
                WRAP_PARTIAL_FLAG = 32,
                WRAP_PARTIAL_RIGHT_FLAG = 64,
                WRAP_ARY_FLAG = 128,
                WRAP_REARG_FLAG = 256,
                WRAP_FLIP_FLAG = 512;

              /** Used as default options for `_.truncate`. */
              var DEFAULT_TRUNC_LENGTH = 30,
                DEFAULT_TRUNC_OMISSION = "...";

              /** Used to detect hot functions by number of calls within a span of milliseconds. */
              var HOT_COUNT = 800,
                HOT_SPAN = 16;

              /** Used to indicate the type of lazy iteratees. */
              var LAZY_FILTER_FLAG = 1,
                LAZY_MAP_FLAG = 2,
                LAZY_WHILE_FLAG = 3;

              /** Used as references for various `Number` constants. */
              var INFINITY = 1 / 0,
                MAX_SAFE_INTEGER = 9007199254740991,
                MAX_INTEGER = 1.7976931348623157e308,
                NAN = 0 / 0;

              /** Used as references for the maximum length and index of an array. */
              var MAX_ARRAY_LENGTH = 4294967295,
                MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

              /** Used to associate wrap methods with their bit flags. */
              var wrapFlags = [
                ["ary", WRAP_ARY_FLAG],
                ["bind", WRAP_BIND_FLAG],
                ["bindKey", WRAP_BIND_KEY_FLAG],
                ["curry", WRAP_CURRY_FLAG],
                ["curryRight", WRAP_CURRY_RIGHT_FLAG],
                ["flip", WRAP_FLIP_FLAG],
                ["partial", WRAP_PARTIAL_FLAG],
                ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
                ["rearg", WRAP_REARG_FLAG],
              ];

              /** `Object#toString` result references. */
              var argsTag = "[object Arguments]",
                arrayTag = "[object Array]",
                asyncTag = "[object AsyncFunction]",
                boolTag = "[object Boolean]",
                dateTag = "[object Date]",
                domExcTag = "[object DOMException]",
                errorTag = "[object Error]",
                funcTag = "[object Function]",
                genTag = "[object GeneratorFunction]",
                mapTag = "[object Map]",
                numberTag = "[object Number]",
                nullTag = "[object Null]",
                objectTag = "[object Object]",
                promiseTag = "[object Promise]",
                proxyTag = "[object Proxy]",
                regexpTag = "[object RegExp]",
                setTag = "[object Set]",
                stringTag = "[object String]",
                symbolTag = "[object Symbol]",
                undefinedTag = "[object Undefined]",
                weakMapTag = "[object WeakMap]",
                weakSetTag = "[object WeakSet]";

              var arrayBufferTag = "[object ArrayBuffer]",
                dataViewTag = "[object DataView]",
                float32Tag = "[object Float32Array]",
                float64Tag = "[object Float64Array]",
                int8Tag = "[object Int8Array]",
                int16Tag = "[object Int16Array]",
                int32Tag = "[object Int32Array]",
                uint8Tag = "[object Uint8Array]",
                uint8ClampedTag = "[object Uint8ClampedArray]",
                uint16Tag = "[object Uint16Array]",
                uint32Tag = "[object Uint32Array]";

              /** Used to match empty string literals in compiled template source. */
              var reEmptyStringLeading = /\b__p \+= '';/g,
                reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

              /** Used to match HTML entities and HTML characters. */
              var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                reUnescapedHtml = /[&<>"']/g,
                reHasEscapedHtml = RegExp(reEscapedHtml.source),
                reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

              /** Used to match template delimiters. */
              var reEscape = /<%-([\s\S]+?)%>/g,
                reEvaluate = /<%([\s\S]+?)%>/g,
                reInterpolate = /<%=([\s\S]+?)%>/g;

              /** Used to match property names within property paths. */
              var reIsDeepProp =
                  /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/,
                rePropName =
                  /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

              /**
               * Used to match `RegExp`
               * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
               */
              var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                reHasRegExpChar = RegExp(reRegExpChar.source);

              /** Used to match leading whitespace. */
              var reTrimStart = /^\s+/;

              /** Used to match a single whitespace character. */
              var reWhitespace = /\s/;

              /** Used to match wrap detail comments. */
              var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                reSplitDetails = /,? & /;

              /** Used to match words composed of alphanumeric characters. */
              var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

              /**
               * Used to validate the `validate` option in `_.template` variable.
               *
               * Forbids characters which could potentially change the meaning of the function argument definition:
               * - "()," (modification of function parameters)
               * - "=" (default value)
               * - "[]{}" (destructuring of function parameters)
               * - "/" (beginning of a comment)
               * - whitespace
               */
              var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

              /** Used to match backslashes in property paths. */
              var reEscapeChar = /\\(\\)?/g;

              /**
               * Used to match
               * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
               */
              var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

              /** Used to match `RegExp` flags from their coerced string values. */
              var reFlags = /\w*$/;

              /** Used to detect bad signed hexadecimal string values. */
              var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

              /** Used to detect binary string values. */
              var reIsBinary = /^0b[01]+$/i;

              /** Used to detect host constructors (Safari). */
              var reIsHostCtor = /^\[object .+?Constructor\]$/;

              /** Used to detect octal string values. */
              var reIsOctal = /^0o[0-7]+$/i;

              /** Used to detect unsigned integer values. */
              var reIsUint = /^(?:0|[1-9]\d*)$/;

              /** Used to match Latin Unicode letters (excluding mathematical operators). */
              var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

              /** Used to ensure capturing order of template delimiters. */
              var reNoMatch = /($^)/;

              /** Used to match unescaped characters in compiled string literals. */
              var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

              /** Used to compose unicode character classes. */
              var rsAstralRange = "\\ud800-\\udfff",
                rsComboMarksRange = "\\u0300-\\u036f",
                reComboHalfMarksRange = "\\ufe20-\\ufe2f",
                rsComboSymbolsRange = "\\u20d0-\\u20ff",
                rsComboRange =
                  rsComboMarksRange +
                  reComboHalfMarksRange +
                  rsComboSymbolsRange,
                rsDingbatRange = "\\u2700-\\u27bf",
                rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff",
                rsMathOpRange = "\\xac\\xb1\\xd7\\xf7",
                rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
                rsPunctuationRange = "\\u2000-\\u206f",
                rsSpaceRange =
                  " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
                rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde",
                rsVarRange = "\\ufe0e\\ufe0f",
                rsBreakRange =
                  rsMathOpRange +
                  rsNonCharRange +
                  rsPunctuationRange +
                  rsSpaceRange;

              /** Used to compose unicode capture groups. */
              var rsApos = "['\u2019]",
                rsAstral = "[" + rsAstralRange + "]",
                rsBreak = "[" + rsBreakRange + "]",
                rsCombo = "[" + rsComboRange + "]",
                rsDigits = "\\d+",
                rsDingbat = "[" + rsDingbatRange + "]",
                rsLower = "[" + rsLowerRange + "]",
                rsMisc =
                  "[^" +
                  rsAstralRange +
                  rsBreakRange +
                  rsDigits +
                  rsDingbatRange +
                  rsLowerRange +
                  rsUpperRange +
                  "]",
                rsFitz = "\\ud83c[\\udffb-\\udfff]",
                rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")",
                rsNonAstral = "[^" + rsAstralRange + "]",
                rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
                rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
                rsUpper = "[" + rsUpperRange + "]",
                rsZWJ = "\\u200d";

              /** Used to compose unicode regexes. */
              var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")",
                rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")",
                rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?",
                rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?",
                reOptMod = rsModifier + "?",
                rsOptVar = "[" + rsVarRange + "]?",
                rsOptJoin =
                  "(?:" +
                  rsZWJ +
                  "(?:" +
                  [rsNonAstral, rsRegional, rsSurrPair].join("|") +
                  ")" +
                  rsOptVar +
                  reOptMod +
                  ")*",
                rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
                rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
                rsSeq = rsOptVar + reOptMod + rsOptJoin,
                rsEmoji =
                  "(?:" +
                  [rsDingbat, rsRegional, rsSurrPair].join("|") +
                  ")" +
                  rsSeq,
                rsSymbol =
                  "(?:" +
                  [
                    rsNonAstral + rsCombo + "?",
                    rsCombo,
                    rsRegional,
                    rsSurrPair,
                    rsAstral,
                  ].join("|") +
                  ")";

              /** Used to match apostrophes. */
              var reApos = RegExp(rsApos, "g");

              /**
               * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
               * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
               */
              var reComboMark = RegExp(rsCombo, "g");

              /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
              var reUnicode = RegExp(
                rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq,
                "g"
              );

              /** Used to match complex or compound words. */
              var reUnicodeWord = RegExp(
                [
                  rsUpper +
                    "?" +
                    rsLower +
                    "+" +
                    rsOptContrLower +
                    "(?=" +
                    [rsBreak, rsUpper, "$"].join("|") +
                    ")",
                  rsMiscUpper +
                    "+" +
                    rsOptContrUpper +
                    "(?=" +
                    [rsBreak, rsUpper + rsMiscLower, "$"].join("|") +
                    ")",
                  rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
                  rsUpper + "+" + rsOptContrUpper,
                  rsOrdUpper,
                  rsOrdLower,
                  rsDigits,
                  rsEmoji,
                ].join("|"),
                "g"
              );

              /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
              var reHasUnicode = RegExp(
                "[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]"
              );

              /** Used to detect strings that need a more robust regexp to match words. */
              var reHasUnicodeWord =
                /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

              /** Used to assign default `context` object properties. */
              var contextProps = [
                "Array",
                "Buffer",
                "DataView",
                "Date",
                "Error",
                "Float32Array",
                "Float64Array",
                "Function",
                "Int8Array",
                "Int16Array",
                "Int32Array",
                "Map",
                "Math",
                "Object",
                "Promise",
                "RegExp",
                "Set",
                "String",
                "Symbol",
                "TypeError",
                "Uint8Array",
                "Uint8ClampedArray",
                "Uint16Array",
                "Uint32Array",
                "WeakMap",
                "_",
                "clearTimeout",
                "isFinite",
                "parseInt",
                "setTimeout",
              ];

              /** Used to make template sourceURLs easier to identify. */
              var templateCounter = -1;

              /** Used to identify `toStringTag` values of typed arrays. */
              var typedArrayTags = {};
              typedArrayTags[float32Tag] =
                typedArrayTags[float64Tag] =
                typedArrayTags[int8Tag] =
                typedArrayTags[int16Tag] =
                typedArrayTags[int32Tag] =
                typedArrayTags[uint8Tag] =
                typedArrayTags[uint8ClampedTag] =
                typedArrayTags[uint16Tag] =
                typedArrayTags[uint32Tag] =
                  true;
              typedArrayTags[argsTag] =
                typedArrayTags[arrayTag] =
                typedArrayTags[arrayBufferTag] =
                typedArrayTags[boolTag] =
                typedArrayTags[dataViewTag] =
                typedArrayTags[dateTag] =
                typedArrayTags[errorTag] =
                typedArrayTags[funcTag] =
                typedArrayTags[mapTag] =
                typedArrayTags[numberTag] =
                typedArrayTags[objectTag] =
                typedArrayTags[regexpTag] =
                typedArrayTags[setTag] =
                typedArrayTags[stringTag] =
                typedArrayTags[weakMapTag] =
                  false;

              /** Used to identify `toStringTag` values supported by `_.clone`. */
              var cloneableTags = {};
              cloneableTags[argsTag] =
                cloneableTags[arrayTag] =
                cloneableTags[arrayBufferTag] =
                cloneableTags[dataViewTag] =
                cloneableTags[boolTag] =
                cloneableTags[dateTag] =
                cloneableTags[float32Tag] =
                cloneableTags[float64Tag] =
                cloneableTags[int8Tag] =
                cloneableTags[int16Tag] =
                cloneableTags[int32Tag] =
                cloneableTags[mapTag] =
                cloneableTags[numberTag] =
                cloneableTags[objectTag] =
                cloneableTags[regexpTag] =
                cloneableTags[setTag] =
                cloneableTags[stringTag] =
                cloneableTags[symbolTag] =
                cloneableTags[uint8Tag] =
                cloneableTags[uint8ClampedTag] =
                cloneableTags[uint16Tag] =
                cloneableTags[uint32Tag] =
                  true;
              cloneableTags[errorTag] =
                cloneableTags[funcTag] =
                cloneableTags[weakMapTag] =
                  false;

              /** Used to map Latin Unicode letters to basic Latin letters. */
              var deburredLetters = {
                // Latin-1 Supplement block.
                "\xc0": "A",
                "\xc1": "A",
                "\xc2": "A",
                "\xc3": "A",
                "\xc4": "A",
                "\xc5": "A",
                "\xe0": "a",
                "\xe1": "a",
                "\xe2": "a",
                "\xe3": "a",
                "\xe4": "a",
                "\xe5": "a",
                "\xc7": "C",
                "\xe7": "c",
                "\xd0": "D",
                "\xf0": "d",
                "\xc8": "E",
                "\xc9": "E",
                "\xca": "E",
                "\xcb": "E",
                "\xe8": "e",
                "\xe9": "e",
                "\xea": "e",
                "\xeb": "e",
                "\xcc": "I",
                "\xcd": "I",
                "\xce": "I",
                "\xcf": "I",
                "\xec": "i",
                "\xed": "i",
                "\xee": "i",
                "\xef": "i",
                "\xd1": "N",
                "\xf1": "n",
                "\xd2": "O",
                "\xd3": "O",
                "\xd4": "O",
                "\xd5": "O",
                "\xd6": "O",
                "\xd8": "O",
                "\xf2": "o",
                "\xf3": "o",
                "\xf4": "o",
                "\xf5": "o",
                "\xf6": "o",
                "\xf8": "o",
                "\xd9": "U",
                "\xda": "U",
                "\xdb": "U",
                "\xdc": "U",
                "\xf9": "u",
                "\xfa": "u",
                "\xfb": "u",
                "\xfc": "u",
                "\xdd": "Y",
                "\xfd": "y",
                "\xff": "y",
                "\xc6": "Ae",
                "\xe6": "ae",
                "\xde": "Th",
                "\xfe": "th",
                "\xdf": "ss",
                // Latin Extended-A block.
                "\u0100": "A",
                "\u0102": "A",
                "\u0104": "A",
                "\u0101": "a",
                "\u0103": "a",
                "\u0105": "a",
                "\u0106": "C",
                "\u0108": "C",
                "\u010a": "C",
                "\u010c": "C",
                "\u0107": "c",
                "\u0109": "c",
                "\u010b": "c",
                "\u010d": "c",
                "\u010e": "D",
                "\u0110": "D",
                "\u010f": "d",
                "\u0111": "d",
                "\u0112": "E",
                "\u0114": "E",
                "\u0116": "E",
                "\u0118": "E",
                "\u011a": "E",
                "\u0113": "e",
                "\u0115": "e",
                "\u0117": "e",
                "\u0119": "e",
                "\u011b": "e",
                "\u011c": "G",
                "\u011e": "G",
                "\u0120": "G",
                "\u0122": "G",
                "\u011d": "g",
                "\u011f": "g",
                "\u0121": "g",
                "\u0123": "g",
                "\u0124": "H",
                "\u0126": "H",
                "\u0125": "h",
                "\u0127": "h",
                "\u0128": "I",
                "\u012a": "I",
                "\u012c": "I",
                "\u012e": "I",
                "\u0130": "I",
                "\u0129": "i",
                "\u012b": "i",
                "\u012d": "i",
                "\u012f": "i",
                "\u0131": "i",
                "\u0134": "J",
                "\u0135": "j",
                "\u0136": "K",
                "\u0137": "k",
                "\u0138": "k",
                "\u0139": "L",
                "\u013b": "L",
                "\u013d": "L",
                "\u013f": "L",
                "\u0141": "L",
                "\u013a": "l",
                "\u013c": "l",
                "\u013e": "l",
                "\u0140": "l",
                "\u0142": "l",
                "\u0143": "N",
                "\u0145": "N",
                "\u0147": "N",
                "\u014a": "N",
                "\u0144": "n",
                "\u0146": "n",
                "\u0148": "n",
                "\u014b": "n",
                "\u014c": "O",
                "\u014e": "O",
                "\u0150": "O",
                "\u014d": "o",
                "\u014f": "o",
                "\u0151": "o",
                "\u0154": "R",
                "\u0156": "R",
                "\u0158": "R",
                "\u0155": "r",
                "\u0157": "r",
                "\u0159": "r",
                "\u015a": "S",
                "\u015c": "S",
                "\u015e": "S",
                "\u0160": "S",
                "\u015b": "s",
                "\u015d": "s",
                "\u015f": "s",
                "\u0161": "s",
                "\u0162": "T",
                "\u0164": "T",
                "\u0166": "T",
                "\u0163": "t",
                "\u0165": "t",
                "\u0167": "t",
                "\u0168": "U",
                "\u016a": "U",
                "\u016c": "U",
                "\u016e": "U",
                "\u0170": "U",
                "\u0172": "U",
                "\u0169": "u",
                "\u016b": "u",
                "\u016d": "u",
                "\u016f": "u",
                "\u0171": "u",
                "\u0173": "u",
                "\u0174": "W",
                "\u0175": "w",
                "\u0176": "Y",
                "\u0177": "y",
                "\u0178": "Y",
                "\u0179": "Z",
                "\u017b": "Z",
                "\u017d": "Z",
                "\u017a": "z",
                "\u017c": "z",
                "\u017e": "z",
                "\u0132": "IJ",
                "\u0133": "ij",
                "\u0152": "Oe",
                "\u0153": "oe",
                "\u0149": "'n",
                "\u017f": "s",
              };

              /** Used to map characters to HTML entities. */
              var htmlEscapes = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;",
              };

              /** Used to map HTML entities to characters. */
              var htmlUnescapes = {
                "&amp;": "&",
                "&lt;": "<",
                "&gt;": ">",
                "&quot;": '"',
                "&#39;": "'",
              };

              /** Used to escape characters for inclusion in compiled string literals. */
              var stringEscapes = {
                "\\": "\\",
                "'": "'",
                "\n": "n",
                "\r": "r",
                "\u2028": "u2028",
                "\u2029": "u2029",
              };

              /** Built-in method references without a dependency on `root`. */
              var freeParseFloat = parseFloat,
                freeParseInt = parseInt;

              /** Detect free variable `global` from Node.js. */
              var freeGlobal =
                typeof global == "object" &&
                global &&
                global.Object === Object &&
                global;

              /** Detect free variable `self`. */
              var freeSelf =
                typeof self == "object" &&
                self &&
                self.Object === Object &&
                self;

              /** Used as a reference to the global object. */
              var root = freeGlobal || freeSelf || Function("return this")();

              /** Detect free variable `exports`. */
              var freeExports = true && exports && !exports.nodeType && exports;

              /** Detect free variable `module`. */
              var freeModule =
                freeExports &&
                typeof module == "object" &&
                module &&
                !module.nodeType &&
                module;

              /** Detect the popular CommonJS extension `module.exports`. */
              var moduleExports =
                freeModule && freeModule.exports === freeExports;

              /** Detect free variable `process` from Node.js. */
              var freeProcess = moduleExports && freeGlobal.process;

              /** Used to access faster Node.js helpers. */
              var nodeUtil = (function () {
                try {
                  // Use `util.types` for Node.js 10+.
                  var types =
                    freeModule &&
                    freeModule.require &&
                    freeModule.require("util").types;

                  if (types) {
                    return types;
                  }

                  // Legacy `process.binding('util')` for Node.js < 10.
                  return (
                    freeProcess &&
                    freeProcess.binding &&
                    freeProcess.binding("util")
                  );
                } catch (e) {}
              })();

              /* Node.js helper references. */
              var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                nodeIsDate = nodeUtil && nodeUtil.isDate,
                nodeIsMap = nodeUtil && nodeUtil.isMap,
                nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                nodeIsSet = nodeUtil && nodeUtil.isSet,
                nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

              /*--------------------------------------------------------------------------*/

              /**
               * A faster alternative to `Function#apply`, this function invokes `func`
               * with the `this` binding of `thisArg` and the arguments of `args`.
               *
               * @private
               * @param {Function} func The function to invoke.
               * @param {*} thisArg The `this` binding of `func`.
               * @param {Array} args The arguments to invoke `func` with.
               * @returns {*} Returns the result of `func`.
               */
              function apply(func, thisArg, args) {
                switch (args.length) {
                  case 0:
                    return func.call(thisArg);
                  case 1:
                    return func.call(thisArg, args[0]);
                  case 2:
                    return func.call(thisArg, args[0], args[1]);
                  case 3:
                    return func.call(thisArg, args[0], args[1], args[2]);
                }
                return func.apply(thisArg, args);
              }

              /**
               * A specialized version of `baseAggregator` for arrays.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} setter The function to set `accumulator` values.
               * @param {Function} iteratee The iteratee to transform keys.
               * @param {Object} accumulator The initial aggregated object.
               * @returns {Function} Returns `accumulator`.
               */
              function arrayAggregator(array, setter, iteratee, accumulator) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  var value = array[index];
                  setter(accumulator, value, iteratee(value), array);
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.forEach` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns `array`.
               */
              function arrayEach(array, iteratee) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (iteratee(array[index], index, array) === false) {
                    break;
                  }
                }
                return array;
              }

              /**
               * A specialized version of `_.forEachRight` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns `array`.
               */
              function arrayEachRight(array, iteratee) {
                var length = array == null ? 0 : array.length;

                while (length--) {
                  if (iteratee(array[length], length, array) === false) {
                    break;
                  }
                }
                return array;
              }

              /**
               * A specialized version of `_.every` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if all elements pass the predicate check,
               *  else `false`.
               */
              function arrayEvery(array, predicate) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (!predicate(array[index], index, array)) {
                    return false;
                  }
                }
                return true;
              }

              /**
               * A specialized version of `_.filter` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {Array} Returns the new filtered array.
               */
              function arrayFilter(array, predicate) {
                var index = -1,
                  length = array == null ? 0 : array.length,
                  resIndex = 0,
                  result = [];

                while (++index < length) {
                  var value = array[index];
                  if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                  }
                }
                return result;
              }

              /**
               * A specialized version of `_.includes` for arrays without support for
               * specifying an index to search from.
               *
               * @private
               * @param {Array} [array] The array to inspect.
               * @param {*} target The value to search for.
               * @returns {boolean} Returns `true` if `target` is found, else `false`.
               */
              function arrayIncludes(array, value) {
                var length = array == null ? 0 : array.length;
                return !!length && baseIndexOf(array, value, 0) > -1;
              }

              /**
               * This function is like `arrayIncludes` except that it accepts a comparator.
               *
               * @private
               * @param {Array} [array] The array to inspect.
               * @param {*} target The value to search for.
               * @param {Function} comparator The comparator invoked per element.
               * @returns {boolean} Returns `true` if `target` is found, else `false`.
               */
              function arrayIncludesWith(array, value, comparator) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (comparator(value, array[index])) {
                    return true;
                  }
                }
                return false;
              }

              /**
               * A specialized version of `_.map` for arrays without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the new mapped array.
               */
              function arrayMap(array, iteratee) {
                var index = -1,
                  length = array == null ? 0 : array.length,
                  result = Array(length);

                while (++index < length) {
                  result[index] = iteratee(array[index], index, array);
                }
                return result;
              }

              /**
               * Appends the elements of `values` to `array`.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {Array} values The values to append.
               * @returns {Array} Returns `array`.
               */
              function arrayPush(array, values) {
                var index = -1,
                  length = values.length,
                  offset = array.length;

                while (++index < length) {
                  array[offset + index] = values[index];
                }
                return array;
              }

              /**
               * A specialized version of `_.reduce` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @param {boolean} [initAccum] Specify using the first element of `array` as
               *  the initial value.
               * @returns {*} Returns the accumulated value.
               */
              function arrayReduce(array, iteratee, accumulator, initAccum) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                if (initAccum && length) {
                  accumulator = array[++index];
                }
                while (++index < length) {
                  accumulator = iteratee(
                    accumulator,
                    array[index],
                    index,
                    array
                  );
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.reduceRight` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @param {boolean} [initAccum] Specify using the last element of `array` as
               *  the initial value.
               * @returns {*} Returns the accumulated value.
               */
              function arrayReduceRight(
                array,
                iteratee,
                accumulator,
                initAccum
              ) {
                var length = array == null ? 0 : array.length;
                if (initAccum && length) {
                  accumulator = array[--length];
                }
                while (length--) {
                  accumulator = iteratee(
                    accumulator,
                    array[length],
                    length,
                    array
                  );
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.some` for arrays without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if any element passes the predicate check,
               *  else `false`.
               */
              function arraySome(array, predicate) {
                var index = -1,
                  length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (predicate(array[index], index, array)) {
                    return true;
                  }
                }
                return false;
              }

              /**
               * Gets the size of an ASCII `string`.
               *
               * @private
               * @param {string} string The string inspect.
               * @returns {number} Returns the string size.
               */
              var asciiSize = baseProperty("length");

              /**
               * Converts an ASCII `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function asciiToArray(string) {
                return string.split("");
              }

              /**
               * Splits an ASCII `string` into an array of its words.
               *
               * @private
               * @param {string} The string to inspect.
               * @returns {Array} Returns the words of `string`.
               */
              function asciiWords(string) {
                return string.match(reAsciiWord) || [];
              }

              /**
               * The base implementation of methods like `_.findKey` and `_.findLastKey`,
               * without support for iteratee shorthands, which iterates over `collection`
               * using `eachFunc`.
               *
               * @private
               * @param {Array|Object} collection The collection to inspect.
               * @param {Function} predicate The function invoked per iteration.
               * @param {Function} eachFunc The function to iterate over `collection`.
               * @returns {*} Returns the found element or its key, else `undefined`.
               */
              function baseFindKey(collection, predicate, eachFunc) {
                var result;
                eachFunc(collection, function (value, key, collection) {
                  if (predicate(value, key, collection)) {
                    result = key;
                    return false;
                  }
                });
                return result;
              }

              /**
               * The base implementation of `_.findIndex` and `_.findLastIndex` without
               * support for iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {Function} predicate The function invoked per iteration.
               * @param {number} fromIndex The index to search from.
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseFindIndex(array, predicate, fromIndex, fromRight) {
                var length = array.length,
                  index = fromIndex + (fromRight ? 1 : -1);

                while (fromRight ? index-- : ++index < length) {
                  if (predicate(array[index], index, array)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseIndexOf(array, value, fromIndex) {
                return value === value
                  ? strictIndexOf(array, value, fromIndex)
                  : baseFindIndex(array, baseIsNaN, fromIndex);
              }

              /**
               * This function is like `baseIndexOf` except that it accepts a comparator.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @param {Function} comparator The comparator invoked per element.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseIndexOfWith(array, value, fromIndex, comparator) {
                var index = fromIndex - 1,
                  length = array.length;

                while (++index < length) {
                  if (comparator(array[index], value)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * The base implementation of `_.isNaN` without support for number objects.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
               */
              function baseIsNaN(value) {
                return value !== value;
              }

              /**
               * The base implementation of `_.mean` and `_.meanBy` without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {number} Returns the mean.
               */
              function baseMean(array, iteratee) {
                var length = array == null ? 0 : array.length;
                return length ? baseSum(array, iteratee) / length : NAN;
              }

              /**
               * The base implementation of `_.property` without support for deep paths.
               *
               * @private
               * @param {string} key The key of the property to get.
               * @returns {Function} Returns the new accessor function.
               */
              function baseProperty(key) {
                return function (object) {
                  return object == null ? undefined : object[key];
                };
              }

              /**
               * The base implementation of `_.propertyOf` without support for deep paths.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Function} Returns the new accessor function.
               */
              function basePropertyOf(object) {
                return function (key) {
                  return object == null ? undefined : object[key];
                };
              }

              /**
               * The base implementation of `_.reduce` and `_.reduceRight`, without support
               * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} accumulator The initial value.
               * @param {boolean} initAccum Specify using the first or last element of
               *  `collection` as the initial value.
               * @param {Function} eachFunc The function to iterate over `collection`.
               * @returns {*} Returns the accumulated value.
               */
              function baseReduce(
                collection,
                iteratee,
                accumulator,
                initAccum,
                eachFunc
              ) {
                eachFunc(collection, function (value, index, collection) {
                  accumulator = initAccum
                    ? ((initAccum = false), value)
                    : iteratee(accumulator, value, index, collection);
                });
                return accumulator;
              }

              /**
               * The base implementation of `_.sortBy` which uses `comparer` to define the
               * sort order of `array` and replaces criteria objects with their corresponding
               * values.
               *
               * @private
               * @param {Array} array The array to sort.
               * @param {Function} comparer The function to define sort order.
               * @returns {Array} Returns `array`.
               */
              function baseSortBy(array, comparer) {
                var length = array.length;

                array.sort(comparer);
                while (length--) {
                  array[length] = array[length].value;
                }
                return array;
              }

              /**
               * The base implementation of `_.sum` and `_.sumBy` without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {number} Returns the sum.
               */
              function baseSum(array, iteratee) {
                var result,
                  index = -1,
                  length = array.length;

                while (++index < length) {
                  var current = iteratee(array[index]);
                  if (current !== undefined) {
                    result = result === undefined ? current : result + current;
                  }
                }
                return result;
              }

              /**
               * The base implementation of `_.times` without support for iteratee shorthands
               * or max array length checks.
               *
               * @private
               * @param {number} n The number of times to invoke `iteratee`.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the array of results.
               */
              function baseTimes(n, iteratee) {
                var index = -1,
                  result = Array(n);

                while (++index < n) {
                  result[index] = iteratee(index);
                }
                return result;
              }

              /**
               * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
               * of key-value pairs for `object` corresponding to the property names of `props`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} props The property names to get values for.
               * @returns {Object} Returns the key-value pairs.
               */
              function baseToPairs(object, props) {
                return arrayMap(props, function (key) {
                  return [key, object[key]];
                });
              }

              /**
               * The base implementation of `_.trim`.
               *
               * @private
               * @param {string} string The string to trim.
               * @returns {string} Returns the trimmed string.
               */
              function baseTrim(string) {
                return string
                  ? string
                      .slice(0, trimmedEndIndex(string) + 1)
                      .replace(reTrimStart, "")
                  : string;
              }

              /**
               * The base implementation of `_.unary` without support for storing metadata.
               *
               * @private
               * @param {Function} func The function to cap arguments for.
               * @returns {Function} Returns the new capped function.
               */
              function baseUnary(func) {
                return function (value) {
                  return func(value);
                };
              }

              /**
               * The base implementation of `_.values` and `_.valuesIn` which creates an
               * array of `object` property values corresponding to the property names
               * of `props`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} props The property names to get values for.
               * @returns {Object} Returns the array of property values.
               */
              function baseValues(object, props) {
                return arrayMap(props, function (key) {
                  return object[key];
                });
              }

              /**
               * Checks if a `cache` value for `key` exists.
               *
               * @private
               * @param {Object} cache The cache to query.
               * @param {string} key The key of the entry to check.
               * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
               */
              function cacheHas(cache, key) {
                return cache.has(key);
              }

              /**
               * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
               * that is not found in the character symbols.
               *
               * @private
               * @param {Array} strSymbols The string symbols to inspect.
               * @param {Array} chrSymbols The character symbols to find.
               * @returns {number} Returns the index of the first unmatched string symbol.
               */
              function charsStartIndex(strSymbols, chrSymbols) {
                var index = -1,
                  length = strSymbols.length;

                while (
                  ++index < length &&
                  baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
                ) {}
                return index;
              }

              /**
               * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
               * that is not found in the character symbols.
               *
               * @private
               * @param {Array} strSymbols The string symbols to inspect.
               * @param {Array} chrSymbols The character symbols to find.
               * @returns {number} Returns the index of the last unmatched string symbol.
               */
              function charsEndIndex(strSymbols, chrSymbols) {
                var index = strSymbols.length;

                while (
                  index-- &&
                  baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
                ) {}
                return index;
              }

              /**
               * Gets the number of `placeholder` occurrences in `array`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} placeholder The placeholder to search for.
               * @returns {number} Returns the placeholder count.
               */
              function countHolders(array, placeholder) {
                var length = array.length,
                  result = 0;

                while (length--) {
                  if (array[length] === placeholder) {
                    ++result;
                  }
                }
                return result;
              }

              /**
               * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
               * letters to basic Latin letters.
               *
               * @private
               * @param {string} letter The matched letter to deburr.
               * @returns {string} Returns the deburred letter.
               */
              var deburrLetter = basePropertyOf(deburredLetters);

              /**
               * Used by `_.escape` to convert characters to HTML entities.
               *
               * @private
               * @param {string} chr The matched character to escape.
               * @returns {string} Returns the escaped character.
               */
              var escapeHtmlChar = basePropertyOf(htmlEscapes);

              /**
               * Used by `_.template` to escape characters for inclusion in compiled string literals.
               *
               * @private
               * @param {string} chr The matched character to escape.
               * @returns {string} Returns the escaped character.
               */
              function escapeStringChar(chr) {
                return "\\" + stringEscapes[chr];
              }

              /**
               * Gets the value at `key` of `object`.
               *
               * @private
               * @param {Object} [object] The object to query.
               * @param {string} key The key of the property to get.
               * @returns {*} Returns the property value.
               */
              function getValue(object, key) {
                return object == null ? undefined : object[key];
              }

              /**
               * Checks if `string` contains Unicode symbols.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {boolean} Returns `true` if a symbol is found, else `false`.
               */
              function hasUnicode(string) {
                return reHasUnicode.test(string);
              }

              /**
               * Checks if `string` contains a word composed of Unicode symbols.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {boolean} Returns `true` if a word is found, else `false`.
               */
              function hasUnicodeWord(string) {
                return reHasUnicodeWord.test(string);
              }

              /**
               * Converts `iterator` to an array.
               *
               * @private
               * @param {Object} iterator The iterator to convert.
               * @returns {Array} Returns the converted array.
               */
              function iteratorToArray(iterator) {
                var data,
                  result = [];

                while (!(data = iterator.next()).done) {
                  result.push(data.value);
                }
                return result;
              }

              /**
               * Converts `map` to its key-value pairs.
               *
               * @private
               * @param {Object} map The map to convert.
               * @returns {Array} Returns the key-value pairs.
               */
              function mapToArray(map) {
                var index = -1,
                  result = Array(map.size);

                map.forEach(function (value, key) {
                  result[++index] = [key, value];
                });
                return result;
              }

              /**
               * Creates a unary function that invokes `func` with its argument transformed.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {Function} transform The argument transform.
               * @returns {Function} Returns the new function.
               */
              function overArg(func, transform) {
                return function (arg) {
                  return func(transform(arg));
                };
              }

              /**
               * Replaces all `placeholder` elements in `array` with an internal placeholder
               * and returns an array of their indexes.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {*} placeholder The placeholder to replace.
               * @returns {Array} Returns the new array of placeholder indexes.
               */
              function replaceHolders(array, placeholder) {
                var index = -1,
                  length = array.length,
                  resIndex = 0,
                  result = [];

                while (++index < length) {
                  var value = array[index];
                  if (value === placeholder || value === PLACEHOLDER) {
                    array[index] = PLACEHOLDER;
                    result[resIndex++] = index;
                  }
                }
                return result;
              }

              /**
               * Converts `set` to an array of its values.
               *
               * @private
               * @param {Object} set The set to convert.
               * @returns {Array} Returns the values.
               */
              function setToArray(set) {
                var index = -1,
                  result = Array(set.size);

                set.forEach(function (value) {
                  result[++index] = value;
                });
                return result;
              }

              /**
               * Converts `set` to its value-value pairs.
               *
               * @private
               * @param {Object} set The set to convert.
               * @returns {Array} Returns the value-value pairs.
               */
              function setToPairs(set) {
                var index = -1,
                  result = Array(set.size);

                set.forEach(function (value) {
                  result[++index] = [value, value];
                });
                return result;
              }

              /**
               * A specialized version of `_.indexOf` which performs strict equality
               * comparisons of values, i.e. `===`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function strictIndexOf(array, value, fromIndex) {
                var index = fromIndex - 1,
                  length = array.length;

                while (++index < length) {
                  if (array[index] === value) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * A specialized version of `_.lastIndexOf` which performs strict equality
               * comparisons of values, i.e. `===`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function strictLastIndexOf(array, value, fromIndex) {
                var index = fromIndex + 1;
                while (index--) {
                  if (array[index] === value) {
                    return index;
                  }
                }
                return index;
              }

              /**
               * Gets the number of symbols in `string`.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {number} Returns the string size.
               */
              function stringSize(string) {
                return hasUnicode(string)
                  ? unicodeSize(string)
                  : asciiSize(string);
              }

              /**
               * Converts `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function stringToArray(string) {
                return hasUnicode(string)
                  ? unicodeToArray(string)
                  : asciiToArray(string);
              }

              /**
               * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
               * character of `string`.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {number} Returns the index of the last non-whitespace character.
               */
              function trimmedEndIndex(string) {
                var index = string.length;

                while (index-- && reWhitespace.test(string.charAt(index))) {}
                return index;
              }

              /**
               * Used by `_.unescape` to convert HTML entities to characters.
               *
               * @private
               * @param {string} chr The matched character to unescape.
               * @returns {string} Returns the unescaped character.
               */
              var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

              /**
               * Gets the size of a Unicode `string`.
               *
               * @private
               * @param {string} string The string inspect.
               * @returns {number} Returns the string size.
               */
              function unicodeSize(string) {
                var result = (reUnicode.lastIndex = 0);
                while (reUnicode.test(string)) {
                  ++result;
                }
                return result;
              }

              /**
               * Converts a Unicode `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function unicodeToArray(string) {
                return string.match(reUnicode) || [];
              }

              /**
               * Splits a Unicode `string` into an array of its words.
               *
               * @private
               * @param {string} The string to inspect.
               * @returns {Array} Returns the words of `string`.
               */
              function unicodeWords(string) {
                return string.match(reUnicodeWord) || [];
              }

              /*--------------------------------------------------------------------------*/

              /**
               * Create a new pristine `lodash` function using the `context` object.
               *
               * @static
               * @memberOf _
               * @since 1.1.0
               * @category Util
               * @param {Object} [context=root] The context object.
               * @returns {Function} Returns a new `lodash` function.
               * @example
               *
               * _.mixin({ 'foo': _.constant('foo') });
               *
               * var lodash = _.runInContext();
               * lodash.mixin({ 'bar': lodash.constant('bar') });
               *
               * _.isFunction(_.foo);
               * // => true
               * _.isFunction(_.bar);
               * // => false
               *
               * lodash.isFunction(lodash.foo);
               * // => false
               * lodash.isFunction(lodash.bar);
               * // => true
               *
               * // Create a suped-up `defer` in Node.js.
               * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
               */
              var runInContext = function runInContext(context) {
                context =
                  context == null
                    ? root
                    : _.defaults(
                        root.Object(),
                        context,
                        _.pick(root, contextProps)
                      );

                /** Built-in constructor references. */
                var Array = context.Array,
                  Date = context.Date,
                  Error = context.Error,
                  Function = context.Function,
                  Math = context.Math,
                  Object = context.Object,
                  RegExp = context.RegExp,
                  String = context.String,
                  TypeError = context.TypeError;

                /** Used for built-in method references. */
                var arrayProto = Array.prototype,
                  funcProto = Function.prototype,
                  objectProto = Object.prototype;

                /** Used to detect overreaching core-js shims. */
                var coreJsData = context["__core-js_shared__"];

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to generate unique IDs. */
                var idCounter = 0;

                /** Used to detect methods masquerading as native. */
                var maskSrcKey = (function () {
                  var uid = /[^.]+$/.exec(
                    (coreJsData &&
                      coreJsData.keys &&
                      coreJsData.keys.IE_PROTO) ||
                      ""
                  );
                  return uid ? "Symbol(src)_1." + uid : "";
                })();

                /**
                 * Used to resolve the
                 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var nativeObjectToString = objectProto.toString;

                /** Used to infer the `Object` constructor. */
                var objectCtorString = funcToString.call(Object);

                /** Used to restore the original `_` reference in `_.noConflict`. */
                var oldDash = root._;

                /** Used to detect if a method is native. */
                var reIsNative = RegExp(
                  "^" +
                    funcToString
                      .call(hasOwnProperty)
                      .replace(reRegExpChar, "\\$&")
                      .replace(
                        /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                        "$1.*?"
                      ) +
                    "$"
                );

                /** Built-in value references. */
                var Buffer = moduleExports ? context.Buffer : undefined,
                  Symbol = context.Symbol,
                  Uint8Array = context.Uint8Array,
                  allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                  getPrototype = overArg(Object.getPrototypeOf, Object),
                  objectCreate = Object.create,
                  propertyIsEnumerable = objectProto.propertyIsEnumerable,
                  splice = arrayProto.splice,
                  spreadableSymbol = Symbol
                    ? Symbol.isConcatSpreadable
                    : undefined,
                  symIterator = Symbol ? Symbol.iterator : undefined,
                  symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                var defineProperty = (function () {
                  try {
                    var func = getNative(Object, "defineProperty");
                    func({}, "", {});
                    return func;
                  } catch (e) {}
                })();

                /** Mocked built-ins. */
                var ctxClearTimeout =
                    context.clearTimeout !== root.clearTimeout &&
                    context.clearTimeout,
                  ctxNow = Date && Date.now !== root.Date.now && Date.now,
                  ctxSetTimeout =
                    context.setTimeout !== root.setTimeout &&
                    context.setTimeout;

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeCeil = Math.ceil,
                  nativeFloor = Math.floor,
                  nativeGetSymbols = Object.getOwnPropertySymbols,
                  nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                  nativeIsFinite = context.isFinite,
                  nativeJoin = arrayProto.join,
                  nativeKeys = overArg(Object.keys, Object),
                  nativeMax = Math.max,
                  nativeMin = Math.min,
                  nativeNow = Date.now,
                  nativeParseInt = context.parseInt,
                  nativeRandom = Math.random,
                  nativeReverse = arrayProto.reverse;

                /* Built-in method references that are verified to be native. */
                var DataView = getNative(context, "DataView"),
                  Map = getNative(context, "Map"),
                  Promise = getNative(context, "Promise"),
                  Set = getNative(context, "Set"),
                  WeakMap = getNative(context, "WeakMap"),
                  nativeCreate = getNative(Object, "create");

                /** Used to store function metadata. */
                var metaMap = WeakMap && new WeakMap();

                /** Used to lookup unminified function names. */
                var realNames = {};

                /** Used to detect maps, sets, and weakmaps. */
                var dataViewCtorString = toSource(DataView),
                  mapCtorString = toSource(Map),
                  promiseCtorString = toSource(Promise),
                  setCtorString = toSource(Set),
                  weakMapCtorString = toSource(WeakMap);

                /** Used to convert symbols to primitives and strings. */
                var symbolProto = Symbol ? Symbol.prototype : undefined,
                  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                  symbolToString = symbolProto
                    ? symbolProto.toString
                    : undefined;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` object which wraps `value` to enable implicit method
                 * chain sequences. Methods that operate on and return arrays, collections,
                 * and functions can be chained together. Methods that retrieve a single value
                 * or may return a primitive value will automatically end the chain sequence
                 * and return the unwrapped value. Otherwise, the value must be unwrapped
                 * with `_#value`.
                 *
                 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                 * enabled using `_.chain`.
                 *
                 * The execution of chained methods is lazy, that is, it's deferred until
                 * `_#value` is implicitly or explicitly called.
                 *
                 * Lazy evaluation allows several methods to support shortcut fusion.
                 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                 * the creation of intermediate arrays and can greatly reduce the number of
                 * iteratee executions. Sections of a chain sequence qualify for shortcut
                 * fusion if the section is applied to an array and iteratees accept only
                 * one argument. The heuristic for whether a section qualifies for shortcut
                 * fusion is subject to change.
                 *
                 * Chaining is supported in custom builds as long as the `_#value` method is
                 * directly or indirectly included in the build.
                 *
                 * In addition to lodash methods, wrappers have `Array` and `String` methods.
                 *
                 * The wrapper `Array` methods are:
                 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                 *
                 * The wrapper `String` methods are:
                 * `replace` and `split`
                 *
                 * The wrapper methods that support shortcut fusion are:
                 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                 *
                 * The chainable wrapper methods are:
                 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                 * `zipObject`, `zipObjectDeep`, and `zipWith`
                 *
                 * The wrapper methods that are **not** chainable by default are:
                 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                 * `upperFirst`, `value`, and `words`
                 *
                 * @name _
                 * @constructor
                 * @category Seq
                 * @param {*} value The value to wrap in a `lodash` instance.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var wrapped = _([1, 2, 3]);
                 *
                 * // Returns an unwrapped value.
                 * wrapped.reduce(_.add);
                 * // => 6
                 *
                 * // Returns a wrapped value.
                 * var squares = wrapped.map(square);
                 *
                 * _.isArray(squares);
                 * // => false
                 *
                 * _.isArray(squares.value());
                 * // => true
                 */
                function lodash(value) {
                  if (
                    isObjectLike(value) &&
                    !isArray(value) &&
                    !(value instanceof LazyWrapper)
                  ) {
                    if (value instanceof LodashWrapper) {
                      return value;
                    }
                    if (hasOwnProperty.call(value, "__wrapped__")) {
                      return wrapperClone(value);
                    }
                  }
                  return new LodashWrapper(value);
                }

                /**
                 * The base implementation of `_.create` without support for assigning
                 * properties to the created object.
                 *
                 * @private
                 * @param {Object} proto The object to inherit from.
                 * @returns {Object} Returns the new object.
                 */
                var baseCreate = (function () {
                  function object() {}
                  return function (proto) {
                    if (!isObject(proto)) {
                      return {};
                    }
                    if (objectCreate) {
                      return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object();
                    object.prototype = undefined;
                    return result;
                  };
                })();

                /**
                 * The function whose prototype chain sequence wrappers inherit from.
                 *
                 * @private
                 */
                function baseLodash() {
                  // No operation performed.
                }

                /**
                 * The base constructor for creating `lodash` wrapper objects.
                 *
                 * @private
                 * @param {*} value The value to wrap.
                 * @param {boolean} [chainAll] Enable explicit method chain sequences.
                 */
                function LodashWrapper(value, chainAll) {
                  this.__wrapped__ = value;
                  this.__actions__ = [];
                  this.__chain__ = !!chainAll;
                  this.__index__ = 0;
                  this.__values__ = undefined;
                }

                /**
                 * By default, the template delimiters used by lodash are like those in
                 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                 * following template settings to use alternative delimiters.
                 *
                 * @static
                 * @memberOf _
                 * @type {Object}
                 */
                lodash.templateSettings = {
                  /**
                   * Used to detect `data` property values to be HTML-escaped.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  escape: reEscape,

                  /**
                   * Used to detect code to be evaluated.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  evaluate: reEvaluate,

                  /**
                   * Used to detect `data` property values to inject.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  interpolate: reInterpolate,

                  /**
                   * Used to reference the data object in the template text.
                   *
                   * @memberOf _.templateSettings
                   * @type {string}
                   */
                  variable: "",

                  /**
                   * Used to import variables into the compiled template.
                   *
                   * @memberOf _.templateSettings
                   * @type {Object}
                   */
                  imports: {
                    /**
                     * A reference to the `lodash` function.
                     *
                     * @memberOf _.templateSettings.imports
                     * @type {Function}
                     */
                    _: lodash,
                  },
                };

                // Ensure wrappers are instances of `baseLodash`.
                lodash.prototype = baseLodash.prototype;
                lodash.prototype.constructor = lodash;

                LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                LodashWrapper.prototype.constructor = LodashWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                 *
                 * @private
                 * @constructor
                 * @param {*} value The value to wrap.
                 */
                function LazyWrapper(value) {
                  this.__wrapped__ = value;
                  this.__actions__ = [];
                  this.__dir__ = 1;
                  this.__filtered__ = false;
                  this.__iteratees__ = [];
                  this.__takeCount__ = MAX_ARRAY_LENGTH;
                  this.__views__ = [];
                }

                /**
                 * Creates a clone of the lazy wrapper object.
                 *
                 * @private
                 * @name clone
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the cloned `LazyWrapper` object.
                 */
                function lazyClone() {
                  var result = new LazyWrapper(this.__wrapped__);
                  result.__actions__ = copyArray(this.__actions__);
                  result.__dir__ = this.__dir__;
                  result.__filtered__ = this.__filtered__;
                  result.__iteratees__ = copyArray(this.__iteratees__);
                  result.__takeCount__ = this.__takeCount__;
                  result.__views__ = copyArray(this.__views__);
                  return result;
                }

                /**
                 * Reverses the direction of lazy iteration.
                 *
                 * @private
                 * @name reverse
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the new reversed `LazyWrapper` object.
                 */
                function lazyReverse() {
                  if (this.__filtered__) {
                    var result = new LazyWrapper(this);
                    result.__dir__ = -1;
                    result.__filtered__ = true;
                  } else {
                    result = this.clone();
                    result.__dir__ *= -1;
                  }
                  return result;
                }

                /**
                 * Extracts the unwrapped value from its lazy wrapper.
                 *
                 * @private
                 * @name value
                 * @memberOf LazyWrapper
                 * @returns {*} Returns the unwrapped value.
                 */
                function lazyValue() {
                  var array = this.__wrapped__.value(),
                    dir = this.__dir__,
                    isArr = isArray(array),
                    isRight = dir < 0,
                    arrLength = isArr ? array.length : 0,
                    view = getView(0, arrLength, this.__views__),
                    start = view.start,
                    end = view.end,
                    length = end - start,
                    index = isRight ? end : start - 1,
                    iteratees = this.__iteratees__,
                    iterLength = iteratees.length,
                    resIndex = 0,
                    takeCount = nativeMin(length, this.__takeCount__);

                  if (
                    !isArr ||
                    (!isRight && arrLength == length && takeCount == length)
                  ) {
                    return baseWrapperValue(array, this.__actions__);
                  }
                  var result = [];

                  outer: while (length-- && resIndex < takeCount) {
                    index += dir;

                    var iterIndex = -1,
                      value = array[index];

                    while (++iterIndex < iterLength) {
                      var data = iteratees[iterIndex],
                        iteratee = data.iteratee,
                        type = data.type,
                        computed = iteratee(value);

                      if (type == LAZY_MAP_FLAG) {
                        value = computed;
                      } else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) {
                          continue outer;
                        } else {
                          break outer;
                        }
                      }
                    }
                    result[resIndex++] = value;
                  }
                  return result;
                }

                // Ensure `LazyWrapper` is an instance of `baseLodash`.
                LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                LazyWrapper.prototype.constructor = LazyWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a hash object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Hash(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the hash.
                 *
                 * @private
                 * @name clear
                 * @memberOf Hash
                 */
                function hashClear() {
                  this.__data__ = nativeCreate ? nativeCreate(null) : {};
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the hash.
                 *
                 * @private
                 * @name delete
                 * @memberOf Hash
                 * @param {Object} hash The hash to modify.
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function hashDelete(key) {
                  var result = this.has(key) && delete this.__data__[key];
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the hash value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Hash
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function hashGet(key) {
                  var data = this.__data__;
                  if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined : result;
                  }
                  return hasOwnProperty.call(data, key) ? data[key] : undefined;
                }

                /**
                 * Checks if a hash value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Hash
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function hashHas(key) {
                  var data = this.__data__;
                  return nativeCreate
                    ? data[key] !== undefined
                    : hasOwnProperty.call(data, key);
                }

                /**
                 * Sets the hash `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Hash
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the hash instance.
                 */
                function hashSet(key, value) {
                  var data = this.__data__;
                  this.size += this.has(key) ? 0 : 1;
                  data[key] =
                    nativeCreate && value === undefined
                      ? HASH_UNDEFINED
                      : value;
                  return this;
                }

                // Add methods to `Hash`.
                Hash.prototype.clear = hashClear;
                Hash.prototype["delete"] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an list cache object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function ListCache(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the list cache.
                 *
                 * @private
                 * @name clear
                 * @memberOf ListCache
                 */
                function listCacheClear() {
                  this.__data__ = [];
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the list cache.
                 *
                 * @private
                 * @name delete
                 * @memberOf ListCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function listCacheDelete(key) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  if (index < 0) {
                    return false;
                  }
                  var lastIndex = data.length - 1;
                  if (index == lastIndex) {
                    data.pop();
                  } else {
                    splice.call(data, index, 1);
                  }
                  --this.size;
                  return true;
                }

                /**
                 * Gets the list cache value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf ListCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function listCacheGet(key) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  return index < 0 ? undefined : data[index][1];
                }

                /**
                 * Checks if a list cache value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf ListCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function listCacheHas(key) {
                  return assocIndexOf(this.__data__, key) > -1;
                }

                /**
                 * Sets the list cache `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf ListCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the list cache instance.
                 */
                function listCacheSet(key, value) {
                  var data = this.__data__,
                    index = assocIndexOf(data, key);

                  if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                  } else {
                    data[index][1] = value;
                  }
                  return this;
                }

                // Add methods to `ListCache`.
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype["delete"] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a map cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function MapCache(entries) {
                  var index = -1,
                    length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the map.
                 *
                 * @private
                 * @name clear
                 * @memberOf MapCache
                 */
                function mapCacheClear() {
                  this.size = 0;
                  this.__data__ = {
                    hash: new Hash(),
                    map: new (Map || ListCache)(),
                    string: new Hash(),
                  };
                }

                /**
                 * Removes `key` and its value from the map.
                 *
                 * @private
                 * @name delete
                 * @memberOf MapCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function mapCacheDelete(key) {
                  var result = getMapData(this, key)["delete"](key);
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the map value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf MapCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function mapCacheGet(key) {
                  return getMapData(this, key).get(key);
                }

                /**
                 * Checks if a map value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf MapCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function mapCacheHas(key) {
                  return getMapData(this, key).has(key);
                }

                /**
                 * Sets the map `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf MapCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the map cache instance.
                 */
                function mapCacheSet(key, value) {
                  var data = getMapData(this, key),
                    size = data.size;

                  data.set(key, value);
                  this.size += data.size == size ? 0 : 1;
                  return this;
                }

                // Add methods to `MapCache`.
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype["delete"] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 *
                 * Creates an array cache object to store unique values.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [values] The values to cache.
                 */
                function SetCache(values) {
                  var index = -1,
                    length = values == null ? 0 : values.length;

                  this.__data__ = new MapCache();
                  while (++index < length) {
                    this.add(values[index]);
                  }
                }

                /**
                 * Adds `value` to the array cache.
                 *
                 * @private
                 * @name add
                 * @memberOf SetCache
                 * @alias push
                 * @param {*} value The value to cache.
                 * @returns {Object} Returns the cache instance.
                 */
                function setCacheAdd(value) {
                  this.__data__.set(value, HASH_UNDEFINED);
                  return this;
                }

                /**
                 * Checks if `value` is in the array cache.
                 *
                 * @private
                 * @name has
                 * @memberOf SetCache
                 * @param {*} value The value to search for.
                 * @returns {number} Returns `true` if `value` is found, else `false`.
                 */
                function setCacheHas(value) {
                  return this.__data__.has(value);
                }

                // Add methods to `SetCache`.
                SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                SetCache.prototype.has = setCacheHas;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a stack cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Stack(entries) {
                  var data = (this.__data__ = new ListCache(entries));
                  this.size = data.size;
                }

                /**
                 * Removes all key-value entries from the stack.
                 *
                 * @private
                 * @name clear
                 * @memberOf Stack
                 */
                function stackClear() {
                  this.__data__ = new ListCache();
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the stack.
                 *
                 * @private
                 * @name delete
                 * @memberOf Stack
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function stackDelete(key) {
                  var data = this.__data__,
                    result = data["delete"](key);

                  this.size = data.size;
                  return result;
                }

                /**
                 * Gets the stack value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Stack
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function stackGet(key) {
                  return this.__data__.get(key);
                }

                /**
                 * Checks if a stack value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Stack
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function stackHas(key) {
                  return this.__data__.has(key);
                }

                /**
                 * Sets the stack `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Stack
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the stack cache instance.
                 */
                function stackSet(key, value) {
                  var data = this.__data__;
                  if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                      pairs.push([key, value]);
                      this.size = ++data.size;
                      return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                  }
                  data.set(key, value);
                  this.size = data.size;
                  return this;
                }

                // Add methods to `Stack`.
                Stack.prototype.clear = stackClear;
                Stack.prototype["delete"] = stackDelete;
                Stack.prototype.get = stackGet;
                Stack.prototype.has = stackHas;
                Stack.prototype.set = stackSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of the enumerable property names of the array-like `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @param {boolean} inherited Specify returning inherited property names.
                 * @returns {Array} Returns the array of property names.
                 */
                function arrayLikeKeys(value, inherited) {
                  var isArr = isArray(value),
                    isArg = !isArr && isArguments(value),
                    isBuff = !isArr && !isArg && isBuffer(value),
                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                    skipIndexes = isArr || isArg || isBuff || isType,
                    result = skipIndexes ? baseTimes(value.length, String) : [],
                    length = result.length;

                  for (var key in value) {
                    if (
                      (inherited || hasOwnProperty.call(value, key)) &&
                      !(
                        skipIndexes &&
                        // Safari 9 has enumerable `arguments.length` in strict mode.
                        (key == "length" ||
                          // Node.js 0.10 has enumerable non-index properties on buffers.
                          (isBuff && (key == "offset" || key == "parent")) ||
                          // PhantomJS 2 has enumerable non-index properties on typed arrays.
                          (isType &&
                            (key == "buffer" ||
                              key == "byteLength" ||
                              key == "byteOffset")) ||
                          // Skip index properties.
                          isIndex(key, length))
                      )
                    ) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * A specialized version of `_.sample` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @returns {*} Returns the random element.
                 */
                function arraySample(array) {
                  var length = array.length;
                  return length ? array[baseRandom(0, length - 1)] : undefined;
                }

                /**
                 * A specialized version of `_.sampleSize` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function arraySampleSize(array, n) {
                  return shuffleSelf(
                    copyArray(array),
                    baseClamp(n, 0, array.length)
                  );
                }

                /**
                 * A specialized version of `_.shuffle` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function arrayShuffle(array) {
                  return shuffleSelf(copyArray(array));
                }

                /**
                 * This function is like `assignValue` except that it doesn't assign
                 * `undefined` values.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignMergeValue(object, key, value) {
                  if (
                    (value !== undefined && !eq(object[key], value)) ||
                    (value === undefined && !(key in object))
                  ) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Assigns `value` to `key` of `object` if the existing value is not equivalent
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignValue(object, key, value) {
                  var objValue = object[key];
                  if (
                    !(
                      hasOwnProperty.call(object, key) && eq(objValue, value)
                    ) ||
                    (value === undefined && !(key in object))
                  ) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Gets the index at which the `key` is found in `array` of key-value pairs.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} key The key to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function assocIndexOf(array, key) {
                  var length = array.length;
                  while (length--) {
                    if (eq(array[length][0], key)) {
                      return length;
                    }
                  }
                  return -1;
                }

                /**
                 * Aggregates elements of `collection` on `accumulator` with keys transformed
                 * by `iteratee` and values set by `setter`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform keys.
                 * @param {Object} accumulator The initial aggregated object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseAggregator(
                  collection,
                  setter,
                  iteratee,
                  accumulator
                ) {
                  baseEach(collection, function (value, key, collection) {
                    setter(accumulator, value, iteratee(value), collection);
                  });
                  return accumulator;
                }

                /**
                 * The base implementation of `_.assign` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssign(object, source) {
                  return object && copyObject(source, keys(source), object);
                }

                /**
                 * The base implementation of `_.assignIn` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssignIn(object, source) {
                  return object && copyObject(source, keysIn(source), object);
                }

                /**
                 * The base implementation of `assignValue` and `assignMergeValue` without
                 * value checks.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function baseAssignValue(object, key, value) {
                  if (key == "__proto__" && defineProperty) {
                    defineProperty(object, key, {
                      configurable: true,
                      enumerable: true,
                      value: value,
                      writable: true,
                    });
                  } else {
                    object[key] = value;
                  }
                }

                /**
                 * The base implementation of `_.at` without support for individual paths.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Array} Returns the picked elements.
                 */
                function baseAt(object, paths) {
                  var index = -1,
                    length = paths.length,
                    result = Array(length),
                    skip = object == null;

                  while (++index < length) {
                    result[index] = skip
                      ? undefined
                      : get(object, paths[index]);
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.clamp` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 */
                function baseClamp(number, lower, upper) {
                  if (number === number) {
                    if (upper !== undefined) {
                      number = number <= upper ? number : upper;
                    }
                    if (lower !== undefined) {
                      number = number >= lower ? number : lower;
                    }
                  }
                  return number;
                }

                /**
                 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                 * traversed objects.
                 *
                 * @private
                 * @param {*} value The value to clone.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Deep clone
                 *  2 - Flatten inherited properties
                 *  4 - Clone symbols
                 * @param {Function} [customizer] The function to customize cloning.
                 * @param {string} [key] The key of `value`.
                 * @param {Object} [object] The parent object of `value`.
                 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                 * @returns {*} Returns the cloned value.
                 */
                function baseClone(
                  value,
                  bitmask,
                  customizer,
                  key,
                  object,
                  stack
                ) {
                  var result,
                    isDeep = bitmask & CLONE_DEEP_FLAG,
                    isFlat = bitmask & CLONE_FLAT_FLAG,
                    isFull = bitmask & CLONE_SYMBOLS_FLAG;

                  if (customizer) {
                    result = object
                      ? customizer(value, key, object, stack)
                      : customizer(value);
                  }
                  if (result !== undefined) {
                    return result;
                  }
                  if (!isObject(value)) {
                    return value;
                  }
                  var isArr = isArray(value);
                  if (isArr) {
                    result = initCloneArray(value);
                    if (!isDeep) {
                      return copyArray(value, result);
                    }
                  } else {
                    var tag = getTag(value),
                      isFunc = tag == funcTag || tag == genTag;

                    if (isBuffer(value)) {
                      return cloneBuffer(value, isDeep);
                    }
                    if (
                      tag == objectTag ||
                      tag == argsTag ||
                      (isFunc && !object)
                    ) {
                      result = isFlat || isFunc ? {} : initCloneObject(value);
                      if (!isDeep) {
                        return isFlat
                          ? copySymbolsIn(value, baseAssignIn(result, value))
                          : copySymbols(value, baseAssign(result, value));
                      }
                    } else {
                      if (!cloneableTags[tag]) {
                        return object ? value : {};
                      }
                      result = initCloneByTag(value, tag, isDeep);
                    }
                  }
                  // Check for circular references and return its corresponding clone.
                  stack || (stack = new Stack());
                  var stacked = stack.get(value);
                  if (stacked) {
                    return stacked;
                  }
                  stack.set(value, result);

                  if (isSet(value)) {
                    value.forEach(function (subValue) {
                      result.add(
                        baseClone(
                          subValue,
                          bitmask,
                          customizer,
                          subValue,
                          value,
                          stack
                        )
                      );
                    });
                  } else if (isMap(value)) {
                    value.forEach(function (subValue, key) {
                      result.set(
                        key,
                        baseClone(
                          subValue,
                          bitmask,
                          customizer,
                          key,
                          value,
                          stack
                        )
                      );
                    });
                  }

                  var keysFunc = isFull
                    ? isFlat
                      ? getAllKeysIn
                      : getAllKeys
                    : isFlat
                    ? keysIn
                    : keys;

                  var props = isArr ? undefined : keysFunc(value);
                  arrayEach(props || value, function (subValue, key) {
                    if (props) {
                      key = subValue;
                      subValue = value[key];
                    }
                    // Recursively populate clone (susceptible to call stack limits).
                    assignValue(
                      result,
                      key,
                      baseClone(
                        subValue,
                        bitmask,
                        customizer,
                        key,
                        value,
                        stack
                      )
                    );
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.conforms` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseConforms(source) {
                  var props = keys(source);
                  return function (object) {
                    return baseConformsTo(object, source, props);
                  };
                }

                /**
                 * The base implementation of `_.conformsTo` which accepts `props` to check.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 */
                function baseConformsTo(object, source, props) {
                  var length = props.length;
                  if (object == null) {
                    return !length;
                  }
                  object = Object(object);
                  while (length--) {
                    var key = props[length],
                      predicate = source[key],
                      value = object[key];

                    if (
                      (value === undefined && !(key in object)) ||
                      !predicate(value)
                    ) {
                      return false;
                    }
                  }
                  return true;
                }

                /**
                 * The base implementation of `_.delay` and `_.defer` which accepts `args`
                 * to provide to `func`.
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {Array} args The arguments to provide to `func`.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                function baseDelay(func, wait, args) {
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return setTimeout(function () {
                    func.apply(undefined, args);
                  }, wait);
                }

                /**
                 * The base implementation of methods like `_.difference` without support
                 * for excluding multiple arrays or iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Array} values The values to exclude.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 */
                function baseDifference(array, values, iteratee, comparator) {
                  var index = -1,
                    includes = arrayIncludes,
                    isCommon = true,
                    length = array.length,
                    result = [],
                    valuesLength = values.length;

                  if (!length) {
                    return result;
                  }
                  if (iteratee) {
                    values = arrayMap(values, baseUnary(iteratee));
                  }
                  if (comparator) {
                    includes = arrayIncludesWith;
                    isCommon = false;
                  } else if (values.length >= LARGE_ARRAY_SIZE) {
                    includes = cacheHas;
                    isCommon = false;
                    values = new SetCache(values);
                  }
                  outer: while (++index < length) {
                    var value = array[index],
                      computed = iteratee == null ? value : iteratee(value);

                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                      var valuesIndex = valuesLength;
                      while (valuesIndex--) {
                        if (values[valuesIndex] === computed) {
                          continue outer;
                        }
                      }
                      result.push(value);
                    } else if (!includes(values, computed, comparator)) {
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.forEach` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEach = createBaseEach(baseForOwn);

                /**
                 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEachRight = createBaseEach(baseForOwnRight, true);

                /**
                 * The base implementation of `_.every` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`
                 */
                function baseEvery(collection, predicate) {
                  var result = true;
                  baseEach(collection, function (value, index, collection) {
                    result = !!predicate(value, index, collection);
                    return result;
                  });
                  return result;
                }

                /**
                 * The base implementation of methods like `_.max` and `_.min` which accepts a
                 * `comparator` to determine the extremum value.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The iteratee invoked per iteration.
                 * @param {Function} comparator The comparator used to compare values.
                 * @returns {*} Returns the extremum value.
                 */
                function baseExtremum(array, iteratee, comparator) {
                  var index = -1,
                    length = array.length;

                  while (++index < length) {
                    var value = array[index],
                      current = iteratee(value);

                    if (
                      current != null &&
                      (computed === undefined
                        ? current === current && !isSymbol(current)
                        : comparator(current, computed))
                    ) {
                      var computed = current,
                        result = value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.fill` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 */
                function baseFill(array, value, start, end) {
                  var length = array.length;

                  start = toInteger(start);
                  if (start < 0) {
                    start = -start > length ? 0 : length + start;
                  }
                  end =
                    end === undefined || end > length ? length : toInteger(end);
                  if (end < 0) {
                    end += length;
                  }
                  end = start > end ? 0 : toLength(end);
                  while (start < end) {
                    array[start++] = value;
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.filter` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 */
                function baseFilter(collection, predicate) {
                  var result = [];
                  baseEach(collection, function (value, index, collection) {
                    if (predicate(value, index, collection)) {
                      result.push(value);
                    }
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.flatten` with support for restricting flattening.
                 *
                 * @private
                 * @param {Array} array The array to flatten.
                 * @param {number} depth The maximum recursion depth.
                 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                 * @param {Array} [result=[]] The initial result value.
                 * @returns {Array} Returns the new flattened array.
                 */
                function baseFlatten(
                  array,
                  depth,
                  predicate,
                  isStrict,
                  result
                ) {
                  var index = -1,
                    length = array.length;

                  predicate || (predicate = isFlattenable);
                  result || (result = []);

                  while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                      if (depth > 1) {
                        // Recursively flatten arrays (susceptible to call stack limits).
                        baseFlatten(
                          value,
                          depth - 1,
                          predicate,
                          isStrict,
                          result
                        );
                      } else {
                        arrayPush(result, value);
                      }
                    } else if (!isStrict) {
                      result[result.length] = value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `baseForOwn` which iterates over `object`
                 * properties returned by `keysFunc` and invokes `iteratee` for each property.
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseFor = createBaseFor();

                /**
                 * This function is like `baseFor` except that it iterates over properties
                 * in the opposite order.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseForRight = createBaseFor(true);

                /**
                 * The base implementation of `_.forOwn` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwn(object, iteratee) {
                  return object && baseFor(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwnRight(object, iteratee) {
                  return object && baseForRight(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.functions` which creates an array of
                 * `object` function property names filtered from `props`.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Array} props The property names to filter.
                 * @returns {Array} Returns the function names.
                 */
                function baseFunctions(object, props) {
                  return arrayFilter(props, function (key) {
                    return isFunction(object[key]);
                  });
                }

                /**
                 * The base implementation of `_.get` without support for default values.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @returns {*} Returns the resolved value.
                 */
                function baseGet(object, path) {
                  path = castPath(path, object);

                  var index = 0,
                    length = path.length;

                  while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                  }
                  return index && index == length ? object : undefined;
                }

                /**
                 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @param {Function} symbolsFunc The function to get the symbols of `object`.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                  var result = keysFunc(object);
                  return isArray(object)
                    ? result
                    : arrayPush(result, symbolsFunc(object));
                }

                /**
                 * The base implementation of `getTag` without fallbacks for buggy environments.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                function baseGetTag(value) {
                  if (value == null) {
                    return value === undefined ? undefinedTag : nullTag;
                  }
                  return symToStringTag && symToStringTag in Object(value)
                    ? getRawTag(value)
                    : objectToString(value);
                }

                /**
                 * The base implementation of `_.gt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 */
                function baseGt(value, other) {
                  return value > other;
                }

                /**
                 * The base implementation of `_.has` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHas(object, key) {
                  return object != null && hasOwnProperty.call(object, key);
                }

                /**
                 * The base implementation of `_.hasIn` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHasIn(object, key) {
                  return object != null && key in Object(object);
                }

                /**
                 * The base implementation of `_.inRange` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to check.
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 */
                function baseInRange(number, start, end) {
                  return (
                    number >= nativeMin(start, end) &&
                    number < nativeMax(start, end)
                  );
                }

                /**
                 * The base implementation of methods like `_.intersection`, without support
                 * for iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of shared values.
                 */
                function baseIntersection(arrays, iteratee, comparator) {
                  var includes = comparator ? arrayIncludesWith : arrayIncludes,
                    length = arrays[0].length,
                    othLength = arrays.length,
                    othIndex = othLength,
                    caches = Array(othLength),
                    maxLength = Infinity,
                    result = [];

                  while (othIndex--) {
                    var array = arrays[othIndex];
                    if (othIndex && iteratee) {
                      array = arrayMap(array, baseUnary(iteratee));
                    }
                    maxLength = nativeMin(array.length, maxLength);
                    caches[othIndex] =
                      !comparator &&
                      (iteratee || (length >= 120 && array.length >= 120))
                        ? new SetCache(othIndex && array)
                        : undefined;
                  }
                  array = arrays[0];

                  var index = -1,
                    seen = caches[0];

                  outer: while (++index < length && result.length < maxLength) {
                    var value = array[index],
                      computed = iteratee ? iteratee(value) : value;

                    value = comparator || value !== 0 ? value : 0;
                    if (
                      !(seen
                        ? cacheHas(seen, computed)
                        : includes(result, computed, comparator))
                    ) {
                      othIndex = othLength;
                      while (--othIndex) {
                        var cache = caches[othIndex];
                        if (
                          !(cache
                            ? cacheHas(cache, computed)
                            : includes(arrays[othIndex], computed, comparator))
                        ) {
                          continue outer;
                        }
                      }
                      if (seen) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.invert` and `_.invertBy` which inverts
                 * `object` with values transformed by `iteratee` and set by `setter`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform values.
                 * @param {Object} accumulator The initial inverted object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseInverter(object, setter, iteratee, accumulator) {
                  baseForOwn(object, function (value, key, object) {
                    setter(accumulator, iteratee(value), key, object);
                  });
                  return accumulator;
                }

                /**
                 * The base implementation of `_.invoke` without support for individual
                 * method arguments.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {Array} args The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 */
                function baseInvoke(object, path, args) {
                  path = castPath(path, object);
                  object = parent(object, path);
                  var func =
                    object == null ? object : object[toKey(last(path))];
                  return func == null ? undefined : apply(func, object, args);
                }

                /**
                 * The base implementation of `_.isArguments`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 */
                function baseIsArguments(value) {
                  return isObjectLike(value) && baseGetTag(value) == argsTag;
                }

                /**
                 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 */
                function baseIsArrayBuffer(value) {
                  return (
                    isObjectLike(value) && baseGetTag(value) == arrayBufferTag
                  );
                }

                /**
                 * The base implementation of `_.isDate` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 */
                function baseIsDate(value) {
                  return isObjectLike(value) && baseGetTag(value) == dateTag;
                }

                /**
                 * The base implementation of `_.isEqual` which supports partial comparisons
                 * and tracks traversed objects.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Unordered comparison
                 *  2 - Partial comparison
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 */
                function baseIsEqual(value, other, bitmask, customizer, stack) {
                  if (value === other) {
                    return true;
                  }
                  if (
                    value == null ||
                    other == null ||
                    (!isObjectLike(value) && !isObjectLike(other))
                  ) {
                    return value !== value && other !== other;
                  }
                  return baseIsEqualDeep(
                    value,
                    other,
                    bitmask,
                    customizer,
                    baseIsEqual,
                    stack
                  );
                }

                /**
                 * A specialized version of `baseIsEqual` for arrays and objects which performs
                 * deep comparisons and tracks traversed objects enabling objects with circular
                 * references to be compared.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function baseIsEqualDeep(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                ) {
                  var objIsArr = isArray(object),
                    othIsArr = isArray(other),
                    objTag = objIsArr ? arrayTag : getTag(object),
                    othTag = othIsArr ? arrayTag : getTag(other);

                  objTag = objTag == argsTag ? objectTag : objTag;
                  othTag = othTag == argsTag ? objectTag : othTag;

                  var objIsObj = objTag == objectTag,
                    othIsObj = othTag == objectTag,
                    isSameTag = objTag == othTag;

                  if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                      return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                  }
                  if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack());
                    return objIsArr || isTypedArray(object)
                      ? equalArrays(
                          object,
                          other,
                          bitmask,
                          customizer,
                          equalFunc,
                          stack
                        )
                      : equalByTag(
                          object,
                          other,
                          objTag,
                          bitmask,
                          customizer,
                          equalFunc,
                          stack
                        );
                  }
                  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped =
                        objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                      othIsWrapped =
                        othIsObj && hasOwnProperty.call(other, "__wrapped__");

                    if (objIsWrapped || othIsWrapped) {
                      var objUnwrapped = objIsWrapped ? object.value() : object,
                        othUnwrapped = othIsWrapped ? other.value() : other;

                      stack || (stack = new Stack());
                      return equalFunc(
                        objUnwrapped,
                        othUnwrapped,
                        bitmask,
                        customizer,
                        stack
                      );
                    }
                  }
                  if (!isSameTag) {
                    return false;
                  }
                  stack || (stack = new Stack());
                  return equalObjects(
                    object,
                    other,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
                }

                /**
                 * The base implementation of `_.isMap` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 */
                function baseIsMap(value) {
                  return isObjectLike(value) && getTag(value) == mapTag;
                }

                /**
                 * The base implementation of `_.isMatch` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Array} matchData The property names, values, and compare flags to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 */
                function baseIsMatch(object, source, matchData, customizer) {
                  var index = matchData.length,
                    length = index,
                    noCustomizer = !customizer;

                  if (object == null) {
                    return !length;
                  }
                  object = Object(object);
                  while (index--) {
                    var data = matchData[index];
                    if (
                      noCustomizer && data[2]
                        ? data[1] !== object[data[0]]
                        : !(data[0] in object)
                    ) {
                      return false;
                    }
                  }
                  while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                      objValue = object[key],
                      srcValue = data[1];

                    if (noCustomizer && data[2]) {
                      if (objValue === undefined && !(key in object)) {
                        return false;
                      }
                    } else {
                      var stack = new Stack();
                      if (customizer) {
                        var result = customizer(
                          objValue,
                          srcValue,
                          key,
                          object,
                          source,
                          stack
                        );
                      }
                      if (
                        !(result === undefined
                          ? baseIsEqual(
                              srcValue,
                              objValue,
                              COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                              customizer,
                              stack
                            )
                          : result)
                      ) {
                        return false;
                      }
                    }
                  }
                  return true;
                }

                /**
                 * The base implementation of `_.isNative` without bad shim checks.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 */
                function baseIsNative(value) {
                  if (!isObject(value) || isMasked(value)) {
                    return false;
                  }
                  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                  return pattern.test(toSource(value));
                }

                /**
                 * The base implementation of `_.isRegExp` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 */
                function baseIsRegExp(value) {
                  return isObjectLike(value) && baseGetTag(value) == regexpTag;
                }

                /**
                 * The base implementation of `_.isSet` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 */
                function baseIsSet(value) {
                  return isObjectLike(value) && getTag(value) == setTag;
                }

                /**
                 * The base implementation of `_.isTypedArray` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 */
                function baseIsTypedArray(value) {
                  return (
                    isObjectLike(value) &&
                    isLength(value.length) &&
                    !!typedArrayTags[baseGetTag(value)]
                  );
                }

                /**
                 * The base implementation of `_.iteratee`.
                 *
                 * @private
                 * @param {*} [value=_.identity] The value to convert to an iteratee.
                 * @returns {Function} Returns the iteratee.
                 */
                function baseIteratee(value) {
                  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                  if (typeof value == "function") {
                    return value;
                  }
                  if (value == null) {
                    return identity;
                  }
                  if (typeof value == "object") {
                    return isArray(value)
                      ? baseMatchesProperty(value[0], value[1])
                      : baseMatches(value);
                  }
                  return property(value);
                }

                /**
                 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeys(object) {
                  if (!isPrototype(object)) {
                    return nativeKeys(object);
                  }
                  var result = [];
                  for (var key in Object(object)) {
                    if (
                      hasOwnProperty.call(object, key) &&
                      key != "constructor"
                    ) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeysIn(object) {
                  if (!isObject(object)) {
                    return nativeKeysIn(object);
                  }
                  var isProto = isPrototype(object),
                    result = [];

                  for (var key in object) {
                    if (
                      !(
                        key == "constructor" &&
                        (isProto || !hasOwnProperty.call(object, key))
                      )
                    ) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.lt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 */
                function baseLt(value, other) {
                  return value < other;
                }

                /**
                 * The base implementation of `_.map` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 */
                function baseMap(collection, iteratee) {
                  var index = -1,
                    result = isArrayLike(collection)
                      ? Array(collection.length)
                      : [];

                  baseEach(collection, function (value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.matches` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatches(source) {
                  var matchData = getMatchData(source);
                  if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(
                      matchData[0][0],
                      matchData[0][1]
                    );
                  }
                  return function (object) {
                    return (
                      object === source ||
                      baseIsMatch(object, source, matchData)
                    );
                  };
                }

                /**
                 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                 *
                 * @private
                 * @param {string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatchesProperty(path, srcValue) {
                  if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                  }
                  return function (object) {
                    var objValue = get(object, path);
                    return objValue === undefined && objValue === srcValue
                      ? hasIn(object, path)
                      : baseIsEqual(
                          srcValue,
                          objValue,
                          COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                        );
                  };
                }

                /**
                 * The base implementation of `_.merge` without support for multiple sources.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMerge(
                  object,
                  source,
                  srcIndex,
                  customizer,
                  stack
                ) {
                  if (object === source) {
                    return;
                  }
                  baseFor(
                    source,
                    function (srcValue, key) {
                      stack || (stack = new Stack());
                      if (isObject(srcValue)) {
                        baseMergeDeep(
                          object,
                          source,
                          key,
                          srcIndex,
                          baseMerge,
                          customizer,
                          stack
                        );
                      } else {
                        var newValue = customizer
                          ? customizer(
                              safeGet(object, key),
                              srcValue,
                              key + "",
                              object,
                              source,
                              stack
                            )
                          : undefined;

                        if (newValue === undefined) {
                          newValue = srcValue;
                        }
                        assignMergeValue(object, key, newValue);
                      }
                    },
                    keysIn
                  );
                }

                /**
                 * A specialized version of `baseMerge` for arrays and objects which performs
                 * deep merges and tracks traversed objects enabling objects with circular
                 * references to be merged.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {string} key The key of the value to merge.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} mergeFunc The function to merge values.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMergeDeep(
                  object,
                  source,
                  key,
                  srcIndex,
                  mergeFunc,
                  customizer,
                  stack
                ) {
                  var objValue = safeGet(object, key),
                    srcValue = safeGet(source, key),
                    stacked = stack.get(srcValue);

                  if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                  }
                  var newValue = customizer
                    ? customizer(
                        objValue,
                        srcValue,
                        key + "",
                        object,
                        source,
                        stack
                      )
                    : undefined;

                  var isCommon = newValue === undefined;

                  if (isCommon) {
                    var isArr = isArray(srcValue),
                      isBuff = !isArr && isBuffer(srcValue),
                      isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                      if (isArray(objValue)) {
                        newValue = objValue;
                      } else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                      } else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                      } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                      } else {
                        newValue = [];
                      }
                    } else if (
                      isPlainObject(srcValue) ||
                      isArguments(srcValue)
                    ) {
                      newValue = objValue;
                      if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                      } else if (!isObject(objValue) || isFunction(objValue)) {
                        newValue = initCloneObject(srcValue);
                      }
                    } else {
                      isCommon = false;
                    }
                  }
                  if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack["delete"](srcValue);
                  }
                  assignMergeValue(object, key, newValue);
                }

                /**
                 * The base implementation of `_.nth` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {number} n The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 */
                function baseNth(array, n) {
                  var length = array.length;
                  if (!length) {
                    return;
                  }
                  n += n < 0 ? length : 0;
                  return isIndex(n, length) ? array[n] : undefined;
                }

                /**
                 * The base implementation of `_.orderBy` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                 * @param {string[]} orders The sort orders of `iteratees`.
                 * @returns {Array} Returns the new sorted array.
                 */
                function baseOrderBy(collection, iteratees, orders) {
                  if (iteratees.length) {
                    iteratees = arrayMap(iteratees, function (iteratee) {
                      if (isArray(iteratee)) {
                        return function (value) {
                          return baseGet(
                            value,
                            iteratee.length === 1 ? iteratee[0] : iteratee
                          );
                        };
                      }
                      return iteratee;
                    });
                  } else {
                    iteratees = [identity];
                  }

                  var index = -1;
                  iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

                  var result = baseMap(
                    collection,
                    function (value, key, collection) {
                      var criteria = arrayMap(iteratees, function (iteratee) {
                        return iteratee(value);
                      });
                      return {
                        criteria: criteria,
                        index: ++index,
                        value: value,
                      };
                    }
                  );

                  return baseSortBy(result, function (object, other) {
                    return compareMultiple(object, other, orders);
                  });
                }

                /**
                 * The base implementation of `_.pick` without support for individual
                 * property identifiers.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Object} Returns the new object.
                 */
                function basePick(object, paths) {
                  return basePickBy(object, paths, function (value, path) {
                    return hasIn(object, path);
                  });
                }

                /**
                 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @param {Function} predicate The function invoked per property.
                 * @returns {Object} Returns the new object.
                 */
                function basePickBy(object, paths, predicate) {
                  var index = -1,
                    length = paths.length,
                    result = {};

                  while (++index < length) {
                    var path = paths[index],
                      value = baseGet(object, path);

                    if (predicate(value, path)) {
                      baseSet(result, castPath(path, object), value);
                    }
                  }
                  return result;
                }

                /**
                 * A specialized version of `baseProperty` which supports deep paths.
                 *
                 * @private
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 */
                function basePropertyDeep(path) {
                  return function (object) {
                    return baseGet(object, path);
                  };
                }

                /**
                 * The base implementation of `_.pullAllBy` without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAll(array, values, iteratee, comparator) {
                  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                    index = -1,
                    length = values.length,
                    seen = array;

                  if (array === values) {
                    values = copyArray(values);
                  }
                  if (iteratee) {
                    seen = arrayMap(array, baseUnary(iteratee));
                  }
                  while (++index < length) {
                    var fromIndex = 0,
                      value = values[index],
                      computed = iteratee ? iteratee(value) : value;

                    while (
                      (fromIndex = indexOf(
                        seen,
                        computed,
                        fromIndex,
                        comparator
                      )) > -1
                    ) {
                      if (seen !== array) {
                        splice.call(seen, fromIndex, 1);
                      }
                      splice.call(array, fromIndex, 1);
                    }
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.pullAt` without support for individual
                 * indexes or capturing the removed elements.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {number[]} indexes The indexes of elements to remove.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAt(array, indexes) {
                  var length = array ? indexes.length : 0,
                    lastIndex = length - 1;

                  while (length--) {
                    var index = indexes[length];
                    if (length == lastIndex || index !== previous) {
                      var previous = index;
                      if (isIndex(index)) {
                        splice.call(array, index, 1);
                      } else {
                        baseUnset(array, index);
                      }
                    }
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.random` without support for returning
                 * floating-point numbers.
                 *
                 * @private
                 * @param {number} lower The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the random number.
                 */
                function baseRandom(lower, upper) {
                  return (
                    lower + nativeFloor(nativeRandom() * (upper - lower + 1))
                  );
                }

                /**
                 * The base implementation of `_.range` and `_.rangeRight` which doesn't
                 * coerce arguments.
                 *
                 * @private
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} step The value to increment or decrement by.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the range of numbers.
                 */
                function baseRange(start, end, step, fromRight) {
                  var index = -1,
                    length = nativeMax(
                      nativeCeil((end - start) / (step || 1)),
                      0
                    ),
                    result = Array(length);

                  while (length--) {
                    result[fromRight ? length : ++index] = start;
                    start += step;
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.repeat` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {string} string The string to repeat.
                 * @param {number} n The number of times to repeat the string.
                 * @returns {string} Returns the repeated string.
                 */
                function baseRepeat(string, n) {
                  var result = "";
                  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                    return result;
                  }
                  // Leverage the exponentiation by squaring algorithm for a faster repeat.
                  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                  do {
                    if (n % 2) {
                      result += string;
                    }
                    n = nativeFloor(n / 2);
                    if (n) {
                      string += string;
                    }
                  } while (n);

                  return result;
                }

                /**
                 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 */
                function baseRest(func, start) {
                  return setToString(
                    overRest(func, start, identity),
                    func + ""
                  );
                }

                /**
                 * The base implementation of `_.sample`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 */
                function baseSample(collection) {
                  return arraySample(values(collection));
                }

                /**
                 * The base implementation of `_.sampleSize` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function baseSampleSize(collection, n) {
                  var array = values(collection);
                  return shuffleSelf(array, baseClamp(n, 0, array.length));
                }

                /**
                 * The base implementation of `_.set`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseSet(object, path, value, customizer) {
                  if (!isObject(object)) {
                    return object;
                  }
                  path = castPath(path, object);

                  var index = -1,
                    length = path.length,
                    lastIndex = length - 1,
                    nested = object;

                  while (nested != null && ++index < length) {
                    var key = toKey(path[index]),
                      newValue = value;

                    if (
                      key === "__proto__" ||
                      key === "constructor" ||
                      key === "prototype"
                    ) {
                      return object;
                    }

                    if (index != lastIndex) {
                      var objValue = nested[key];
                      newValue = customizer
                        ? customizer(objValue, key, nested)
                        : undefined;
                      if (newValue === undefined) {
                        newValue = isObject(objValue)
                          ? objValue
                          : isIndex(path[index + 1])
                          ? []
                          : {};
                      }
                    }
                    assignValue(nested, key, newValue);
                    nested = nested[key];
                  }
                  return object;
                }

                /**
                 * The base implementation of `setData` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetData = !metaMap
                  ? identity
                  : function (func, data) {
                      metaMap.set(func, data);
                      return func;
                    };

                /**
                 * The base implementation of `setToString` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetToString = !defineProperty
                  ? identity
                  : function (func, string) {
                      return defineProperty(func, "toString", {
                        configurable: true,
                        enumerable: false,
                        value: constant(string),
                        writable: true,
                      });
                    };

                /**
                 * The base implementation of `_.shuffle`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function baseShuffle(collection) {
                  return shuffleSelf(values(collection));
                }

                /**
                 * The base implementation of `_.slice` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseSlice(array, start, end) {
                  var index = -1,
                    length = array.length;

                  if (start < 0) {
                    start = -start > length ? 0 : length + start;
                  }
                  end = end > length ? length : end;
                  if (end < 0) {
                    end += length;
                  }
                  length = start > end ? 0 : (end - start) >>> 0;
                  start >>>= 0;

                  var result = Array(length);
                  while (++index < length) {
                    result[index] = array[index + start];
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.some` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 */
                function baseSome(collection, predicate) {
                  var result;

                  baseEach(collection, function (value, index, collection) {
                    result = predicate(value, index, collection);
                    return !result;
                  });
                  return !!result;
                }

                /**
                 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                 * performs a binary search of `array` to determine the index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndex(array, value, retHighest) {
                  var low = 0,
                    high = array == null ? low : array.length;

                  if (
                    typeof value == "number" &&
                    value === value &&
                    high <= HALF_MAX_ARRAY_LENGTH
                  ) {
                    while (low < high) {
                      var mid = (low + high) >>> 1,
                        computed = array[mid];

                      if (
                        computed !== null &&
                        !isSymbol(computed) &&
                        (retHighest ? computed <= value : computed < value)
                      ) {
                        low = mid + 1;
                      } else {
                        high = mid;
                      }
                    }
                    return high;
                  }
                  return baseSortedIndexBy(array, value, identity, retHighest);
                }

                /**
                 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                 * which invokes `iteratee` for `value` and each element of `array` to compute
                 * their sort ranking. The iteratee is invoked with one argument; (value).
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} iteratee The iteratee invoked per element.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndexBy(array, value, iteratee, retHighest) {
                  var low = 0,
                    high = array == null ? 0 : array.length;
                  if (high === 0) {
                    return 0;
                  }

                  value = iteratee(value);
                  var valIsNaN = value !== value,
                    valIsNull = value === null,
                    valIsSymbol = isSymbol(value),
                    valIsUndefined = value === undefined;

                  while (low < high) {
                    var mid = nativeFloor((low + high) / 2),
                      computed = iteratee(array[mid]),
                      othIsDefined = computed !== undefined,
                      othIsNull = computed === null,
                      othIsReflexive = computed === computed,
                      othIsSymbol = isSymbol(computed);

                    if (valIsNaN) {
                      var setLow = retHighest || othIsReflexive;
                    } else if (valIsUndefined) {
                      setLow = othIsReflexive && (retHighest || othIsDefined);
                    } else if (valIsNull) {
                      setLow =
                        othIsReflexive &&
                        othIsDefined &&
                        (retHighest || !othIsNull);
                    } else if (valIsSymbol) {
                      setLow =
                        othIsReflexive &&
                        othIsDefined &&
                        !othIsNull &&
                        (retHighest || !othIsSymbol);
                    } else if (othIsNull || othIsSymbol) {
                      setLow = false;
                    } else {
                      setLow = retHighest
                        ? computed <= value
                        : computed < value;
                    }
                    if (setLow) {
                      low = mid + 1;
                    } else {
                      high = mid;
                    }
                  }
                  return nativeMin(high, MAX_ARRAY_INDEX);
                }

                /**
                 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                 * support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseSortedUniq(array, iteratee) {
                  var index = -1,
                    length = array.length,
                    resIndex = 0,
                    result = [];

                  while (++index < length) {
                    var value = array[index],
                      computed = iteratee ? iteratee(value) : value;

                    if (!index || !eq(computed, seen)) {
                      var seen = computed;
                      result[resIndex++] = value === 0 ? 0 : value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.toNumber` which doesn't ensure correct
                 * conversions of binary, hexadecimal, or octal string values.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 */
                function baseToNumber(value) {
                  if (typeof value == "number") {
                    return value;
                  }
                  if (isSymbol(value)) {
                    return NAN;
                  }
                  return +value;
                }

                /**
                 * The base implementation of `_.toString` which doesn't convert nullish
                 * values to empty strings.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {string} Returns the string.
                 */
                function baseToString(value) {
                  // Exit early for strings to avoid a performance hit in some environments.
                  if (typeof value == "string") {
                    return value;
                  }
                  if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + "";
                  }
                  if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : "";
                  }
                  var result = value + "";
                  return result == "0" && 1 / value == -INFINITY
                    ? "-0"
                    : result;
                }

                /**
                 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseUniq(array, iteratee, comparator) {
                  var index = -1,
                    includes = arrayIncludes,
                    length = array.length,
                    isCommon = true,
                    result = [],
                    seen = result;

                  if (comparator) {
                    isCommon = false;
                    includes = arrayIncludesWith;
                  } else if (length >= LARGE_ARRAY_SIZE) {
                    var set = iteratee ? null : createSet(array);
                    if (set) {
                      return setToArray(set);
                    }
                    isCommon = false;
                    includes = cacheHas;
                    seen = new SetCache();
                  } else {
                    seen = iteratee ? [] : result;
                  }
                  outer: while (++index < length) {
                    var value = array[index],
                      computed = iteratee ? iteratee(value) : value;

                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                      var seenIndex = seen.length;
                      while (seenIndex--) {
                        if (seen[seenIndex] === computed) {
                          continue outer;
                        }
                      }
                      if (iteratee) {
                        seen.push(computed);
                      }
                      result.push(value);
                    } else if (!includes(seen, computed, comparator)) {
                      if (seen !== result) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.unset`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The property path to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 */
                function baseUnset(object, path) {
                  path = castPath(path, object);
                  object = parent(object, path);
                  return object == null || delete object[toKey(last(path))];
                }

                /**
                 * The base implementation of `_.update`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to update.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseUpdate(object, path, updater, customizer) {
                  return baseSet(
                    object,
                    path,
                    updater(baseGet(object, path)),
                    customizer
                  );
                }

                /**
                 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                 * without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseWhile(array, predicate, isDrop, fromRight) {
                  var length = array.length,
                    index = fromRight ? length : -1;

                  while (
                    (fromRight ? index-- : ++index < length) &&
                    predicate(array[index], index, array)
                  ) {}

                  return isDrop
                    ? baseSlice(
                        array,
                        fromRight ? 0 : index,
                        fromRight ? index + 1 : length
                      )
                    : baseSlice(
                        array,
                        fromRight ? index + 1 : 0,
                        fromRight ? length : index
                      );
                }

                /**
                 * The base implementation of `wrapperValue` which returns the result of
                 * performing a sequence of actions on the unwrapped `value`, where each
                 * successive action is supplied the return value of the previous.
                 *
                 * @private
                 * @param {*} value The unwrapped value.
                 * @param {Array} actions Actions to perform to resolve the unwrapped value.
                 * @returns {*} Returns the resolved value.
                 */
                function baseWrapperValue(value, actions) {
                  var result = value;
                  if (result instanceof LazyWrapper) {
                    result = result.value();
                  }
                  return arrayReduce(
                    actions,
                    function (result, action) {
                      return action.func.apply(
                        action.thisArg,
                        arrayPush([result], action.args)
                      );
                    },
                    result
                  );
                }

                /**
                 * The base implementation of methods like `_.xor`, without support for
                 * iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of values.
                 */
                function baseXor(arrays, iteratee, comparator) {
                  var length = arrays.length;
                  if (length < 2) {
                    return length ? baseUniq(arrays[0]) : [];
                  }
                  var index = -1,
                    result = Array(length);

                  while (++index < length) {
                    var array = arrays[index],
                      othIndex = -1;

                    while (++othIndex < length) {
                      if (othIndex != index) {
                        result[index] = baseDifference(
                          result[index] || array,
                          arrays[othIndex],
                          iteratee,
                          comparator
                        );
                      }
                    }
                  }
                  return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                }

                /**
                 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                 *
                 * @private
                 * @param {Array} props The property identifiers.
                 * @param {Array} values The property values.
                 * @param {Function} assignFunc The function to assign values.
                 * @returns {Object} Returns the new object.
                 */
                function baseZipObject(props, values, assignFunc) {
                  var index = -1,
                    length = props.length,
                    valsLength = values.length,
                    result = {};

                  while (++index < length) {
                    var value = index < valsLength ? values[index] : undefined;
                    assignFunc(result, props[index], value);
                  }
                  return result;
                }

                /**
                 * Casts `value` to an empty array if it's not an array like object.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Array|Object} Returns the cast array-like object.
                 */
                function castArrayLikeObject(value) {
                  return isArrayLikeObject(value) ? value : [];
                }

                /**
                 * Casts `value` to `identity` if it's not a function.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Function} Returns cast function.
                 */
                function castFunction(value) {
                  return typeof value == "function" ? value : identity;
                }

                /**
                 * Casts `value` to a path array if it's not one.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {Array} Returns the cast property path array.
                 */
                function castPath(value, object) {
                  if (isArray(value)) {
                    return value;
                  }
                  return isKey(value, object)
                    ? [value]
                    : stringToPath(toString(value));
                }

                /**
                 * A `baseRest` alias which can be replaced with `identity` by module
                 * replacement plugins.
                 *
                 * @private
                 * @type {Function}
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                var castRest = baseRest;

                /**
                 * Casts `array` to a slice if it's needed.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {number} start The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the cast slice.
                 */
                function castSlice(array, start, end) {
                  var length = array.length;
                  end = end === undefined ? length : end;
                  return !start && end >= length
                    ? array
                    : baseSlice(array, start, end);
                }

                /**
                 * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                 *
                 * @private
                 * @param {number|Object} id The timer id or timeout object of the timer to clear.
                 */
                var clearTimeout =
                  ctxClearTimeout ||
                  function (id) {
                    return root.clearTimeout(id);
                  };

                /**
                 * Creates a clone of  `buffer`.
                 *
                 * @private
                 * @param {Buffer} buffer The buffer to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Buffer} Returns the cloned buffer.
                 */
                function cloneBuffer(buffer, isDeep) {
                  if (isDeep) {
                    return buffer.slice();
                  }
                  var length = buffer.length,
                    result = allocUnsafe
                      ? allocUnsafe(length)
                      : new buffer.constructor(length);

                  buffer.copy(result);
                  return result;
                }

                /**
                 * Creates a clone of `arrayBuffer`.
                 *
                 * @private
                 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                 * @returns {ArrayBuffer} Returns the cloned array buffer.
                 */
                function cloneArrayBuffer(arrayBuffer) {
                  var result = new arrayBuffer.constructor(
                    arrayBuffer.byteLength
                  );
                  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                  return result;
                }

                /**
                 * Creates a clone of `dataView`.
                 *
                 * @private
                 * @param {Object} dataView The data view to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned data view.
                 */
                function cloneDataView(dataView, isDeep) {
                  var buffer = isDeep
                    ? cloneArrayBuffer(dataView.buffer)
                    : dataView.buffer;
                  return new dataView.constructor(
                    buffer,
                    dataView.byteOffset,
                    dataView.byteLength
                  );
                }

                /**
                 * Creates a clone of `regexp`.
                 *
                 * @private
                 * @param {Object} regexp The regexp to clone.
                 * @returns {Object} Returns the cloned regexp.
                 */
                function cloneRegExp(regexp) {
                  var result = new regexp.constructor(
                    regexp.source,
                    reFlags.exec(regexp)
                  );
                  result.lastIndex = regexp.lastIndex;
                  return result;
                }

                /**
                 * Creates a clone of the `symbol` object.
                 *
                 * @private
                 * @param {Object} symbol The symbol object to clone.
                 * @returns {Object} Returns the cloned symbol object.
                 */
                function cloneSymbol(symbol) {
                  return symbolValueOf
                    ? Object(symbolValueOf.call(symbol))
                    : {};
                }

                /**
                 * Creates a clone of `typedArray`.
                 *
                 * @private
                 * @param {Object} typedArray The typed array to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned typed array.
                 */
                function cloneTypedArray(typedArray, isDeep) {
                  var buffer = isDeep
                    ? cloneArrayBuffer(typedArray.buffer)
                    : typedArray.buffer;
                  return new typedArray.constructor(
                    buffer,
                    typedArray.byteOffset,
                    typedArray.length
                  );
                }

                /**
                 * Compares values to sort them in ascending order.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {number} Returns the sort order indicator for `value`.
                 */
                function compareAscending(value, other) {
                  if (value !== other) {
                    var valIsDefined = value !== undefined,
                      valIsNull = value === null,
                      valIsReflexive = value === value,
                      valIsSymbol = isSymbol(value);

                    var othIsDefined = other !== undefined,
                      othIsNull = other === null,
                      othIsReflexive = other === other,
                      othIsSymbol = isSymbol(other);

                    if (
                      (!othIsNull &&
                        !othIsSymbol &&
                        !valIsSymbol &&
                        value > other) ||
                      (valIsSymbol &&
                        othIsDefined &&
                        othIsReflexive &&
                        !othIsNull &&
                        !othIsSymbol) ||
                      (valIsNull && othIsDefined && othIsReflexive) ||
                      (!valIsDefined && othIsReflexive) ||
                      !valIsReflexive
                    ) {
                      return 1;
                    }
                    if (
                      (!valIsNull &&
                        !valIsSymbol &&
                        !othIsSymbol &&
                        value < other) ||
                      (othIsSymbol &&
                        valIsDefined &&
                        valIsReflexive &&
                        !valIsNull &&
                        !valIsSymbol) ||
                      (othIsNull && valIsDefined && valIsReflexive) ||
                      (!othIsDefined && valIsReflexive) ||
                      !othIsReflexive
                    ) {
                      return -1;
                    }
                  }
                  return 0;
                }

                /**
                 * Used by `_.orderBy` to compare multiple properties of a value to another
                 * and stable sort them.
                 *
                 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                 * specify an order of "desc" for descending or "asc" for ascending sort order
                 * of corresponding values.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {boolean[]|string[]} orders The order to sort by for each property.
                 * @returns {number} Returns the sort order indicator for `object`.
                 */
                function compareMultiple(object, other, orders) {
                  var index = -1,
                    objCriteria = object.criteria,
                    othCriteria = other.criteria,
                    length = objCriteria.length,
                    ordersLength = orders.length;

                  while (++index < length) {
                    var result = compareAscending(
                      objCriteria[index],
                      othCriteria[index]
                    );
                    if (result) {
                      if (index >= ordersLength) {
                        return result;
                      }
                      var order = orders[index];
                      return result * (order == "desc" ? -1 : 1);
                    }
                  }
                  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                  // that causes it, under certain circumstances, to provide the same value for
                  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                  // for more details.
                  //
                  // This also ensures a stable sort in V8 and other engines.
                  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                  return object.index - other.index;
                }

                /**
                 * Creates an array that is the composition of partially applied arguments,
                 * placeholders, and provided arguments into a single array of arguments.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to prepend to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgs(args, partials, holders, isCurried) {
                  var argsIndex = -1,
                    argsLength = args.length,
                    holdersLength = holders.length,
                    leftIndex = -1,
                    leftLength = partials.length,
                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                    result = Array(leftLength + rangeLength),
                    isUncurried = !isCurried;

                  while (++leftIndex < leftLength) {
                    result[leftIndex] = partials[leftIndex];
                  }
                  while (++argsIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                      result[holders[argsIndex]] = args[argsIndex];
                    }
                  }
                  while (rangeLength--) {
                    result[leftIndex++] = args[argsIndex++];
                  }
                  return result;
                }

                /**
                 * This function is like `composeArgs` except that the arguments composition
                 * is tailored for `_.partialRight`.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to append to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgsRight(args, partials, holders, isCurried) {
                  var argsIndex = -1,
                    argsLength = args.length,
                    holdersIndex = -1,
                    holdersLength = holders.length,
                    rightIndex = -1,
                    rightLength = partials.length,
                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                    result = Array(rangeLength + rightLength),
                    isUncurried = !isCurried;

                  while (++argsIndex < rangeLength) {
                    result[argsIndex] = args[argsIndex];
                  }
                  var offset = argsIndex;
                  while (++rightIndex < rightLength) {
                    result[offset + rightIndex] = partials[rightIndex];
                  }
                  while (++holdersIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                      result[offset + holders[holdersIndex]] =
                        args[argsIndex++];
                    }
                  }
                  return result;
                }

                /**
                 * Copies the values of `source` to `array`.
                 *
                 * @private
                 * @param {Array} source The array to copy values from.
                 * @param {Array} [array=[]] The array to copy values to.
                 * @returns {Array} Returns `array`.
                 */
                function copyArray(source, array) {
                  var index = -1,
                    length = source.length;

                  array || (array = Array(length));
                  while (++index < length) {
                    array[index] = source[index];
                  }
                  return array;
                }

                /**
                 * Copies properties of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy properties from.
                 * @param {Array} props The property identifiers to copy.
                 * @param {Object} [object={}] The object to copy properties to.
                 * @param {Function} [customizer] The function to customize copied values.
                 * @returns {Object} Returns `object`.
                 */
                function copyObject(source, props, object, customizer) {
                  var isNew = !object;
                  object || (object = {});

                  var index = -1,
                    length = props.length;

                  while (++index < length) {
                    var key = props[index];

                    var newValue = customizer
                      ? customizer(
                          object[key],
                          source[key],
                          key,
                          object,
                          source
                        )
                      : undefined;

                    if (newValue === undefined) {
                      newValue = source[key];
                    }
                    if (isNew) {
                      baseAssignValue(object, key, newValue);
                    } else {
                      assignValue(object, key, newValue);
                    }
                  }
                  return object;
                }

                /**
                 * Copies own symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbols(source, object) {
                  return copyObject(source, getSymbols(source), object);
                }

                /**
                 * Copies own and inherited symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbolsIn(source, object) {
                  return copyObject(source, getSymbolsIn(source), object);
                }

                /**
                 * Creates a function like `_.groupBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} [initializer] The accumulator object initializer.
                 * @returns {Function} Returns the new aggregator function.
                 */
                function createAggregator(setter, initializer) {
                  return function (collection, iteratee) {
                    var func = isArray(collection)
                        ? arrayAggregator
                        : baseAggregator,
                      accumulator = initializer ? initializer() : {};

                    return func(
                      collection,
                      setter,
                      getIteratee(iteratee, 2),
                      accumulator
                    );
                  };
                }

                /**
                 * Creates a function like `_.assign`.
                 *
                 * @private
                 * @param {Function} assigner The function to assign values.
                 * @returns {Function} Returns the new assigner function.
                 */
                function createAssigner(assigner) {
                  return baseRest(function (object, sources) {
                    var index = -1,
                      length = sources.length,
                      customizer = length > 1 ? sources[length - 1] : undefined,
                      guard = length > 2 ? sources[2] : undefined;

                    customizer =
                      assigner.length > 3 && typeof customizer == "function"
                        ? (length--, customizer)
                        : undefined;

                    if (
                      guard &&
                      isIterateeCall(sources[0], sources[1], guard)
                    ) {
                      customizer = length < 3 ? undefined : customizer;
                      length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                      var source = sources[index];
                      if (source) {
                        assigner(object, source, index, customizer);
                      }
                    }
                    return object;
                  });
                }

                /**
                 * Creates a `baseEach` or `baseEachRight` function.
                 *
                 * @private
                 * @param {Function} eachFunc The function to iterate over a collection.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseEach(eachFunc, fromRight) {
                  return function (collection, iteratee) {
                    if (collection == null) {
                      return collection;
                    }
                    if (!isArrayLike(collection)) {
                      return eachFunc(collection, iteratee);
                    }
                    var length = collection.length,
                      index = fromRight ? length : -1,
                      iterable = Object(collection);

                    while (fromRight ? index-- : ++index < length) {
                      if (
                        iteratee(iterable[index], index, iterable) === false
                      ) {
                        break;
                      }
                    }
                    return collection;
                  };
                }

                /**
                 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseFor(fromRight) {
                  return function (object, iteratee, keysFunc) {
                    var index = -1,
                      iterable = Object(object),
                      props = keysFunc(object),
                      length = props.length;

                    while (length--) {
                      var key = props[fromRight ? length : ++index];
                      if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                      }
                    }
                    return object;
                  };
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the optional `this`
                 * binding of `thisArg`.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createBind(func, bitmask, thisArg) {
                  var isBind = bitmask & WRAP_BIND_FLAG,
                    Ctor = createCtor(func);

                  function wrapper() {
                    var fn =
                      this && this !== root && this instanceof wrapper
                        ? Ctor
                        : func;
                    return fn.apply(isBind ? thisArg : this, arguments);
                  }
                  return wrapper;
                }

                /**
                 * Creates a function like `_.lowerFirst`.
                 *
                 * @private
                 * @param {string} methodName The name of the `String` case method to use.
                 * @returns {Function} Returns the new case function.
                 */
                function createCaseFirst(methodName) {
                  return function (string) {
                    string = toString(string);

                    var strSymbols = hasUnicode(string)
                      ? stringToArray(string)
                      : undefined;

                    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                    var trailing = strSymbols
                      ? castSlice(strSymbols, 1).join("")
                      : string.slice(1);

                    return chr[methodName]() + trailing;
                  };
                }

                /**
                 * Creates a function like `_.camelCase`.
                 *
                 * @private
                 * @param {Function} callback The function to combine each word.
                 * @returns {Function} Returns the new compounder function.
                 */
                function createCompounder(callback) {
                  return function (string) {
                    return arrayReduce(
                      words(deburr(string).replace(reApos, "")),
                      callback,
                      ""
                    );
                  };
                }

                /**
                 * Creates a function that produces an instance of `Ctor` regardless of
                 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                 *
                 * @private
                 * @param {Function} Ctor The constructor to wrap.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCtor(Ctor) {
                  return function () {
                    // Use a `switch` statement to work with class constructors. See
                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                    // for more details.
                    var args = arguments;
                    switch (args.length) {
                      case 0:
                        return new Ctor();
                      case 1:
                        return new Ctor(args[0]);
                      case 2:
                        return new Ctor(args[0], args[1]);
                      case 3:
                        return new Ctor(args[0], args[1], args[2]);
                      case 4:
                        return new Ctor(args[0], args[1], args[2], args[3]);
                      case 5:
                        return new Ctor(
                          args[0],
                          args[1],
                          args[2],
                          args[3],
                          args[4]
                        );
                      case 6:
                        return new Ctor(
                          args[0],
                          args[1],
                          args[2],
                          args[3],
                          args[4],
                          args[5]
                        );
                      case 7:
                        return new Ctor(
                          args[0],
                          args[1],
                          args[2],
                          args[3],
                          args[4],
                          args[5],
                          args[6]
                        );
                    }
                    var thisBinding = baseCreate(Ctor.prototype),
                      result = Ctor.apply(thisBinding, args);

                    // Mimic the constructor's `return` behavior.
                    // See https://es5.github.io/#x13.2.2 for more details.
                    return isObject(result) ? result : thisBinding;
                  };
                }

                /**
                 * Creates a function that wraps `func` to enable currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {number} arity The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCurry(func, bitmask, arity) {
                  var Ctor = createCtor(func);

                  function wrapper() {
                    var length = arguments.length,
                      args = Array(length),
                      index = length,
                      placeholder = getHolder(wrapper);

                    while (index--) {
                      args[index] = arguments[index];
                    }
                    var holders =
                      length < 3 &&
                      args[0] !== placeholder &&
                      args[length - 1] !== placeholder
                        ? []
                        : replaceHolders(args, placeholder);

                    length -= holders.length;
                    if (length < arity) {
                      return createRecurry(
                        func,
                        bitmask,
                        createHybrid,
                        wrapper.placeholder,
                        undefined,
                        args,
                        holders,
                        undefined,
                        undefined,
                        arity - length
                      );
                    }
                    var fn =
                      this && this !== root && this instanceof wrapper
                        ? Ctor
                        : func;
                    return apply(fn, this, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a `_.find` or `_.findLast` function.
                 *
                 * @private
                 * @param {Function} findIndexFunc The function to find the collection index.
                 * @returns {Function} Returns the new find function.
                 */
                function createFind(findIndexFunc) {
                  return function (collection, predicate, fromIndex) {
                    var iterable = Object(collection);
                    if (!isArrayLike(collection)) {
                      var iteratee = getIteratee(predicate, 3);
                      collection = keys(collection);
                      predicate = function (key) {
                        return iteratee(iterable[key], key, iterable);
                      };
                    }
                    var index = findIndexFunc(collection, predicate, fromIndex);
                    return index > -1
                      ? iterable[iteratee ? collection[index] : index]
                      : undefined;
                  };
                }

                /**
                 * Creates a `_.flow` or `_.flowRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new flow function.
                 */
                function createFlow(fromRight) {
                  return flatRest(function (funcs) {
                    var length = funcs.length,
                      index = length,
                      prereq = LodashWrapper.prototype.thru;

                    if (fromRight) {
                      funcs.reverse();
                    }
                    while (index--) {
                      var func = funcs[index];
                      if (typeof func != "function") {
                        throw new TypeError(FUNC_ERROR_TEXT);
                      }
                      if (
                        prereq &&
                        !wrapper &&
                        getFuncName(func) == "wrapper"
                      ) {
                        var wrapper = new LodashWrapper([], true);
                      }
                    }
                    index = wrapper ? index : length;
                    while (++index < length) {
                      func = funcs[index];

                      var funcName = getFuncName(func),
                        data =
                          funcName == "wrapper" ? getData(func) : undefined;

                      if (
                        data &&
                        isLaziable(data[0]) &&
                        data[1] ==
                          (WRAP_ARY_FLAG |
                            WRAP_CURRY_FLAG |
                            WRAP_PARTIAL_FLAG |
                            WRAP_REARG_FLAG) &&
                        !data[4].length &&
                        data[9] == 1
                      ) {
                        wrapper = wrapper[getFuncName(data[0])].apply(
                          wrapper,
                          data[3]
                        );
                      } else {
                        wrapper =
                          func.length == 1 && isLaziable(func)
                            ? wrapper[funcName]()
                            : wrapper.thru(func);
                      }
                    }
                    return function () {
                      var args = arguments,
                        value = args[0];

                      if (wrapper && args.length == 1 && isArray(value)) {
                        return wrapper.plant(value).value();
                      }
                      var index = 0,
                        result = length
                          ? funcs[index].apply(this, args)
                          : value;

                      while (++index < length) {
                        result = funcs[index].call(this, result);
                      }
                      return result;
                    };
                  });
                }

                /**
                 * Creates a function that wraps `func` to invoke it with optional `this`
                 * binding of `thisArg`, partial application, and currying.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [partialsRight] The arguments to append to those provided
                 *  to the new function.
                 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createHybrid(
                  func,
                  bitmask,
                  thisArg,
                  partials,
                  holders,
                  partialsRight,
                  holdersRight,
                  argPos,
                  ary,
                  arity
                ) {
                  var isAry = bitmask & WRAP_ARY_FLAG,
                    isBind = bitmask & WRAP_BIND_FLAG,
                    isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                    isCurried =
                      bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                    isFlip = bitmask & WRAP_FLIP_FLAG,
                    Ctor = isBindKey ? undefined : createCtor(func);

                  function wrapper() {
                    var length = arguments.length,
                      args = Array(length),
                      index = length;

                    while (index--) {
                      args[index] = arguments[index];
                    }
                    if (isCurried) {
                      var placeholder = getHolder(wrapper),
                        holdersCount = countHolders(args, placeholder);
                    }
                    if (partials) {
                      args = composeArgs(args, partials, holders, isCurried);
                    }
                    if (partialsRight) {
                      args = composeArgsRight(
                        args,
                        partialsRight,
                        holdersRight,
                        isCurried
                      );
                    }
                    length -= holdersCount;
                    if (isCurried && length < arity) {
                      var newHolders = replaceHolders(args, placeholder);
                      return createRecurry(
                        func,
                        bitmask,
                        createHybrid,
                        wrapper.placeholder,
                        thisArg,
                        args,
                        newHolders,
                        argPos,
                        ary,
                        arity - length
                      );
                    }
                    var thisBinding = isBind ? thisArg : this,
                      fn = isBindKey ? thisBinding[func] : func;

                    length = args.length;
                    if (argPos) {
                      args = reorder(args, argPos);
                    } else if (isFlip && length > 1) {
                      args.reverse();
                    }
                    if (isAry && ary < length) {
                      args.length = ary;
                    }
                    if (this && this !== root && this instanceof wrapper) {
                      fn = Ctor || createCtor(fn);
                    }
                    return fn.apply(thisBinding, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a function like `_.invertBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} toIteratee The function to resolve iteratees.
                 * @returns {Function} Returns the new inverter function.
                 */
                function createInverter(setter, toIteratee) {
                  return function (object, iteratee) {
                    return baseInverter(
                      object,
                      setter,
                      toIteratee(iteratee),
                      {}
                    );
                  };
                }

                /**
                 * Creates a function that performs a mathematical operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @param {number} [defaultValue] The value used for `undefined` arguments.
                 * @returns {Function} Returns the new mathematical operation function.
                 */
                function createMathOperation(operator, defaultValue) {
                  return function (value, other) {
                    var result;
                    if (value === undefined && other === undefined) {
                      return defaultValue;
                    }
                    if (value !== undefined) {
                      result = value;
                    }
                    if (other !== undefined) {
                      if (result === undefined) {
                        return other;
                      }
                      if (
                        typeof value == "string" ||
                        typeof other == "string"
                      ) {
                        value = baseToString(value);
                        other = baseToString(other);
                      } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                      }
                      result = operator(value, other);
                    }
                    return result;
                  };
                }

                /**
                 * Creates a function like `_.over`.
                 *
                 * @private
                 * @param {Function} arrayFunc The function to iterate over iteratees.
                 * @returns {Function} Returns the new over function.
                 */
                function createOver(arrayFunc) {
                  return flatRest(function (iteratees) {
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    return baseRest(function (args) {
                      var thisArg = this;
                      return arrayFunc(iteratees, function (iteratee) {
                        return apply(iteratee, thisArg, args);
                      });
                    });
                  });
                }

                /**
                 * Creates the padding for `string` based on `length`. The `chars` string
                 * is truncated if the number of characters exceeds `length`.
                 *
                 * @private
                 * @param {number} length The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padding for `string`.
                 */
                function createPadding(length, chars) {
                  chars = chars === undefined ? " " : baseToString(chars);

                  var charsLength = chars.length;
                  if (charsLength < 2) {
                    return charsLength ? baseRepeat(chars, length) : chars;
                  }
                  var result = baseRepeat(
                    chars,
                    nativeCeil(length / stringSize(chars))
                  );
                  return hasUnicode(chars)
                    ? castSlice(stringToArray(result), 0, length).join("")
                    : result.slice(0, length);
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the `this` binding
                 * of `thisArg` and `partials` prepended to the arguments it receives.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} partials The arguments to prepend to those provided to
                 *  the new function.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createPartial(func, bitmask, thisArg, partials) {
                  var isBind = bitmask & WRAP_BIND_FLAG,
                    Ctor = createCtor(func);

                  function wrapper() {
                    var argsIndex = -1,
                      argsLength = arguments.length,
                      leftIndex = -1,
                      leftLength = partials.length,
                      args = Array(leftLength + argsLength),
                      fn =
                        this && this !== root && this instanceof wrapper
                          ? Ctor
                          : func;

                    while (++leftIndex < leftLength) {
                      args[leftIndex] = partials[leftIndex];
                    }
                    while (argsLength--) {
                      args[leftIndex++] = arguments[++argsIndex];
                    }
                    return apply(fn, isBind ? thisArg : this, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a `_.range` or `_.rangeRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new range function.
                 */
                function createRange(fromRight) {
                  return function (start, end, step) {
                    if (
                      step &&
                      typeof step != "number" &&
                      isIterateeCall(start, end, step)
                    ) {
                      end = step = undefined;
                    }
                    // Ensure the sign of `-0` is preserved.
                    start = toFinite(start);
                    if (end === undefined) {
                      end = start;
                      start = 0;
                    } else {
                      end = toFinite(end);
                    }
                    step =
                      step === undefined
                        ? start < end
                          ? 1
                          : -1
                        : toFinite(step);
                    return baseRange(start, end, step, fromRight);
                  };
                }

                /**
                 * Creates a function that performs a relational operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @returns {Function} Returns the new relational operation function.
                 */
                function createRelationalOperation(operator) {
                  return function (value, other) {
                    if (
                      !(typeof value == "string" && typeof other == "string")
                    ) {
                      value = toNumber(value);
                      other = toNumber(other);
                    }
                    return operator(value, other);
                  };
                }

                /**
                 * Creates a function that wraps `func` to continue currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {Function} wrapFunc The function to create the `func` wrapper.
                 * @param {*} placeholder The placeholder value.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createRecurry(
                  func,
                  bitmask,
                  wrapFunc,
                  placeholder,
                  thisArg,
                  partials,
                  holders,
                  argPos,
                  ary,
                  arity
                ) {
                  var isCurry = bitmask & WRAP_CURRY_FLAG,
                    newHolders = isCurry ? holders : undefined,
                    newHoldersRight = isCurry ? undefined : holders,
                    newPartials = isCurry ? partials : undefined,
                    newPartialsRight = isCurry ? undefined : partials;

                  bitmask |= isCurry
                    ? WRAP_PARTIAL_FLAG
                    : WRAP_PARTIAL_RIGHT_FLAG;
                  bitmask &= ~(isCurry
                    ? WRAP_PARTIAL_RIGHT_FLAG
                    : WRAP_PARTIAL_FLAG);

                  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                  }
                  var newData = [
                    func,
                    bitmask,
                    thisArg,
                    newPartials,
                    newHolders,
                    newPartialsRight,
                    newHoldersRight,
                    argPos,
                    ary,
                    arity,
                  ];

                  var result = wrapFunc.apply(undefined, newData);
                  if (isLaziable(func)) {
                    setData(result, newData);
                  }
                  result.placeholder = placeholder;
                  return setWrapToString(result, func, bitmask);
                }

                /**
                 * Creates a function like `_.round`.
                 *
                 * @private
                 * @param {string} methodName The name of the `Math` method to use when rounding.
                 * @returns {Function} Returns the new round function.
                 */
                function createRound(methodName) {
                  var func = Math[methodName];
                  return function (number, precision) {
                    number = toNumber(number);
                    precision =
                      precision == null
                        ? 0
                        : nativeMin(toInteger(precision), 292);
                    if (precision && nativeIsFinite(number)) {
                      // Shift with exponential notation to avoid floating-point issues.
                      // See [MDN](https://mdn.io/round#Examples) for more details.
                      var pair = (toString(number) + "e").split("e"),
                        value = func(pair[0] + "e" + (+pair[1] + precision));

                      pair = (toString(value) + "e").split("e");
                      return +(pair[0] + "e" + (+pair[1] - precision));
                    }
                    return func(number);
                  };
                }

                /**
                 * Creates a set object of `values`.
                 *
                 * @private
                 * @param {Array} values The values to add to the set.
                 * @returns {Object} Returns the new set.
                 */
                var createSet = !(
                  Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
                )
                  ? noop
                  : function (values) {
                      return new Set(values);
                    };

                /**
                 * Creates a `_.toPairs` or `_.toPairsIn` function.
                 *
                 * @private
                 * @param {Function} keysFunc The function to get the keys of a given object.
                 * @returns {Function} Returns the new pairs function.
                 */
                function createToPairs(keysFunc) {
                  return function (object) {
                    var tag = getTag(object);
                    if (tag == mapTag) {
                      return mapToArray(object);
                    }
                    if (tag == setTag) {
                      return setToPairs(object);
                    }
                    return baseToPairs(object, keysFunc(object));
                  };
                }

                /**
                 * Creates a function that either curries or invokes `func` with optional
                 * `this` binding and partially applied arguments.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags.
                 *    1 - `_.bind`
                 *    2 - `_.bindKey`
                 *    4 - `_.curry` or `_.curryRight` of a bound function
                 *    8 - `_.curry`
                 *   16 - `_.curryRight`
                 *   32 - `_.partial`
                 *   64 - `_.partialRight`
                 *  128 - `_.rearg`
                 *  256 - `_.ary`
                 *  512 - `_.flip`
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to be partially applied.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createWrap(
                  func,
                  bitmask,
                  thisArg,
                  partials,
                  holders,
                  argPos,
                  ary,
                  arity
                ) {
                  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                  if (!isBindKey && typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  var length = partials ? partials.length : 0;
                  if (!length) {
                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                    partials = holders = undefined;
                  }
                  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                  arity = arity === undefined ? arity : toInteger(arity);
                  length -= holders ? holders.length : 0;

                  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                    var partialsRight = partials,
                      holdersRight = holders;

                    partials = holders = undefined;
                  }
                  var data = isBindKey ? undefined : getData(func);

                  var newData = [
                    func,
                    bitmask,
                    thisArg,
                    partials,
                    holders,
                    partialsRight,
                    holdersRight,
                    argPos,
                    ary,
                    arity,
                  ];

                  if (data) {
                    mergeData(newData, data);
                  }
                  func = newData[0];
                  bitmask = newData[1];
                  thisArg = newData[2];
                  partials = newData[3];
                  holders = newData[4];
                  arity = newData[9] =
                    newData[9] === undefined
                      ? isBindKey
                        ? 0
                        : func.length
                      : nativeMax(newData[9] - length, 0);

                  if (
                    !arity &&
                    bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
                  ) {
                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                  }
                  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                    var result = createBind(func, bitmask, thisArg);
                  } else if (
                    bitmask == WRAP_CURRY_FLAG ||
                    bitmask == WRAP_CURRY_RIGHT_FLAG
                  ) {
                    result = createCurry(func, bitmask, arity);
                  } else if (
                    (bitmask == WRAP_PARTIAL_FLAG ||
                      bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
                    !holders.length
                  ) {
                    result = createPartial(func, bitmask, thisArg, partials);
                  } else {
                    result = createHybrid.apply(undefined, newData);
                  }
                  var setter = data ? baseSetData : setData;
                  return setWrapToString(
                    setter(result, newData),
                    func,
                    bitmask
                  );
                }

                /**
                 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                 * of source objects to the destination object for all destination properties
                 * that resolve to `undefined`.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to assign.
                 * @param {Object} object The parent object of `objValue`.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsAssignIn(
                  objValue,
                  srcValue,
                  key,
                  object
                ) {
                  if (
                    objValue === undefined ||
                    (eq(objValue, objectProto[key]) &&
                      !hasOwnProperty.call(object, key))
                  ) {
                    return srcValue;
                  }
                  return objValue;
                }

                /**
                 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                 * objects into destination objects that are passed thru.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to merge.
                 * @param {Object} object The parent object of `objValue`.
                 * @param {Object} source The parent object of `srcValue`.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsMerge(
                  objValue,
                  srcValue,
                  key,
                  object,
                  source,
                  stack
                ) {
                  if (isObject(objValue) && isObject(srcValue)) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, objValue);
                    baseMerge(
                      objValue,
                      srcValue,
                      undefined,
                      customDefaultsMerge,
                      stack
                    );
                    stack["delete"](srcValue);
                  }
                  return objValue;
                }

                /**
                 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                 * objects.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {string} key The key of the property to inspect.
                 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                 */
                function customOmitClone(value) {
                  return isPlainObject(value) ? undefined : value;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for arrays with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Array} array The array to compare.
                 * @param {Array} other The other array to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `array` and `other` objects.
                 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                 */
                function equalArrays(
                  array,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                ) {
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    arrLength = array.length,
                    othLength = other.length;

                  if (
                    arrLength != othLength &&
                    !(isPartial && othLength > arrLength)
                  ) {
                    return false;
                  }
                  // Check that cyclic values are equal.
                  var arrStacked = stack.get(array);
                  var othStacked = stack.get(other);
                  if (arrStacked && othStacked) {
                    return arrStacked == other && othStacked == array;
                  }
                  var index = -1,
                    result = true,
                    seen =
                      bitmask & COMPARE_UNORDERED_FLAG
                        ? new SetCache()
                        : undefined;

                  stack.set(array, other);
                  stack.set(other, array);

                  // Ignore non-index properties.
                  while (++index < arrLength) {
                    var arrValue = array[index],
                      othValue = other[index];

                    if (customizer) {
                      var compared = isPartial
                        ? customizer(
                            othValue,
                            arrValue,
                            index,
                            other,
                            array,
                            stack
                          )
                        : customizer(
                            arrValue,
                            othValue,
                            index,
                            array,
                            other,
                            stack
                          );
                    }
                    if (compared !== undefined) {
                      if (compared) {
                        continue;
                      }
                      result = false;
                      break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                      if (
                        !arraySome(other, function (othValue, othIndex) {
                          if (
                            !cacheHas(seen, othIndex) &&
                            (arrValue === othValue ||
                              equalFunc(
                                arrValue,
                                othValue,
                                bitmask,
                                customizer,
                                stack
                              ))
                          ) {
                            return seen.push(othIndex);
                          }
                        })
                      ) {
                        result = false;
                        break;
                      }
                    } else if (
                      !(
                        arrValue === othValue ||
                        equalFunc(
                          arrValue,
                          othValue,
                          bitmask,
                          customizer,
                          stack
                        )
                      )
                    ) {
                      result = false;
                      break;
                    }
                  }
                  stack["delete"](array);
                  stack["delete"](other);
                  return result;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for comparing objects of
                 * the same `toStringTag`.
                 *
                 * **Note:** This function only supports comparing values with tags of
                 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {string} tag The `toStringTag` of the objects to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalByTag(
                  object,
                  other,
                  tag,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                ) {
                  switch (tag) {
                    case dataViewTag:
                      if (
                        object.byteLength != other.byteLength ||
                        object.byteOffset != other.byteOffset
                      ) {
                        return false;
                      }
                      object = object.buffer;
                      other = other.buffer;

                    case arrayBufferTag:
                      if (
                        object.byteLength != other.byteLength ||
                        !equalFunc(
                          new Uint8Array(object),
                          new Uint8Array(other)
                        )
                      ) {
                        return false;
                      }
                      return true;

                    case boolTag:
                    case dateTag:
                    case numberTag:
                      // Coerce booleans to `1` or `0` and dates to milliseconds.
                      // Invalid dates are coerced to `NaN`.
                      return eq(+object, +other);

                    case errorTag:
                      return (
                        object.name == other.name &&
                        object.message == other.message
                      );

                    case regexpTag:
                    case stringTag:
                      // Coerce regexes to strings and treat strings, primitives and objects,
                      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                      // for more details.
                      return object == other + "";

                    case mapTag:
                      var convert = mapToArray;

                    case setTag:
                      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                      convert || (convert = setToArray);

                      if (object.size != other.size && !isPartial) {
                        return false;
                      }
                      // Assume cyclic values are equal.
                      var stacked = stack.get(object);
                      if (stacked) {
                        return stacked == other;
                      }
                      bitmask |= COMPARE_UNORDERED_FLAG;

                      // Recursively compare objects (susceptible to call stack limits).
                      stack.set(object, other);
                      var result = equalArrays(
                        convert(object),
                        convert(other),
                        bitmask,
                        customizer,
                        equalFunc,
                        stack
                      );
                      stack["delete"](object);
                      return result;

                    case symbolTag:
                      if (symbolValueOf) {
                        return (
                          symbolValueOf.call(object) ==
                          symbolValueOf.call(other)
                        );
                      }
                  }
                  return false;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for objects with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalObjects(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                ) {
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    objProps = getAllKeys(object),
                    objLength = objProps.length,
                    othProps = getAllKeys(other),
                    othLength = othProps.length;

                  if (objLength != othLength && !isPartial) {
                    return false;
                  }
                  var index = objLength;
                  while (index--) {
                    var key = objProps[index];
                    if (
                      !(isPartial
                        ? key in other
                        : hasOwnProperty.call(other, key))
                    ) {
                      return false;
                    }
                  }
                  // Check that cyclic values are equal.
                  var objStacked = stack.get(object);
                  var othStacked = stack.get(other);
                  if (objStacked && othStacked) {
                    return objStacked == other && othStacked == object;
                  }
                  var result = true;
                  stack.set(object, other);
                  stack.set(other, object);

                  var skipCtor = isPartial;
                  while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                      othValue = other[key];

                    if (customizer) {
                      var compared = isPartial
                        ? customizer(
                            othValue,
                            objValue,
                            key,
                            other,
                            object,
                            stack
                          )
                        : customizer(
                            objValue,
                            othValue,
                            key,
                            object,
                            other,
                            stack
                          );
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (
                      !(compared === undefined
                        ? objValue === othValue ||
                          equalFunc(
                            objValue,
                            othValue,
                            bitmask,
                            customizer,
                            stack
                          )
                        : compared)
                    ) {
                      result = false;
                      break;
                    }
                    skipCtor || (skipCtor = key == "constructor");
                  }
                  if (result && !skipCtor) {
                    var objCtor = object.constructor,
                      othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (
                      objCtor != othCtor &&
                      "constructor" in object &&
                      "constructor" in other &&
                      !(
                        typeof objCtor == "function" &&
                        objCtor instanceof objCtor &&
                        typeof othCtor == "function" &&
                        othCtor instanceof othCtor
                      )
                    ) {
                      result = false;
                    }
                  }
                  stack["delete"](object);
                  stack["delete"](other);
                  return result;
                }

                /**
                 * A specialized version of `baseRest` which flattens the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                function flatRest(func) {
                  return setToString(
                    overRest(func, undefined, flatten),
                    func + ""
                  );
                }

                /**
                 * Creates an array of own enumerable property names and symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeys(object) {
                  return baseGetAllKeys(object, keys, getSymbols);
                }

                /**
                 * Creates an array of own and inherited enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeysIn(object) {
                  return baseGetAllKeys(object, keysIn, getSymbolsIn);
                }

                /**
                 * Gets metadata for `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {*} Returns the metadata for `func`.
                 */
                var getData = !metaMap
                  ? noop
                  : function (func) {
                      return metaMap.get(func);
                    };

                /**
                 * Gets the name of `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {string} Returns the function name.
                 */
                function getFuncName(func) {
                  var result = func.name + "",
                    array = realNames[result],
                    length = hasOwnProperty.call(realNames, result)
                      ? array.length
                      : 0;

                  while (length--) {
                    var data = array[length],
                      otherFunc = data.func;
                    if (otherFunc == null || otherFunc == func) {
                      return data.name;
                    }
                  }
                  return result;
                }

                /**
                 * Gets the argument placeholder value for `func`.
                 *
                 * @private
                 * @param {Function} func The function to inspect.
                 * @returns {*} Returns the placeholder value.
                 */
                function getHolder(func) {
                  var object = hasOwnProperty.call(lodash, "placeholder")
                    ? lodash
                    : func;
                  return object.placeholder;
                }

                /**
                 * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                 * this function returns the custom method, otherwise it returns `baseIteratee`.
                 * If arguments are provided, the chosen function is invoked with them and
                 * its result is returned.
                 *
                 * @private
                 * @param {*} [value] The value to convert to an iteratee.
                 * @param {number} [arity] The arity of the created iteratee.
                 * @returns {Function} Returns the chosen function or its result.
                 */
                function getIteratee() {
                  var result = lodash.iteratee || iteratee;
                  result = result === iteratee ? baseIteratee : result;
                  return arguments.length
                    ? result(arguments[0], arguments[1])
                    : result;
                }

                /**
                 * Gets the data for `map`.
                 *
                 * @private
                 * @param {Object} map The map to query.
                 * @param {string} key The reference key.
                 * @returns {*} Returns the map data.
                 */
                function getMapData(map, key) {
                  var data = map.__data__;
                  return isKeyable(key)
                    ? data[typeof key == "string" ? "string" : "hash"]
                    : data.map;
                }

                /**
                 * Gets the property names, values, and compare flags of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the match data of `object`.
                 */
                function getMatchData(object) {
                  var result = keys(object),
                    length = result.length;

                  while (length--) {
                    var key = result[length],
                      value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                  }
                  return result;
                }

                /**
                 * Gets the native function at `key` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the method to get.
                 * @returns {*} Returns the function if it's native, else `undefined`.
                 */
                function getNative(object, key) {
                  var value = getValue(object, key);
                  return baseIsNative(value) ? value : undefined;
                }

                /**
                 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the raw `toStringTag`.
                 */
                function getRawTag(value) {
                  var isOwn = hasOwnProperty.call(value, symToStringTag),
                    tag = value[symToStringTag];

                  try {
                    value[symToStringTag] = undefined;
                    var unmasked = true;
                  } catch (e) {}

                  var result = nativeObjectToString.call(value);
                  if (unmasked) {
                    if (isOwn) {
                      value[symToStringTag] = tag;
                    } else {
                      delete value[symToStringTag];
                    }
                  }
                  return result;
                }

                /**
                 * Creates an array of the own enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbols = !nativeGetSymbols
                  ? stubArray
                  : function (object) {
                      if (object == null) {
                        return [];
                      }
                      object = Object(object);
                      return arrayFilter(
                        nativeGetSymbols(object),
                        function (symbol) {
                          return propertyIsEnumerable.call(object, symbol);
                        }
                      );
                    };

                /**
                 * Creates an array of the own and inherited enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbolsIn = !nativeGetSymbols
                  ? stubArray
                  : function (object) {
                      var result = [];
                      while (object) {
                        arrayPush(result, getSymbols(object));
                        object = getPrototype(object);
                      }
                      return result;
                    };

                /**
                 * Gets the `toStringTag` of `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                var getTag = baseGetTag;

                // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                if (
                  (DataView &&
                    getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                  (Map && getTag(new Map()) != mapTag) ||
                  (Promise && getTag(Promise.resolve()) != promiseTag) ||
                  (Set && getTag(new Set()) != setTag) ||
                  (WeakMap && getTag(new WeakMap()) != weakMapTag)
                ) {
                  getTag = function (value) {
                    var result = baseGetTag(value),
                      Ctor =
                        result == objectTag ? value.constructor : undefined,
                      ctorString = Ctor ? toSource(Ctor) : "";

                    if (ctorString) {
                      switch (ctorString) {
                        case dataViewCtorString:
                          return dataViewTag;
                        case mapCtorString:
                          return mapTag;
                        case promiseCtorString:
                          return promiseTag;
                        case setCtorString:
                          return setTag;
                        case weakMapCtorString:
                          return weakMapTag;
                      }
                    }
                    return result;
                  };
                }

                /**
                 * Gets the view, applying any `transforms` to the `start` and `end` positions.
                 *
                 * @private
                 * @param {number} start The start of the view.
                 * @param {number} end The end of the view.
                 * @param {Array} transforms The transformations to apply to the view.
                 * @returns {Object} Returns an object containing the `start` and `end`
                 *  positions of the view.
                 */
                function getView(start, end, transforms) {
                  var index = -1,
                    length = transforms.length;

                  while (++index < length) {
                    var data = transforms[index],
                      size = data.size;

                    switch (data.type) {
                      case "drop":
                        start += size;
                        break;
                      case "dropRight":
                        end -= size;
                        break;
                      case "take":
                        end = nativeMin(end, start + size);
                        break;
                      case "takeRight":
                        start = nativeMax(start, end - size);
                        break;
                    }
                  }
                  return { start: start, end: end };
                }

                /**
                 * Extracts wrapper details from the `source` body comment.
                 *
                 * @private
                 * @param {string} source The source to inspect.
                 * @returns {Array} Returns the wrapper details.
                 */
                function getWrapDetails(source) {
                  var match = source.match(reWrapDetails);
                  return match ? match[1].split(reSplitDetails) : [];
                }

                /**
                 * Checks if `path` exists on `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @param {Function} hasFunc The function to check properties.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 */
                function hasPath(object, path, hasFunc) {
                  path = castPath(path, object);

                  var index = -1,
                    length = path.length,
                    result = false;

                  while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                      break;
                    }
                    object = object[key];
                  }
                  if (result || ++index != length) {
                    return result;
                  }
                  length = object == null ? 0 : object.length;
                  return (
                    !!length &&
                    isLength(length) &&
                    isIndex(key, length) &&
                    (isArray(object) || isArguments(object))
                  );
                }

                /**
                 * Initializes an array clone.
                 *
                 * @private
                 * @param {Array} array The array to clone.
                 * @returns {Array} Returns the initialized clone.
                 */
                function initCloneArray(array) {
                  var length = array.length,
                    result = new array.constructor(length);

                  // Add properties assigned by `RegExp#exec`.
                  if (
                    length &&
                    typeof array[0] == "string" &&
                    hasOwnProperty.call(array, "index")
                  ) {
                    result.index = array.index;
                    result.input = array.input;
                  }
                  return result;
                }

                /**
                 * Initializes an object clone.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneObject(object) {
                  return typeof object.constructor == "function" &&
                    !isPrototype(object)
                    ? baseCreate(getPrototype(object))
                    : {};
                }

                /**
                 * Initializes an object clone based on its `toStringTag`.
                 *
                 * **Note:** This function only supports cloning values with tags of
                 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @param {string} tag The `toStringTag` of the object to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneByTag(object, tag, isDeep) {
                  var Ctor = object.constructor;
                  switch (tag) {
                    case arrayBufferTag:
                      return cloneArrayBuffer(object);

                    case boolTag:
                    case dateTag:
                      return new Ctor(+object);

                    case dataViewTag:
                      return cloneDataView(object, isDeep);

                    case float32Tag:
                    case float64Tag:
                    case int8Tag:
                    case int16Tag:
                    case int32Tag:
                    case uint8Tag:
                    case uint8ClampedTag:
                    case uint16Tag:
                    case uint32Tag:
                      return cloneTypedArray(object, isDeep);

                    case mapTag:
                      return new Ctor();

                    case numberTag:
                    case stringTag:
                      return new Ctor(object);

                    case regexpTag:
                      return cloneRegExp(object);

                    case setTag:
                      return new Ctor();

                    case symbolTag:
                      return cloneSymbol(object);
                  }
                }

                /**
                 * Inserts wrapper `details` in a comment at the top of the `source` body.
                 *
                 * @private
                 * @param {string} source The source to modify.
                 * @returns {Array} details The details to insert.
                 * @returns {string} Returns the modified source.
                 */
                function insertWrapDetails(source, details) {
                  var length = details.length;
                  if (!length) {
                    return source;
                  }
                  var lastIndex = length - 1;
                  details[lastIndex] =
                    (length > 1 ? "& " : "") + details[lastIndex];
                  details = details.join(length > 2 ? ", " : " ");
                  return source.replace(
                    reWrapComment,
                    "{\n/* [wrapped with " + details + "] */\n"
                  );
                }

                /**
                 * Checks if `value` is a flattenable `arguments` object or array.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                 */
                function isFlattenable(value) {
                  return (
                    isArray(value) ||
                    isArguments(value) ||
                    !!(spreadableSymbol && value && value[spreadableSymbol])
                  );
                }

                /**
                 * Checks if `value` is a valid array-like index.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                 */
                function isIndex(value, length) {
                  var type = typeof value;
                  length = length == null ? MAX_SAFE_INTEGER : length;

                  return (
                    !!length &&
                    (type == "number" ||
                      (type != "symbol" && reIsUint.test(value))) &&
                    value > -1 &&
                    value % 1 == 0 &&
                    value < length
                  );
                }

                /**
                 * Checks if the given arguments are from an iteratee call.
                 *
                 * @private
                 * @param {*} value The potential iteratee value argument.
                 * @param {*} index The potential iteratee index or key argument.
                 * @param {*} object The potential iteratee object argument.
                 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                 *  else `false`.
                 */
                function isIterateeCall(value, index, object) {
                  if (!isObject(object)) {
                    return false;
                  }
                  var type = typeof index;
                  if (
                    type == "number"
                      ? isArrayLike(object) && isIndex(index, object.length)
                      : type == "string" && index in object
                  ) {
                    return eq(object[index], value);
                  }
                  return false;
                }

                /**
                 * Checks if `value` is a property name and not a property path.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                 */
                function isKey(value, object) {
                  if (isArray(value)) {
                    return false;
                  }
                  var type = typeof value;
                  if (
                    type == "number" ||
                    type == "symbol" ||
                    type == "boolean" ||
                    value == null ||
                    isSymbol(value)
                  ) {
                    return true;
                  }
                  return (
                    reIsPlainProp.test(value) ||
                    !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object))
                  );
                }

                /**
                 * Checks if `value` is suitable for use as unique object key.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                 */
                function isKeyable(value) {
                  var type = typeof value;
                  return type == "string" ||
                    type == "number" ||
                    type == "symbol" ||
                    type == "boolean"
                    ? value !== "__proto__"
                    : value === null;
                }

                /**
                 * Checks if `func` has a lazy counterpart.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                 *  else `false`.
                 */
                function isLaziable(func) {
                  var funcName = getFuncName(func),
                    other = lodash[funcName];

                  if (
                    typeof other != "function" ||
                    !(funcName in LazyWrapper.prototype)
                  ) {
                    return false;
                  }
                  if (func === other) {
                    return true;
                  }
                  var data = getData(other);
                  return !!data && func === data[0];
                }

                /**
                 * Checks if `func` has its source masked.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                 */
                function isMasked(func) {
                  return !!maskSrcKey && maskSrcKey in func;
                }

                /**
                 * Checks if `func` is capable of being masked.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                 */
                var isMaskable = coreJsData ? isFunction : stubFalse;

                /**
                 * Checks if `value` is likely a prototype object.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                 */
                function isPrototype(value) {
                  var Ctor = value && value.constructor,
                    proto =
                      (typeof Ctor == "function" && Ctor.prototype) ||
                      objectProto;

                  return value === proto;
                }

                /**
                 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` if suitable for strict
                 *  equality comparisons, else `false`.
                 */
                function isStrictComparable(value) {
                  return value === value && !isObject(value);
                }

                /**
                 * A specialized version of `matchesProperty` for source values suitable
                 * for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function matchesStrictComparable(key, srcValue) {
                  return function (object) {
                    if (object == null) {
                      return false;
                    }
                    return (
                      object[key] === srcValue &&
                      (srcValue !== undefined || key in Object(object))
                    );
                  };
                }

                /**
                 * A specialized version of `_.memoize` which clears the memoized function's
                 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                 *
                 * @private
                 * @param {Function} func The function to have its output memoized.
                 * @returns {Function} Returns the new memoized function.
                 */
                function memoizeCapped(func) {
                  var result = memoize(func, function (key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                      cache.clear();
                    }
                    return key;
                  });

                  var cache = result.cache;
                  return result;
                }

                /**
                 * Merges the function metadata of `source` into `data`.
                 *
                 * Merging metadata reduces the number of wrappers used to invoke a function.
                 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                 * may be applied regardless of execution order. Methods like `_.ary` and
                 * `_.rearg` modify function arguments, making the order in which they are
                 * executed important, preventing the merging of metadata. However, we make
                 * an exception for a safe combined case where curried functions have `_.ary`
                 * and or `_.rearg` applied.
                 *
                 * @private
                 * @param {Array} data The destination metadata.
                 * @param {Array} source The source metadata.
                 * @returns {Array} Returns `data`.
                 */
                function mergeData(data, source) {
                  var bitmask = data[1],
                    srcBitmask = source[1],
                    newBitmask = bitmask | srcBitmask,
                    isCommon =
                      newBitmask <
                      (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                  var isCombo =
                    (srcBitmask == WRAP_ARY_FLAG &&
                      bitmask == WRAP_CURRY_FLAG) ||
                    (srcBitmask == WRAP_ARY_FLAG &&
                      bitmask == WRAP_REARG_FLAG &&
                      data[7].length <= source[8]) ||
                    (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                      source[7].length <= source[8] &&
                      bitmask == WRAP_CURRY_FLAG);

                  // Exit early if metadata can't be merged.
                  if (!(isCommon || isCombo)) {
                    return data;
                  }
                  // Use source `thisArg` if available.
                  if (srcBitmask & WRAP_BIND_FLAG) {
                    data[2] = source[2];
                    // Set when currying a bound function.
                    newBitmask |=
                      bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                  }
                  // Compose partial arguments.
                  var value = source[3];
                  if (value) {
                    var partials = data[3];
                    data[3] = partials
                      ? composeArgs(partials, value, source[4])
                      : value;
                    data[4] = partials
                      ? replaceHolders(data[3], PLACEHOLDER)
                      : source[4];
                  }
                  // Compose partial right arguments.
                  value = source[5];
                  if (value) {
                    partials = data[5];
                    data[5] = partials
                      ? composeArgsRight(partials, value, source[6])
                      : value;
                    data[6] = partials
                      ? replaceHolders(data[5], PLACEHOLDER)
                      : source[6];
                  }
                  // Use source `argPos` if available.
                  value = source[7];
                  if (value) {
                    data[7] = value;
                  }
                  // Use source `ary` if it's smaller.
                  if (srcBitmask & WRAP_ARY_FLAG) {
                    data[8] =
                      data[8] == null
                        ? source[8]
                        : nativeMin(data[8], source[8]);
                  }
                  // Use source `arity` if one is not provided.
                  if (data[9] == null) {
                    data[9] = source[9];
                  }
                  // Use source `func` and merge bitmasks.
                  data[0] = source[0];
                  data[1] = newBitmask;

                  return data;
                }

                /**
                 * This function is like
                 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * except that it includes inherited enumerable properties.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function nativeKeysIn(object) {
                  var result = [];
                  if (object != null) {
                    for (var key in Object(object)) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * Converts `value` to a string using `Object.prototype.toString`.
                 *
                 * @private
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 */
                function objectToString(value) {
                  return nativeObjectToString.call(value);
                }

                /**
                 * A specialized version of `baseRest` which transforms the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @param {Function} transform The rest array transform.
                 * @returns {Function} Returns the new function.
                 */
                function overRest(func, start, transform) {
                  start = nativeMax(
                    start === undefined ? func.length - 1 : start,
                    0
                  );
                  return function () {
                    var args = arguments,
                      index = -1,
                      length = nativeMax(args.length - start, 0),
                      array = Array(length);

                    while (++index < length) {
                      array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                      otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                  };
                }

                /**
                 * Gets the parent value at `path` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} path The path to get the parent value of.
                 * @returns {*} Returns the parent value.
                 */
                function parent(object, path) {
                  return path.length < 2
                    ? object
                    : baseGet(object, baseSlice(path, 0, -1));
                }

                /**
                 * Reorder `array` according to the specified indexes where the element at
                 * the first index is assigned as the first element, the element at
                 * the second index is assigned as the second element, and so on.
                 *
                 * @private
                 * @param {Array} array The array to reorder.
                 * @param {Array} indexes The arranged array indexes.
                 * @returns {Array} Returns `array`.
                 */
                function reorder(array, indexes) {
                  var arrLength = array.length,
                    length = nativeMin(indexes.length, arrLength),
                    oldArray = copyArray(array);

                  while (length--) {
                    var index = indexes[length];
                    array[length] = isIndex(index, arrLength)
                      ? oldArray[index]
                      : undefined;
                  }
                  return array;
                }

                /**
                 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function safeGet(object, key) {
                  if (
                    key === "constructor" &&
                    typeof object[key] === "function"
                  ) {
                    return;
                  }

                  if (key == "__proto__") {
                    return;
                  }

                  return object[key];
                }

                /**
                 * Sets metadata for `func`.
                 *
                 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                 * period of time, it will trip its breaker and transition to an identity
                 * function to avoid garbage collection pauses in V8. See
                 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                 * for more details.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var setData = shortOut(baseSetData);

                /**
                 * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                var setTimeout =
                  ctxSetTimeout ||
                  function (func, wait) {
                    return root.setTimeout(func, wait);
                  };

                /**
                 * Sets the `toString` method of `func` to return `string`.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var setToString = shortOut(baseSetToString);

                /**
                 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                 * with wrapper details in a comment at the top of the source body.
                 *
                 * @private
                 * @param {Function} wrapper The function to modify.
                 * @param {Function} reference The reference function.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Function} Returns `wrapper`.
                 */
                function setWrapToString(wrapper, reference, bitmask) {
                  var source = reference + "";
                  return setToString(
                    wrapper,
                    insertWrapDetails(
                      source,
                      updateWrapDetails(getWrapDetails(source), bitmask)
                    )
                  );
                }

                /**
                 * Creates a function that'll short out and invoke `identity` instead
                 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                 * milliseconds.
                 *
                 * @private
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new shortable function.
                 */
                function shortOut(func) {
                  var count = 0,
                    lastCalled = 0;

                  return function () {
                    var stamp = nativeNow(),
                      remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                      if (++count >= HOT_COUNT) {
                        return arguments[0];
                      }
                    } else {
                      count = 0;
                    }
                    return func.apply(undefined, arguments);
                  };
                }

                /**
                 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @param {number} [size=array.length] The size of `array`.
                 * @returns {Array} Returns `array`.
                 */
                function shuffleSelf(array, size) {
                  var index = -1,
                    length = array.length,
                    lastIndex = length - 1;

                  size = size === undefined ? length : size;
                  while (++index < size) {
                    var rand = baseRandom(index, lastIndex),
                      value = array[rand];

                    array[rand] = array[index];
                    array[index] = value;
                  }
                  array.length = size;
                  return array;
                }

                /**
                 * Converts `string` to a property path array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the property path array.
                 */
                var stringToPath = memoizeCapped(function (string) {
                  var result = [];
                  if (string.charCodeAt(0) === 46 /* . */) {
                    result.push("");
                  }
                  string.replace(
                    rePropName,
                    function (match, number, quote, subString) {
                      result.push(
                        quote
                          ? subString.replace(reEscapeChar, "$1")
                          : number || match
                      );
                    }
                  );
                  return result;
                });

                /**
                 * Converts `value` to a string key if it's not a string or symbol.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {string|symbol} Returns the key.
                 */
                function toKey(value) {
                  if (typeof value == "string" || isSymbol(value)) {
                    return value;
                  }
                  var result = value + "";
                  return result == "0" && 1 / value == -INFINITY
                    ? "-0"
                    : result;
                }

                /**
                 * Converts `func` to its source code.
                 *
                 * @private
                 * @param {Function} func The function to convert.
                 * @returns {string} Returns the source code.
                 */
                function toSource(func) {
                  if (func != null) {
                    try {
                      return funcToString.call(func);
                    } catch (e) {}
                    try {
                      return func + "";
                    } catch (e) {}
                  }
                  return "";
                }

                /**
                 * Updates wrapper `details` based on `bitmask` flags.
                 *
                 * @private
                 * @returns {Array} details The details to modify.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Array} Returns `details`.
                 */
                function updateWrapDetails(details, bitmask) {
                  arrayEach(wrapFlags, function (pair) {
                    var value = "_." + pair[0];
                    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                      details.push(value);
                    }
                  });
                  return details.sort();
                }

                /**
                 * Creates a clone of `wrapper`.
                 *
                 * @private
                 * @param {Object} wrapper The wrapper to clone.
                 * @returns {Object} Returns the cloned wrapper.
                 */
                function wrapperClone(wrapper) {
                  if (wrapper instanceof LazyWrapper) {
                    return wrapper.clone();
                  }
                  var result = new LodashWrapper(
                    wrapper.__wrapped__,
                    wrapper.__chain__
                  );
                  result.__actions__ = copyArray(wrapper.__actions__);
                  result.__index__ = wrapper.__index__;
                  result.__values__ = wrapper.__values__;
                  return result;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of elements split into groups the length of `size`.
                 * If `array` can't be split evenly, the final chunk will be the remaining
                 * elements.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to process.
                 * @param {number} [size=1] The length of each chunk
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the new array of chunks.
                 * @example
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 2);
                 * // => [['a', 'b'], ['c', 'd']]
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 3);
                 * // => [['a', 'b', 'c'], ['d']]
                 */
                function chunk(array, size, guard) {
                  if (
                    guard
                      ? isIterateeCall(array, size, guard)
                      : size === undefined
                  ) {
                    size = 1;
                  } else {
                    size = nativeMax(toInteger(size), 0);
                  }
                  var length = array == null ? 0 : array.length;
                  if (!length || size < 1) {
                    return [];
                  }
                  var index = 0,
                    resIndex = 0,
                    result = Array(nativeCeil(length / size));

                  while (index < length) {
                    result[resIndex++] = baseSlice(
                      array,
                      index,
                      (index += size)
                    );
                  }
                  return result;
                }

                /**
                 * Creates an array with all falsey values removed. The values `false`, `null`,
                 * `0`, `""`, `undefined`, and `NaN` are falsey.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to compact.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.compact([0, 1, false, 2, '', 3]);
                 * // => [1, 2, 3]
                 */
                function compact(array) {
                  var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                  while (++index < length) {
                    var value = array[index];
                    if (value) {
                      result[resIndex++] = value;
                    }
                  }
                  return result;
                }

                /**
                 * Creates a new array concatenating `array` with any additional arrays
                 * and/or values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to concatenate.
                 * @param {...*} [values] The values to concatenate.
                 * @returns {Array} Returns the new concatenated array.
                 * @example
                 *
                 * var array = [1];
                 * var other = _.concat(array, 2, [3], [[4]]);
                 *
                 * console.log(other);
                 * // => [1, 2, 3, [4]]
                 *
                 * console.log(array);
                 * // => [1]
                 */
                function concat() {
                  var length = arguments.length;
                  if (!length) {
                    return [];
                  }
                  var args = Array(length - 1),
                    array = arguments[0],
                    index = length;

                  while (index--) {
                    args[index - 1] = arguments[index];
                  }
                  return arrayPush(
                    isArray(array) ? copyArray(array) : [array],
                    baseFlatten(args, 1)
                  );
                }

                /**
                 * Creates an array of `array` values not included in the other given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * **Note:** Unlike `_.pullAll`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.without, _.xor
                 * @example
                 *
                 * _.difference([2, 1], [2, 3]);
                 * // => [1]
                 */
                var difference = baseRest(function (array, values) {
                  return isArrayLikeObject(array)
                    ? baseDifference(
                        array,
                        baseFlatten(values, 1, isArrayLikeObject, true)
                      )
                    : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `iteratee` which
                 * is invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var differenceBy = baseRest(function (array, values) {
                  var iteratee = last(values);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return isArrayLikeObject(array)
                    ? baseDifference(
                        array,
                        baseFlatten(values, 1, isArrayLikeObject, true),
                        getIteratee(iteratee, 2)
                      )
                    : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `comparator`
                 * which is invoked to compare elements of `array` to `values`. The order and
                 * references of result values are determined by the first array. The comparator
                 * is invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 *
                 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }]
                 */
                var differenceWith = baseRest(function (array, values) {
                  var comparator = last(values);
                  if (isArrayLikeObject(comparator)) {
                    comparator = undefined;
                  }
                  return isArrayLikeObject(array)
                    ? baseDifference(
                        array,
                        baseFlatten(values, 1, isArrayLikeObject, true),
                        undefined,
                        comparator
                      )
                    : [];
                });

                /**
                 * Creates a slice of `array` with `n` elements dropped from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.drop([1, 2, 3]);
                 * // => [2, 3]
                 *
                 * _.drop([1, 2, 3], 2);
                 * // => [3]
                 *
                 * _.drop([1, 2, 3], 5);
                 * // => []
                 *
                 * _.drop([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function drop(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = guard || n === undefined ? 1 : toInteger(n);
                  return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with `n` elements dropped from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.dropRight([1, 2, 3]);
                 * // => [1, 2]
                 *
                 * _.dropRight([1, 2, 3], 2);
                 * // => [1]
                 *
                 * _.dropRight([1, 2, 3], 5);
                 * // => []
                 *
                 * _.dropRight([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function dropRight(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = guard || n === undefined ? 1 : toInteger(n);
                  n = length - n;
                  return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the end.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.dropRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropRightWhile(users, ['active', false]);
                 * // => objects for ['barney']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropRightWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropRightWhile(array, predicate) {
                  return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), true, true)
                    : [];
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the beginning.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.dropWhile(users, function(o) { return !o.active; });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropWhile(users, ['active', false]);
                 * // => objects for ['pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropWhile(array, predicate) {
                  return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), true)
                    : [];
                }

                /**
                 * Fills elements of `array` with `value` from `start` up to, but not
                 * including, `end`.
                 *
                 * **Note:** This method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Array
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.fill(array, 'a');
                 * console.log(array);
                 * // => ['a', 'a', 'a']
                 *
                 * _.fill(Array(3), 2);
                 * // => [2, 2, 2]
                 *
                 * _.fill([4, 6, 8, 10], '*', 1, 3);
                 * // => [4, '*', '*', 10]
                 */
                function fill(array, value, start, end) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  if (
                    start &&
                    typeof start != "number" &&
                    isIterateeCall(array, value, start)
                  ) {
                    start = 0;
                    end = length;
                  }
                  return baseFill(array, value, start, end);
                }

                /**
                 * This method is like `_.find` except that it returns the index of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.findIndex(users, function(o) { return o.user == 'barney'; });
                 * // => 0
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findIndex(users, { 'user': 'fred', 'active': false });
                 * // => 1
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findIndex(users, ['active', false]);
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findIndex(users, 'active');
                 * // => 2
                 */
                function findIndex(array, predicate, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = fromIndex == null ? 0 : toInteger(fromIndex);
                  if (index < 0) {
                    index = nativeMax(length + index, 0);
                  }
                  return baseFindIndex(array, getIteratee(predicate, 3), index);
                }

                /**
                 * This method is like `_.findIndex` except that it iterates over elements
                 * of `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                 * // => 2
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                 * // => 0
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastIndex(users, ['active', false]);
                 * // => 2
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastIndex(users, 'active');
                 * // => 0
                 */
                function findLastIndex(array, predicate, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = length - 1;
                  if (fromIndex !== undefined) {
                    index = toInteger(fromIndex);
                    index =
                      fromIndex < 0
                        ? nativeMax(length + index, 0)
                        : nativeMin(index, length - 1);
                  }
                  return baseFindIndex(
                    array,
                    getIteratee(predicate, 3),
                    index,
                    true
                  );
                }

                /**
                 * Flattens `array` a single level deep.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flatten([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, [3, [4]], 5]
                 */
                function flatten(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseFlatten(array, 1) : [];
                }

                /**
                 * Recursively flattens `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flattenDeep([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, 3, 4, 5]
                 */
                function flattenDeep(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseFlatten(array, INFINITY) : [];
                }

                /**
                 * Recursively flatten `array` up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * var array = [1, [2, [3, [4]], 5]];
                 *
                 * _.flattenDepth(array, 1);
                 * // => [1, 2, [3, [4]], 5]
                 *
                 * _.flattenDepth(array, 2);
                 * // => [1, 2, 3, [4], 5]
                 */
                function flattenDepth(array, depth) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  depth = depth === undefined ? 1 : toInteger(depth);
                  return baseFlatten(array, depth);
                }

                /**
                 * The inverse of `_.toPairs`; this method returns an object composed
                 * from key-value `pairs`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} pairs The key-value pairs.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.fromPairs([['a', 1], ['b', 2]]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function fromPairs(pairs) {
                  var index = -1,
                    length = pairs == null ? 0 : pairs.length,
                    result = {};

                  while (++index < length) {
                    var pair = pairs[index];
                    result[pair[0]] = pair[1];
                  }
                  return result;
                }

                /**
                 * Gets the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias first
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the first element of `array`.
                 * @example
                 *
                 * _.head([1, 2, 3]);
                 * // => 1
                 *
                 * _.head([]);
                 * // => undefined
                 */
                function head(array) {
                  return array && array.length ? array[0] : undefined;
                }

                /**
                 * Gets the index at which the first occurrence of `value` is found in `array`
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. If `fromIndex` is negative, it's used as the
                 * offset from the end of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.indexOf([1, 2, 1, 2], 2);
                 * // => 1
                 *
                 * // Search from the `fromIndex`.
                 * _.indexOf([1, 2, 1, 2], 2, 2);
                 * // => 3
                 */
                function indexOf(array, value, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = fromIndex == null ? 0 : toInteger(fromIndex);
                  if (index < 0) {
                    index = nativeMax(length + index, 0);
                  }
                  return baseIndexOf(array, value, index);
                }

                /**
                 * Gets all but the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.initial([1, 2, 3]);
                 * // => [1, 2]
                 */
                function initial(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSlice(array, 0, -1) : [];
                }

                /**
                 * Creates an array of unique values that are included in all given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersection([2, 1], [2, 3]);
                 * // => [2]
                 */
                var intersection = baseRest(function (arrays) {
                  var mapped = arrayMap(arrays, castArrayLikeObject);
                  return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped)
                    : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `iteratee`
                 * which is invoked for each element of each `arrays` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [2.1]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }]
                 */
                var intersectionBy = baseRest(function (arrays) {
                  var iteratee = last(arrays),
                    mapped = arrayMap(arrays, castArrayLikeObject);

                  if (iteratee === last(mapped)) {
                    iteratee = undefined;
                  } else {
                    mapped.pop();
                  }
                  return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped, getIteratee(iteratee, 2))
                    : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `comparator`
                 * which is invoked to compare elements of `arrays`. The order and references
                 * of result values are determined by the first array. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.intersectionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }]
                 */
                var intersectionWith = baseRest(function (arrays) {
                  var comparator = last(arrays),
                    mapped = arrayMap(arrays, castArrayLikeObject);

                  comparator =
                    typeof comparator == "function" ? comparator : undefined;
                  if (comparator) {
                    mapped.pop();
                  }
                  return mapped.length && mapped[0] === arrays[0]
                    ? baseIntersection(mapped, undefined, comparator)
                    : [];
                });

                /**
                 * Converts all elements in `array` into a string separated by `separator`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to convert.
                 * @param {string} [separator=','] The element separator.
                 * @returns {string} Returns the joined string.
                 * @example
                 *
                 * _.join(['a', 'b', 'c'], '~');
                 * // => 'a~b~c'
                 */
                function join(array, separator) {
                  return array == null ? "" : nativeJoin.call(array, separator);
                }

                /**
                 * Gets the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the last element of `array`.
                 * @example
                 *
                 * _.last([1, 2, 3]);
                 * // => 3
                 */
                function last(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? array[length - 1] : undefined;
                }

                /**
                 * This method is like `_.indexOf` except that it iterates over elements of
                 * `array` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.lastIndexOf([1, 2, 1, 2], 2);
                 * // => 3
                 *
                 * // Search from the `fromIndex`.
                 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                 * // => 1
                 */
                function lastIndexOf(array, value, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = length;
                  if (fromIndex !== undefined) {
                    index = toInteger(fromIndex);
                    index =
                      index < 0
                        ? nativeMax(length + index, 0)
                        : nativeMin(index, length - 1);
                  }
                  return value === value
                    ? strictLastIndexOf(array, value, index)
                    : baseFindIndex(array, baseIsNaN, index, true);
                }

                /**
                 * Gets the element at index `n` of `array`. If `n` is negative, the nth
                 * element from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.11.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=0] The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 *
                 * _.nth(array, 1);
                 * // => 'b'
                 *
                 * _.nth(array, -2);
                 * // => 'c';
                 */
                function nth(array, n) {
                  return array && array.length
                    ? baseNth(array, toInteger(n))
                    : undefined;
                }

                /**
                 * Removes all given values from `array` using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                 * to remove elements from an array by predicate.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...*} [values] The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pull(array, 'a', 'c');
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                var pull = baseRest(pullAll);

                /**
                 * This method is like `_.pull` except that it accepts an array of values to remove.
                 *
                 * **Note:** Unlike `_.difference`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pullAll(array, ['a', 'c']);
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                function pullAll(array, values) {
                  return array && array.length && values && values.length
                    ? basePullAll(array, values)
                    : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `iteratee` which is
                 * invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The iteratee is invoked with one argument: (value).
                 *
                 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                 *
                 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                 * console.log(array);
                 * // => [{ 'x': 2 }]
                 */
                function pullAllBy(array, values, iteratee) {
                  return array && array.length && values && values.length
                    ? basePullAll(array, values, getIteratee(iteratee, 2))
                    : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `comparator` which
                 * is invoked to compare elements of `array` to `values`. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                 *
                 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                 * console.log(array);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                 */
                function pullAllWith(array, values, comparator) {
                  return array && array.length && values && values.length
                    ? basePullAll(array, values, undefined, comparator)
                    : array;
                }

                /**
                 * Removes elements from `array` corresponding to `indexes` and returns an
                 * array of removed elements.
                 *
                 * **Note:** Unlike `_.at`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 * var pulled = _.pullAt(array, [1, 3]);
                 *
                 * console.log(array);
                 * // => ['a', 'c']
                 *
                 * console.log(pulled);
                 * // => ['b', 'd']
                 */
                var pullAt = flatRest(function (array, indexes) {
                  var length = array == null ? 0 : array.length,
                    result = baseAt(array, indexes);

                  basePullAt(
                    array,
                    arrayMap(indexes, function (index) {
                      return isIndex(index, length) ? +index : index;
                    }).sort(compareAscending)
                  );

                  return result;
                });

                /**
                 * Removes all elements from `array` that `predicate` returns truthy for
                 * and returns an array of the removed elements. The predicate is invoked
                 * with three arguments: (value, index, array).
                 *
                 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                 * to pull elements from an array by value.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = [1, 2, 3, 4];
                 * var evens = _.remove(array, function(n) {
                 *   return n % 2 == 0;
                 * });
                 *
                 * console.log(array);
                 * // => [1, 3]
                 *
                 * console.log(evens);
                 * // => [2, 4]
                 */
                function remove(array, predicate) {
                  var result = [];
                  if (!(array && array.length)) {
                    return result;
                  }
                  var index = -1,
                    indexes = [],
                    length = array.length;

                  predicate = getIteratee(predicate, 3);
                  while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                      result.push(value);
                      indexes.push(index);
                    }
                  }
                  basePullAt(array, indexes);
                  return result;
                }

                /**
                 * Reverses `array` so that the first element becomes the last, the second
                 * element becomes the second to last, and so on.
                 *
                 * **Note:** This method mutates `array` and is based on
                 * [`Array#reverse`](https://mdn.io/Array/reverse).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.reverse(array);
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function reverse(array) {
                  return array == null ? array : nativeReverse.call(array);
                }

                /**
                 * Creates a slice of `array` from `start` up to, but not including, `end`.
                 *
                 * **Note:** This method is used instead of
                 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                 * returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function slice(array, start, end) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  if (
                    end &&
                    typeof end != "number" &&
                    isIterateeCall(array, start, end)
                  ) {
                    start = 0;
                    end = length;
                  } else {
                    start = start == null ? 0 : toInteger(start);
                    end = end === undefined ? length : toInteger(end);
                  }
                  return baseSlice(array, start, end);
                }

                /**
                 * Uses a binary search to determine the lowest index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedIndex([30, 50], 40);
                 * // => 1
                 */
                function sortedIndex(array, value) {
                  return baseSortedIndex(array, value);
                }

                /**
                 * This method is like `_.sortedIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 0
                 */
                function sortedIndexBy(array, value, iteratee) {
                  return baseSortedIndexBy(
                    array,
                    value,
                    getIteratee(iteratee, 2)
                  );
                }

                /**
                 * This method is like `_.indexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 1
                 */
                function sortedIndexOf(array, value) {
                  var length = array == null ? 0 : array.length;
                  if (length) {
                    var index = baseSortedIndex(array, value);
                    if (index < length && eq(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }

                /**
                 * This method is like `_.sortedIndex` except that it returns the highest
                 * index at which `value` should be inserted into `array` in order to
                 * maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                 * // => 4
                 */
                function sortedLastIndex(array, value) {
                  return baseSortedIndex(array, value, true);
                }

                /**
                 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 1
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 1
                 */
                function sortedLastIndexBy(array, value, iteratee) {
                  return baseSortedIndexBy(
                    array,
                    value,
                    getIteratee(iteratee, 2),
                    true
                  );
                }

                /**
                 * This method is like `_.lastIndexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 3
                 */
                function sortedLastIndexOf(array, value) {
                  var length = array == null ? 0 : array.length;
                  if (length) {
                    var index = baseSortedIndex(array, value, true) - 1;
                    if (eq(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }

                /**
                 * This method is like `_.uniq` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniq([1, 1, 2]);
                 * // => [1, 2]
                 */
                function sortedUniq(array) {
                  return array && array.length ? baseSortedUniq(array) : [];
                }

                /**
                 * This method is like `_.uniqBy` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                 * // => [1.1, 2.3]
                 */
                function sortedUniqBy(array, iteratee) {
                  return array && array.length
                    ? baseSortedUniq(array, getIteratee(iteratee, 2))
                    : [];
                }

                /**
                 * Gets all but the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.tail([1, 2, 3]);
                 * // => [2, 3]
                 */
                function tail(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSlice(array, 1, length) : [];
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.take([1, 2, 3]);
                 * // => [1]
                 *
                 * _.take([1, 2, 3], 2);
                 * // => [1, 2]
                 *
                 * _.take([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.take([1, 2, 3], 0);
                 * // => []
                 */
                function take(array, n, guard) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  n = guard || n === undefined ? 1 : toInteger(n);
                  return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.takeRight([1, 2, 3]);
                 * // => [3]
                 *
                 * _.takeRight([1, 2, 3], 2);
                 * // => [2, 3]
                 *
                 * _.takeRight([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.takeRight([1, 2, 3], 0);
                 * // => []
                 */
                function takeRight(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = guard || n === undefined ? 1 : toInteger(n);
                  n = length - n;
                  return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with elements taken from the end. Elements are
                 * taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.takeRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeRightWhile(users, ['active', false]);
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeRightWhile(users, 'active');
                 * // => []
                 */
                function takeRightWhile(array, predicate) {
                  return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3), false, true)
                    : [];
                }

                /**
                 * Creates a slice of `array` with elements taken from the beginning. Elements
                 * are taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.takeWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeWhile(users, ['active', false]);
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeWhile(users, 'active');
                 * // => []
                 */
                function takeWhile(array, predicate) {
                  return array && array.length
                    ? baseWhile(array, getIteratee(predicate, 3))
                    : [];
                }

                /**
                 * Creates an array of unique values, in order, from all given arrays using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.union([2], [1, 2]);
                 * // => [2, 1]
                 */
                var union = baseRest(function (arrays) {
                  return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true)
                  );
                });

                /**
                 * This method is like `_.union` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which uniqueness is computed. Result values are chosen from the first
                 * array in which the value occurs. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                var unionBy = baseRest(function (arrays) {
                  var iteratee = last(arrays);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true),
                    getIteratee(iteratee, 2)
                  );
                });

                /**
                 * This method is like `_.union` except that it accepts `comparator` which
                 * is invoked to compare elements of `arrays`. Result values are chosen from
                 * the first array in which the value occurs. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.unionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var unionWith = baseRest(function (arrays) {
                  var comparator = last(arrays);
                  comparator =
                    typeof comparator == "function" ? comparator : undefined;
                  return baseUniq(
                    baseFlatten(arrays, 1, isArrayLikeObject, true),
                    undefined,
                    comparator
                  );
                });

                /**
                 * Creates a duplicate-free version of an array, using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons, in which only the first occurrence of each element
                 * is kept. The order of result values is determined by the order they occur
                 * in the array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniq([2, 1, 2]);
                 * // => [2, 1]
                 */
                function uniq(array) {
                  return array && array.length ? baseUniq(array) : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * uniqueness is computed. The order of result values is determined by the
                 * order they occur in the array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                function uniqBy(array, iteratee) {
                  return array && array.length
                    ? baseUniq(array, getIteratee(iteratee, 2))
                    : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `comparator` which
                 * is invoked to compare elements of `array`. The order of result values is
                 * determined by the order they occur in the array.The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.uniqWith(objects, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                 */
                function uniqWith(array, comparator) {
                  comparator =
                    typeof comparator == "function" ? comparator : undefined;
                  return array && array.length
                    ? baseUniq(array, undefined, comparator)
                    : [];
                }

                /**
                 * This method is like `_.zip` except that it accepts an array of grouped
                 * elements and creates an array regrouping the elements to their pre-zip
                 * configuration.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.2.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 *
                 * _.unzip(zipped);
                 * // => [['a', 'b'], [1, 2], [true, false]]
                 */
                function unzip(array) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  var length = 0;
                  array = arrayFilter(array, function (group) {
                    if (isArrayLikeObject(group)) {
                      length = nativeMax(group.length, length);
                      return true;
                    }
                  });
                  return baseTimes(length, function (index) {
                    return arrayMap(array, baseProperty(index));
                  });
                }

                /**
                 * This method is like `_.unzip` except that it accepts `iteratee` to specify
                 * how regrouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  regrouped values.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                 * // => [[1, 10, 100], [2, 20, 200]]
                 *
                 * _.unzipWith(zipped, _.add);
                 * // => [3, 30, 300]
                 */
                function unzipWith(array, iteratee) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  var result = unzip(array);
                  if (iteratee == null) {
                    return result;
                  }
                  return arrayMap(result, function (group) {
                    return apply(iteratee, undefined, group);
                  });
                }

                /**
                 * Creates an array excluding all given values using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.pull`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...*} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.xor
                 * @example
                 *
                 * _.without([2, 1, 2, 3], 1, 2);
                 * // => [3]
                 */
                var without = baseRest(function (array, values) {
                  return isArrayLikeObject(array)
                    ? baseDifference(array, values)
                    : [];
                });

                /**
                 * Creates an array of unique values that is the
                 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                 * of the given arrays. The order of result values is determined by the order
                 * they occur in the arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.without
                 * @example
                 *
                 * _.xor([2, 1], [2, 3]);
                 * // => [1, 3]
                 */
                var xor = baseRest(function (arrays) {
                  return baseXor(arrayFilter(arrays, isArrayLikeObject));
                });

                /**
                 * This method is like `_.xor` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which by which they're compared. The order of result values is determined
                 * by the order they occur in the arrays. The iteratee is invoked with one
                 * argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2, 3.4]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var xorBy = baseRest(function (arrays) {
                  var iteratee = last(arrays);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return baseXor(
                    arrayFilter(arrays, isArrayLikeObject),
                    getIteratee(iteratee, 2)
                  );
                });

                /**
                 * This method is like `_.xor` except that it accepts `comparator` which is
                 * invoked to compare elements of `arrays`. The order of result values is
                 * determined by the order they occur in the arrays. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.xorWith(objects, others, _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var xorWith = baseRest(function (arrays) {
                  var comparator = last(arrays);
                  comparator =
                    typeof comparator == "function" ? comparator : undefined;
                  return baseXor(
                    arrayFilter(arrays, isArrayLikeObject),
                    undefined,
                    comparator
                  );
                });

                /**
                 * Creates an array of grouped elements, the first of which contains the
                 * first elements of the given arrays, the second of which contains the
                 * second elements of the given arrays, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 */
                var zip = baseRest(unzip);

                /**
                 * This method is like `_.fromPairs` except that it accepts two arrays,
                 * one of property identifiers and one of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.4.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObject(['a', 'b'], [1, 2]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function zipObject(props, values) {
                  return baseZipObject(props || [], values || [], assignValue);
                }

                /**
                 * This method is like `_.zipObject` except that it supports property paths.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                 */
                function zipObjectDeep(props, values) {
                  return baseZipObject(props || [], values || [], baseSet);
                }

                /**
                 * This method is like `_.zip` except that it accepts `iteratee` to specify
                 * how grouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  grouped values.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
                 *   return a + b + c;
                 * });
                 * // => [111, 222]
                 */
                var zipWith = baseRest(function (arrays) {
                  var length = arrays.length,
                    iteratee = length > 1 ? arrays[length - 1] : undefined;

                  iteratee =
                    typeof iteratee == "function"
                      ? (arrays.pop(), iteratee)
                      : undefined;
                  return unzipWith(arrays, iteratee);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                 * chain sequences enabled. The result of such sequences must be unwrapped
                 * with `_#value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Seq
                 * @param {*} value The value to wrap.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36 },
                 *   { 'user': 'fred',    'age': 40 },
                 *   { 'user': 'pebbles', 'age': 1 }
                 * ];
                 *
                 * var youngest = _
                 *   .chain(users)
                 *   .sortBy('age')
                 *   .map(function(o) {
                 *     return o.user + ' is ' + o.age;
                 *   })
                 *   .head()
                 *   .value();
                 * // => 'pebbles is 1'
                 */
                function chain(value) {
                  var result = lodash(value);
                  result.__chain__ = true;
                  return result;
                }

                /**
                 * This method invokes `interceptor` and returns `value`. The interceptor
                 * is invoked with one argument; (value). The purpose of this method is to
                 * "tap into" a method chain sequence in order to modify intermediate results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * _([1, 2, 3])
                 *  .tap(function(array) {
                 *    // Mutate input array.
                 *    array.pop();
                 *  })
                 *  .reverse()
                 *  .value();
                 * // => [2, 1]
                 */
                function tap(value, interceptor) {
                  interceptor(value);
                  return value;
                }

                /**
                 * This method is like `_.tap` except that it returns the result of `interceptor`.
                 * The purpose of this method is to "pass thru" values replacing intermediate
                 * results in a method chain sequence.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns the result of `interceptor`.
                 * @example
                 *
                 * _('  abc  ')
                 *  .chain()
                 *  .trim()
                 *  .thru(function(value) {
                 *    return [value];
                 *  })
                 *  .value();
                 * // => ['abc']
                 */
                function thru(value, interceptor) {
                  return interceptor(value);
                }

                /**
                 * This method is the wrapper version of `_.at`.
                 *
                 * @name at
                 * @memberOf _
                 * @since 1.0.0
                 * @category Seq
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _(object).at(['a[0].b.c', 'a[1]']).value();
                 * // => [3, 4]
                 */
                var wrapperAt = flatRest(function (paths) {
                  var length = paths.length,
                    start = length ? paths[0] : 0,
                    value = this.__wrapped__,
                    interceptor = function (object) {
                      return baseAt(object, paths);
                    };

                  if (
                    length > 1 ||
                    this.__actions__.length ||
                    !(value instanceof LazyWrapper) ||
                    !isIndex(start)
                  ) {
                    return this.thru(interceptor);
                  }
                  value = value.slice(start, +start + (length ? 1 : 0));
                  value.__actions__.push({
                    func: thru,
                    args: [interceptor],
                    thisArg: undefined,
                  });
                  return new LodashWrapper(value, this.__chain__).thru(
                    function (array) {
                      if (length && !array.length) {
                        array.push(undefined);
                      }
                      return array;
                    }
                  );
                });

                /**
                 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                 *
                 * @name chain
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 40 }
                 * ];
                 *
                 * // A sequence without explicit chaining.
                 * _(users).head();
                 * // => { 'user': 'barney', 'age': 36 }
                 *
                 * // A sequence with explicit chaining.
                 * _(users)
                 *   .chain()
                 *   .head()
                 *   .pick('user')
                 *   .value();
                 * // => { 'user': 'barney' }
                 */
                function wrapperChain() {
                  return chain(this);
                }

                /**
                 * Executes the chain sequence and returns the wrapped result.
                 *
                 * @name commit
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2];
                 * var wrapped = _(array).push(3);
                 *
                 * console.log(array);
                 * // => [1, 2]
                 *
                 * wrapped = wrapped.commit();
                 * console.log(array);
                 * // => [1, 2, 3]
                 *
                 * wrapped.last();
                 * // => 3
                 *
                 * console.log(array);
                 * // => [1, 2, 3]
                 */
                function wrapperCommit() {
                  return new LodashWrapper(this.value(), this.__chain__);
                }

                /**
                 * Gets the next value on a wrapped object following the
                 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                 *
                 * @name next
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the next iterator value.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 1 }
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 2 }
                 *
                 * wrapped.next();
                 * // => { 'done': true, 'value': undefined }
                 */
                function wrapperNext() {
                  if (this.__values__ === undefined) {
                    this.__values__ = toArray(this.value());
                  }
                  var done = this.__index__ >= this.__values__.length,
                    value = done
                      ? undefined
                      : this.__values__[this.__index__++];

                  return { done: done, value: value };
                }

                /**
                 * Enables the wrapper to be iterable.
                 *
                 * @name Symbol.iterator
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the wrapper object.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped[Symbol.iterator]() === wrapped;
                 * // => true
                 *
                 * Array.from(wrapped);
                 * // => [1, 2]
                 */
                function wrapperToIterator() {
                  return this;
                }

                /**
                 * Creates a clone of the chain sequence planting `value` as the wrapped value.
                 *
                 * @name plant
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @param {*} value The value to plant.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var wrapped = _([1, 2]).map(square);
                 * var other = wrapped.plant([3, 4]);
                 *
                 * other.value();
                 * // => [9, 16]
                 *
                 * wrapped.value();
                 * // => [1, 4]
                 */
                function wrapperPlant(value) {
                  var result,
                    parent = this;

                  while (parent instanceof baseLodash) {
                    var clone = wrapperClone(parent);
                    clone.__index__ = 0;
                    clone.__values__ = undefined;
                    if (result) {
                      previous.__wrapped__ = clone;
                    } else {
                      result = clone;
                    }
                    var previous = clone;
                    parent = parent.__wrapped__;
                  }
                  previous.__wrapped__ = value;
                  return result;
                }

                /**
                 * This method is the wrapper version of `_.reverse`.
                 *
                 * **Note:** This method mutates the wrapped array.
                 *
                 * @name reverse
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _(array).reverse().value()
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function wrapperReverse() {
                  var value = this.__wrapped__;
                  if (value instanceof LazyWrapper) {
                    var wrapped = value;
                    if (this.__actions__.length) {
                      wrapped = new LazyWrapper(this);
                    }
                    wrapped = wrapped.reverse();
                    wrapped.__actions__.push({
                      func: thru,
                      args: [reverse],
                      thisArg: undefined,
                    });
                    return new LodashWrapper(wrapped, this.__chain__);
                  }
                  return this.thru(reverse);
                }

                /**
                 * Executes the chain sequence to resolve the unwrapped value.
                 *
                 * @name value
                 * @memberOf _
                 * @since 0.1.0
                 * @alias toJSON, valueOf
                 * @category Seq
                 * @returns {*} Returns the resolved unwrapped value.
                 * @example
                 *
                 * _([1, 2, 3]).value();
                 * // => [1, 2, 3]
                 */
                function wrapperValue() {
                  return baseWrapperValue(this.__wrapped__, this.__actions__);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the number of times the key was returned by `iteratee`. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.countBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': 1, '6': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.countBy(['one', 'two', 'three'], 'length');
                 * // => { '3': 2, '5': 1 }
                 */
                var countBy = createAggregator(function (result, value, key) {
                  if (hasOwnProperty.call(result, key)) {
                    ++result[key];
                  } else {
                    baseAssignValue(result, key, 1);
                  }
                });

                /**
                 * Checks if `predicate` returns truthy for **all** elements of `collection`.
                 * Iteration is stopped once `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * **Note:** This method returns `true` for
                 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                 * elements of empty collections.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.every([true, 1, null, 'yes'], Boolean);
                 * // => false
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.every(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.every(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.every(users, 'active');
                 * // => false
                 */
                function every(collection, predicate, guard) {
                  var func = isArray(collection) ? arrayEvery : baseEvery;
                  if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined;
                  }
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning an array of all elements
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * **Note:** Unlike `_.remove`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.reject
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * _.filter(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, { 'age': 36, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.filter(users, 'active');
                 * // => objects for ['barney']
                 *
                 * // Combining several predicates using `_.overEvery` or `_.overSome`.
                 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
                 * // => objects for ['fred', 'barney']
                 */
                function filter(collection, predicate) {
                  var func = isArray(collection) ? arrayFilter : baseFilter;
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning the first element
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': true },
                 *   { 'user': 'fred',    'age': 40, 'active': false },
                 *   { 'user': 'pebbles', 'age': 1,  'active': true }
                 * ];
                 *
                 * _.find(users, function(o) { return o.age < 40; });
                 * // => object for 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.find(users, { 'age': 1, 'active': true });
                 * // => object for 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.find(users, ['active', false]);
                 * // => object for 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.find(users, 'active');
                 * // => object for 'barney'
                 */
                var find = createFind(findIndex);

                /**
                 * This method is like `_.find` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=collection.length-1] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * _.findLast([1, 2, 3, 4], function(n) {
                 *   return n % 2 == 1;
                 * });
                 * // => 3
                 */
                var findLast = createFind(findLastIndex);

                /**
                 * Creates a flattened array of values by running each element in `collection`
                 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                 * with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [n, n];
                 * }
                 *
                 * _.flatMap([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMap(collection, iteratee) {
                  return baseFlatten(map(collection, iteratee), 1);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [[[n, n]]];
                 * }
                 *
                 * _.flatMapDeep([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMapDeep(collection, iteratee) {
                  return baseFlatten(map(collection, iteratee), INFINITY);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [[[n, n]]];
                 * }
                 *
                 * _.flatMapDepth([1, 2], duplicate, 2);
                 * // => [[1, 1], [2, 2]]
                 */
                function flatMapDepth(collection, iteratee, depth) {
                  depth = depth === undefined ? 1 : toInteger(depth);
                  return baseFlatten(map(collection, iteratee), depth);
                }

                /**
                 * Iterates over elements of `collection` and invokes `iteratee` for each element.
                 * The iteratee is invoked with three arguments: (value, index|key, collection).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * **Note:** As with other "Collections" methods, objects with a "length"
                 * property are iterated like arrays. To avoid this behavior use `_.forIn`
                 * or `_.forOwn` for object iteration.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias each
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEachRight
                 * @example
                 *
                 * _.forEach([1, 2], function(value) {
                 *   console.log(value);
                 * });
                 * // => Logs `1` then `2`.
                 *
                 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forEach(collection, iteratee) {
                  var func = isArray(collection) ? arrayEach : baseEach;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forEach` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @alias eachRight
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEach
                 * @example
                 *
                 * _.forEachRight([1, 2], function(value) {
                 *   console.log(value);
                 * });
                 * // => Logs `2` then `1`.
                 */
                function forEachRight(collection, iteratee) {
                  var func = isArray(collection)
                    ? arrayEachRight
                    : baseEachRight;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The order of grouped values
                 * is determined by the order they occur in `collection`. The corresponding
                 * value of each key is an array of elements responsible for generating the
                 * key. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': [4.2], '6': [6.1, 6.3] }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.groupBy(['one', 'two', 'three'], 'length');
                 * // => { '3': ['one', 'two'], '5': ['three'] }
                 */
                var groupBy = createAggregator(function (result, value, key) {
                  if (hasOwnProperty.call(result, key)) {
                    result[key].push(value);
                  } else {
                    baseAssignValue(result, key, [value]);
                  }
                });

                /**
                 * Checks if `value` is in `collection`. If `collection` is a string, it's
                 * checked for a substring of `value`, otherwise
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * is used for equality comparisons. If `fromIndex` is negative, it's used as
                 * the offset from the end of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {boolean} Returns `true` if `value` is found, else `false`.
                 * @example
                 *
                 * _.includes([1, 2, 3], 1);
                 * // => true
                 *
                 * _.includes([1, 2, 3], 1, 2);
                 * // => false
                 *
                 * _.includes({ 'a': 1, 'b': 2 }, 1);
                 * // => true
                 *
                 * _.includes('abcd', 'bc');
                 * // => true
                 */
                function includes(collection, value, fromIndex, guard) {
                  collection = isArrayLike(collection)
                    ? collection
                    : values(collection);
                  fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

                  var length = collection.length;
                  if (fromIndex < 0) {
                    fromIndex = nativeMax(length + fromIndex, 0);
                  }
                  return isString(collection)
                    ? fromIndex <= length &&
                        collection.indexOf(value, fromIndex) > -1
                    : !!length &&
                        baseIndexOf(collection, value, fromIndex) > -1;
                }

                /**
                 * Invokes the method at `path` of each element in `collection`, returning
                 * an array of the results of each invoked method. Any additional arguments
                 * are provided to each invoked method. If `path` is a function, it's invoked
                 * for, and `this` bound to, each element in `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array|Function|string} path The path of the method to invoke or
                 *  the function invoked per iteration.
                 * @param {...*} [args] The arguments to invoke each method with.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                 * // => [[1, 5, 7], [1, 2, 3]]
                 *
                 * _.invokeMap([123, 456], String.prototype.split, '');
                 * // => [['1', '2', '3'], ['4', '5', '6']]
                 */
                var invokeMap = baseRest(function (collection, path, args) {
                  var index = -1,
                    isFunc = typeof path == "function",
                    result = isArrayLike(collection)
                      ? Array(collection.length)
                      : [];

                  baseEach(collection, function (value) {
                    result[++index] = isFunc
                      ? apply(path, value, args)
                      : baseInvoke(value, path, args);
                  });
                  return result;
                });

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the last element responsible for generating the key. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * var array = [
                 *   { 'dir': 'left', 'code': 97 },
                 *   { 'dir': 'right', 'code': 100 }
                 * ];
                 *
                 * _.keyBy(array, function(o) {
                 *   return String.fromCharCode(o.code);
                 * });
                 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                 *
                 * _.keyBy(array, 'dir');
                 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                 */
                var keyBy = createAggregator(function (result, value, key) {
                  baseAssignValue(result, key, value);
                });

                /**
                 * Creates an array of values by running each element in `collection` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                 *
                 * The guarded methods are:
                 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * _.map([4, 8], square);
                 * // => [16, 64]
                 *
                 * _.map({ 'a': 4, 'b': 8 }, square);
                 * // => [16, 64] (iteration order is not guaranteed)
                 *
                 * var users = [
                 *   { 'user': 'barney' },
                 *   { 'user': 'fred' }
                 * ];
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, 'user');
                 * // => ['barney', 'fred']
                 */
                function map(collection, iteratee) {
                  var func = isArray(collection) ? arrayMap : baseMap;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.sortBy` except that it allows specifying the sort
                 * orders of the iteratees to sort by. If `orders` is unspecified, all values
                 * are sorted in ascending order. Otherwise, specify an order of "desc" for
                 * descending or "asc" for ascending sort order of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @param {string[]} [orders] The sort orders of `iteratees`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 34 },
                 *   { 'user': 'fred',   'age': 40 },
                 *   { 'user': 'barney', 'age': 36 }
                 * ];
                 *
                 * // Sort by `user` in ascending order and by `age` in descending order.
                 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                 */
                function orderBy(collection, iteratees, orders, guard) {
                  if (collection == null) {
                    return [];
                  }
                  if (!isArray(iteratees)) {
                    iteratees = iteratees == null ? [] : [iteratees];
                  }
                  orders = guard ? undefined : orders;
                  if (!isArray(orders)) {
                    orders = orders == null ? [] : [orders];
                  }
                  return baseOrderBy(collection, iteratees, orders);
                }

                /**
                 * Creates an array of elements split into two groups, the first of which
                 * contains elements `predicate` returns truthy for, the second of which
                 * contains elements `predicate` returns falsey for. The predicate is
                 * invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of grouped elements.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': false },
                 *   { 'user': 'fred',    'age': 40, 'active': true },
                 *   { 'user': 'pebbles', 'age': 1,  'active': false }
                 * ];
                 *
                 * _.partition(users, function(o) { return o.active; });
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.partition(users, { 'age': 1, 'active': false });
                 * // => objects for [['pebbles'], ['barney', 'fred']]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.partition(users, ['active', false]);
                 * // => objects for [['barney', 'pebbles'], ['fred']]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.partition(users, 'active');
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 */
                var partition = createAggregator(
                  function (result, value, key) {
                    result[key ? 0 : 1].push(value);
                  },
                  function () {
                    return [[], []];
                  }
                );

                /**
                 * Reduces `collection` to a value which is the accumulated result of running
                 * each element in `collection` thru `iteratee`, where each successive
                 * invocation is supplied the return value of the previous. If `accumulator`
                 * is not given, the first element of `collection` is used as the initial
                 * value. The iteratee is invoked with four arguments:
                 * (accumulator, value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.reduce`, `_.reduceRight`, and `_.transform`.
                 *
                 * The guarded methods are:
                 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                 * and `sortBy`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduceRight
                 * @example
                 *
                 * _.reduce([1, 2], function(sum, n) {
                 *   return sum + n;
                 * }, 0);
                 * // => 3
                 *
                 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                 *   (result[value] || (result[value] = [])).push(key);
                 *   return result;
                 * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                 */
                function reduce(collection, iteratee, accumulator) {
                  var func = isArray(collection) ? arrayReduce : baseReduce,
                    initAccum = arguments.length < 3;

                  return func(
                    collection,
                    getIteratee(iteratee, 4),
                    accumulator,
                    initAccum,
                    baseEach
                  );
                }

                /**
                 * This method is like `_.reduce` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduce
                 * @example
                 *
                 * var array = [[0, 1], [2, 3], [4, 5]];
                 *
                 * _.reduceRight(array, function(flattened, other) {
                 *   return flattened.concat(other);
                 * }, []);
                 * // => [4, 5, 2, 3, 0, 1]
                 */
                function reduceRight(collection, iteratee, accumulator) {
                  var func = isArray(collection)
                      ? arrayReduceRight
                      : baseReduce,
                    initAccum = arguments.length < 3;

                  return func(
                    collection,
                    getIteratee(iteratee, 4),
                    accumulator,
                    initAccum,
                    baseEachRight
                  );
                }

                /**
                 * The opposite of `_.filter`; this method returns the elements of `collection`
                 * that `predicate` does **not** return truthy for.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.filter
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': true }
                 * ];
                 *
                 * _.reject(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.reject(users, { 'age': 40, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.reject(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.reject(users, 'active');
                 * // => objects for ['barney']
                 */
                function reject(collection, predicate) {
                  var func = isArray(collection) ? arrayFilter : baseFilter;
                  return func(collection, negate(getIteratee(predicate, 3)));
                }

                /**
                 * Gets a random element from `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 * @example
                 *
                 * _.sample([1, 2, 3, 4]);
                 * // => 2
                 */
                function sample(collection) {
                  var func = isArray(collection) ? arraySample : baseSample;
                  return func(collection);
                }

                /**
                 * Gets `n` random elements at unique keys from `collection` up to the
                 * size of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} [n=1] The number of elements to sample.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the random elements.
                 * @example
                 *
                 * _.sampleSize([1, 2, 3], 2);
                 * // => [3, 1]
                 *
                 * _.sampleSize([1, 2, 3], 4);
                 * // => [2, 3, 1]
                 */
                function sampleSize(collection, n, guard) {
                  if (
                    guard
                      ? isIterateeCall(collection, n, guard)
                      : n === undefined
                  ) {
                    n = 1;
                  } else {
                    n = toInteger(n);
                  }
                  var func = isArray(collection)
                    ? arraySampleSize
                    : baseSampleSize;
                  return func(collection, n);
                }

                /**
                 * Creates an array of shuffled values, using a version of the
                 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 * @example
                 *
                 * _.shuffle([1, 2, 3, 4]);
                 * // => [4, 1, 3, 2]
                 */
                function shuffle(collection) {
                  var func = isArray(collection) ? arrayShuffle : baseShuffle;
                  return func(collection);
                }

                /**
                 * Gets the size of `collection` by returning its length for array-like
                 * values or the number of own enumerable string keyed properties for objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @returns {number} Returns the collection size.
                 * @example
                 *
                 * _.size([1, 2, 3]);
                 * // => 3
                 *
                 * _.size({ 'a': 1, 'b': 2 });
                 * // => 2
                 *
                 * _.size('pebbles');
                 * // => 7
                 */
                function size(collection) {
                  if (collection == null) {
                    return 0;
                  }
                  if (isArrayLike(collection)) {
                    return isString(collection)
                      ? stringSize(collection)
                      : collection.length;
                  }
                  var tag = getTag(collection);
                  if (tag == mapTag || tag == setTag) {
                    return collection.size;
                  }
                  return baseKeys(collection).length;
                }

                /**
                 * Checks if `predicate` returns truthy for **any** element of `collection`.
                 * Iteration is stopped once `predicate` returns truthy. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.some([null, 0, 'yes', false], Boolean);
                 * // => true
                 *
                 * var users = [
                 *   { 'user': 'barney', 'active': true },
                 *   { 'user': 'fred',   'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.some(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.some(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.some(users, 'active');
                 * // => true
                 */
                function some(collection, predicate, guard) {
                  var func = isArray(collection) ? arraySome : baseSome;
                  if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined;
                  }
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Creates an array of elements, sorted in ascending order by the results of
                 * running each element in a collection thru each iteratee. This method
                 * performs a stable sort, that is, it preserves the original sort order of
                 * equal elements. The iteratees are invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 30 },
                 *   { 'user': 'barney', 'age': 34 }
                 * ];
                 *
                 * _.sortBy(users, [function(o) { return o.user; }]);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
                 *
                 * _.sortBy(users, ['user', 'age']);
                 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
                 */
                var sortBy = baseRest(function (collection, iteratees) {
                  if (collection == null) {
                    return [];
                  }
                  var length = iteratees.length;
                  if (
                    length > 1 &&
                    isIterateeCall(collection, iteratees[0], iteratees[1])
                  ) {
                    iteratees = [];
                  } else if (
                    length > 2 &&
                    isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
                  ) {
                    iteratees = [iteratees[0]];
                  }
                  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Gets the timestamp of the number of milliseconds that have elapsed since
                 * the Unix epoch (1 January 1970 00:00:00 UTC).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Date
                 * @returns {number} Returns the timestamp.
                 * @example
                 *
                 * _.defer(function(stamp) {
                 *   console.log(_.now() - stamp);
                 * }, _.now());
                 * // => Logs the number of milliseconds it took for the deferred invocation.
                 */
                var now =
                  ctxNow ||
                  function () {
                    return root.Date.now();
                  };

                /*------------------------------------------------------------------------*/

                /**
                 * The opposite of `_.before`; this method creates a function that invokes
                 * `func` once it's called `n` or more times.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {number} n The number of calls before `func` is invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var saves = ['profile', 'settings'];
                 *
                 * var done = _.after(saves.length, function() {
                 *   console.log('done saving!');
                 * });
                 *
                 * _.forEach(saves, function(type) {
                 *   asyncSave({ 'type': type, 'complete': done });
                 * });
                 * // => Logs 'done saving!' after the two async saves have completed.
                 */
                function after(n, func) {
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  n = toInteger(n);
                  return function () {
                    if (--n < 1) {
                      return func.apply(this, arguments);
                    }
                  };
                }

                /**
                 * Creates a function that invokes `func`, with up to `n` arguments,
                 * ignoring any additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @param {number} [n=func.length] The arity cap.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                 * // => [6, 8, 10]
                 */
                function ary(func, n, guard) {
                  n = guard ? undefined : n;
                  n = func && n == null ? func.length : n;
                  return createWrap(
                    func,
                    WRAP_ARY_FLAG,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    n
                  );
                }

                /**
                 * Creates a function that invokes `func`, with the `this` binding and arguments
                 * of the created function, while it's called less than `n` times. Subsequent
                 * calls to the created function return the result of the last `func` invocation.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {number} n The number of calls at which `func` is no longer invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * jQuery(element).on('click', _.before(5, addContactToList));
                 * // => Allows adding up to 4 contacts to the list.
                 */
                function before(n, func) {
                  var result;
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  n = toInteger(n);
                  return function () {
                    if (--n > 0) {
                      result = func.apply(this, arguments);
                    }
                    if (n <= 1) {
                      func = undefined;
                    }
                    return result;
                  };
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of `thisArg`
                 * and `partials` prepended to the arguments it receives.
                 *
                 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                 * property of bound functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to bind.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * function greet(greeting, punctuation) {
                 *   return greeting + ' ' + this.user + punctuation;
                 * }
                 *
                 * var object = { 'user': 'fred' };
                 *
                 * var bound = _.bind(greet, object, 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bind(greet, object, _, '!');
                 * bound('hi');
                 * // => 'hi fred!'
                 */
                var bind = baseRest(function (func, thisArg, partials) {
                  var bitmask = WRAP_BIND_FLAG;
                  if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bind));
                    bitmask |= WRAP_PARTIAL_FLAG;
                  }
                  return createWrap(func, bitmask, thisArg, partials, holders);
                });

                /**
                 * Creates a function that invokes the method at `object[key]` with `partials`
                 * prepended to the arguments it receives.
                 *
                 * This method differs from `_.bind` by allowing bound functions to reference
                 * methods that may be redefined or don't yet exist. See
                 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                 * for more details.
                 *
                 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Function
                 * @param {Object} object The object to invoke the method on.
                 * @param {string} key The key of the method.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * var object = {
                 *   'user': 'fred',
                 *   'greet': function(greeting, punctuation) {
                 *     return greeting + ' ' + this.user + punctuation;
                 *   }
                 * };
                 *
                 * var bound = _.bindKey(object, 'greet', 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * object.greet = function(greeting, punctuation) {
                 *   return greeting + 'ya ' + this.user + punctuation;
                 * };
                 *
                 * bound('!');
                 * // => 'hiya fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bindKey(object, 'greet', _, '!');
                 * bound('hi');
                 * // => 'hiya fred!'
                 */
                var bindKey = baseRest(function (object, key, partials) {
                  var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                  if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bindKey));
                    bitmask |= WRAP_PARTIAL_FLAG;
                  }
                  return createWrap(key, bitmask, object, partials, holders);
                });

                /**
                 * Creates a function that accepts arguments of `func` and either invokes
                 * `func` returning its result, if at least `arity` number of arguments have
                 * been provided, or returns a function that accepts the remaining `func`
                 * arguments, and so on. The arity of `func` may be specified if `func.length`
                 * is not sufficient.
                 *
                 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
                 *   return [a, b, c];
                 * };
                 *
                 * var curried = _.curry(abc);
                 *
                 * curried(1)(2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(1)(_, 3)(2);
                 * // => [1, 2, 3]
                 */
                function curry(func, arity, guard) {
                  arity = guard ? undefined : arity;
                  var result = createWrap(
                    func,
                    WRAP_CURRY_FLAG,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    arity
                  );
                  result.placeholder = curry.placeholder;
                  return result;
                }

                /**
                 * This method is like `_.curry` except that arguments are applied to `func`
                 * in the manner of `_.partialRight` instead of `_.partial`.
                 *
                 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
                 *   return [a, b, c];
                 * };
                 *
                 * var curried = _.curryRight(abc);
                 *
                 * curried(3)(2)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(2, 3)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(3)(1, _)(2);
                 * // => [1, 2, 3]
                 */
                function curryRight(func, arity, guard) {
                  arity = guard ? undefined : arity;
                  var result = createWrap(
                    func,
                    WRAP_CURRY_RIGHT_FLAG,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    arity
                  );
                  result.placeholder = curryRight.placeholder;
                  return result;
                }

                /**
                 * Creates a debounced function that delays invoking `func` until after `wait`
                 * milliseconds have elapsed since the last time the debounced function was
                 * invoked. The debounced function comes with a `cancel` method to cancel
                 * delayed `func` invocations and a `flush` method to immediately invoke them.
                 * Provide `options` to indicate whether `func` should be invoked on the
                 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                 * with the last arguments provided to the debounced function. Subsequent
                 * calls to the debounced function return the result of the last `func`
                 * invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the debounced function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.debounce` and `_.throttle`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to debounce.
                 * @param {number} [wait=0] The number of milliseconds to delay.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=false]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {number} [options.maxWait]
                 *  The maximum time `func` is allowed to be delayed before it's invoked.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new debounced function.
                 * @example
                 *
                 * // Avoid costly calculations while the window size is in flux.
                 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                 *
                 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                 * jQuery(element).on('click', _.debounce(sendMail, 300, {
                 *   'leading': true,
                 *   'trailing': false
                 * }));
                 *
                 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                 * var source = new EventSource('/stream');
                 * jQuery(source).on('message', debounced);
                 *
                 * // Cancel the trailing debounced invocation.
                 * jQuery(window).on('popstate', debounced.cancel);
                 */
                function debounce(func, wait, options) {
                  var lastArgs,
                    lastThis,
                    maxWait,
                    result,
                    timerId,
                    lastCallTime,
                    lastInvokeTime = 0,
                    leading = false,
                    maxing = false,
                    trailing = true;

                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  wait = toNumber(wait) || 0;
                  if (isObject(options)) {
                    leading = !!options.leading;
                    maxing = "maxWait" in options;
                    maxWait = maxing
                      ? nativeMax(toNumber(options.maxWait) || 0, wait)
                      : maxWait;
                    trailing =
                      "trailing" in options ? !!options.trailing : trailing;
                  }

                  function invokeFunc(time) {
                    var args = lastArgs,
                      thisArg = lastThis;

                    lastArgs = lastThis = undefined;
                    lastInvokeTime = time;
                    result = func.apply(thisArg, args);
                    return result;
                  }

                  function leadingEdge(time) {
                    // Reset any `maxWait` timer.
                    lastInvokeTime = time;
                    // Start the timer for the trailing edge.
                    timerId = setTimeout(timerExpired, wait);
                    // Invoke the leading edge.
                    return leading ? invokeFunc(time) : result;
                  }

                  function remainingWait(time) {
                    var timeSinceLastCall = time - lastCallTime,
                      timeSinceLastInvoke = time - lastInvokeTime,
                      timeWaiting = wait - timeSinceLastCall;

                    return maxing
                      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                      : timeWaiting;
                  }

                  function shouldInvoke(time) {
                    var timeSinceLastCall = time - lastCallTime,
                      timeSinceLastInvoke = time - lastInvokeTime;

                    // Either this is the first call, activity has stopped and we're at the
                    // trailing edge, the system time has gone backwards and we're treating
                    // it as the trailing edge, or we've hit the `maxWait` limit.
                    return (
                      lastCallTime === undefined ||
                      timeSinceLastCall >= wait ||
                      timeSinceLastCall < 0 ||
                      (maxing && timeSinceLastInvoke >= maxWait)
                    );
                  }

                  function timerExpired() {
                    var time = now();
                    if (shouldInvoke(time)) {
                      return trailingEdge(time);
                    }
                    // Restart the timer.
                    timerId = setTimeout(timerExpired, remainingWait(time));
                  }

                  function trailingEdge(time) {
                    timerId = undefined;

                    // Only invoke if we have `lastArgs` which means `func` has been
                    // debounced at least once.
                    if (trailing && lastArgs) {
                      return invokeFunc(time);
                    }
                    lastArgs = lastThis = undefined;
                    return result;
                  }

                  function cancel() {
                    if (timerId !== undefined) {
                      clearTimeout(timerId);
                    }
                    lastInvokeTime = 0;
                    lastArgs = lastCallTime = lastThis = timerId = undefined;
                  }

                  function flush() {
                    return timerId === undefined ? result : trailingEdge(now());
                  }

                  function debounced() {
                    var time = now(),
                      isInvoking = shouldInvoke(time);

                    lastArgs = arguments;
                    lastThis = this;
                    lastCallTime = time;

                    if (isInvoking) {
                      if (timerId === undefined) {
                        return leadingEdge(lastCallTime);
                      }
                      if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                      }
                    }
                    if (timerId === undefined) {
                      timerId = setTimeout(timerExpired, wait);
                    }
                    return result;
                  }
                  debounced.cancel = cancel;
                  debounced.flush = flush;
                  return debounced;
                }

                /**
                 * Defers invoking the `func` until the current call stack has cleared. Any
                 * additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to defer.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.defer(function(text) {
                 *   console.log(text);
                 * }, 'deferred');
                 * // => Logs 'deferred' after one millisecond.
                 */
                var defer = baseRest(function (func, args) {
                  return baseDelay(func, 1, args);
                });

                /**
                 * Invokes `func` after `wait` milliseconds. Any additional arguments are
                 * provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.delay(function(text) {
                 *   console.log(text);
                 * }, 1000, 'later');
                 * // => Logs 'later' after one second.
                 */
                var delay = baseRest(function (func, wait, args) {
                  return baseDelay(func, toNumber(wait) || 0, args);
                });

                /**
                 * Creates a function that invokes `func` with arguments reversed.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to flip arguments for.
                 * @returns {Function} Returns the new flipped function.
                 * @example
                 *
                 * var flipped = _.flip(function() {
                 *   return _.toArray(arguments);
                 * });
                 *
                 * flipped('a', 'b', 'c', 'd');
                 * // => ['d', 'c', 'b', 'a']
                 */
                function flip(func) {
                  return createWrap(func, WRAP_FLIP_FLAG);
                }

                /**
                 * Creates a function that memoizes the result of `func`. If `resolver` is
                 * provided, it determines the cache key for storing the result based on the
                 * arguments provided to the memoized function. By default, the first argument
                 * provided to the memoized function is used as the map cache key. The `func`
                 * is invoked with the `this` binding of the memoized function.
                 *
                 * **Note:** The cache is exposed as the `cache` property on the memoized
                 * function. Its creation may be customized by replacing the `_.memoize.Cache`
                 * constructor with one whose instances implement the
                 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to have its output memoized.
                 * @param {Function} [resolver] The function to resolve the cache key.
                 * @returns {Function} Returns the new memoized function.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 * var other = { 'c': 3, 'd': 4 };
                 *
                 * var values = _.memoize(_.values);
                 * values(object);
                 * // => [1, 2]
                 *
                 * values(other);
                 * // => [3, 4]
                 *
                 * object.a = 2;
                 * values(object);
                 * // => [1, 2]
                 *
                 * // Modify the result cache.
                 * values.cache.set(object, ['a', 'b']);
                 * values(object);
                 * // => ['a', 'b']
                 *
                 * // Replace `_.memoize.Cache`.
                 * _.memoize.Cache = WeakMap;
                 */
                function memoize(func, resolver) {
                  if (
                    typeof func != "function" ||
                    (resolver != null && typeof resolver != "function")
                  ) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  var memoized = function () {
                    var args = arguments,
                      key = resolver ? resolver.apply(this, args) : args[0],
                      cache = memoized.cache;

                    if (cache.has(key)) {
                      return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                  };
                  memoized.cache = new (memoize.Cache || MapCache)();
                  return memoized;
                }

                // Expose `MapCache`.
                memoize.Cache = MapCache;

                /**
                 * Creates a function that negates the result of the predicate `func`. The
                 * `func` predicate is invoked with the `this` binding and arguments of the
                 * created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} predicate The predicate to negate.
                 * @returns {Function} Returns the new negated function.
                 * @example
                 *
                 * function isEven(n) {
                 *   return n % 2 == 0;
                 * }
                 *
                 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                 * // => [1, 3, 5]
                 */
                function negate(predicate) {
                  if (typeof predicate != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return function () {
                    var args = arguments;
                    switch (args.length) {
                      case 0:
                        return !predicate.call(this);
                      case 1:
                        return !predicate.call(this, args[0]);
                      case 2:
                        return !predicate.call(this, args[0], args[1]);
                      case 3:
                        return !predicate.call(this, args[0], args[1], args[2]);
                    }
                    return !predicate.apply(this, args);
                  };
                }

                /**
                 * Creates a function that is restricted to invoking `func` once. Repeat calls
                 * to the function return the value of the first invocation. The `func` is
                 * invoked with the `this` binding and arguments of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var initialize = _.once(createApplication);
                 * initialize();
                 * initialize();
                 * // => `createApplication` is invoked once
                 */
                function once(func) {
                  return before(2, func);
                }

                /**
                 * Creates a function that invokes `func` with its arguments transformed.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Function
                 * @param {Function} func The function to wrap.
                 * @param {...(Function|Function[])} [transforms=[_.identity]]
                 *  The argument transforms.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * function doubled(n) {
                 *   return n * 2;
                 * }
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var func = _.overArgs(function(x, y) {
                 *   return [x, y];
                 * }, [square, doubled]);
                 *
                 * func(9, 3);
                 * // => [81, 6]
                 *
                 * func(10, 5);
                 * // => [100, 10]
                 */
                var overArgs = castRest(function (func, transforms) {
                  transforms =
                    transforms.length == 1 && isArray(transforms[0])
                      ? arrayMap(transforms[0], baseUnary(getIteratee()))
                      : arrayMap(
                          baseFlatten(transforms, 1),
                          baseUnary(getIteratee())
                        );

                  var funcsLength = transforms.length;
                  return baseRest(function (args) {
                    var index = -1,
                      length = nativeMin(args.length, funcsLength);

                    while (++index < length) {
                      args[index] = transforms[index].call(this, args[index]);
                    }
                    return apply(func, this, args);
                  });
                });

                /**
                 * Creates a function that invokes `func` with `partials` prepended to the
                 * arguments it receives. This method is like `_.bind` except it does **not**
                 * alter the `this` binding.
                 *
                 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.2.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
                 *   return greeting + ' ' + name;
                 * }
                 *
                 * var sayHelloTo = _.partial(greet, 'hello');
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 *
                 * // Partially applied with placeholders.
                 * var greetFred = _.partial(greet, _, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 */
                var partial = baseRest(function (func, partials) {
                  var holders = replaceHolders(partials, getHolder(partial));
                  return createWrap(
                    func,
                    WRAP_PARTIAL_FLAG,
                    undefined,
                    partials,
                    holders
                  );
                });

                /**
                 * This method is like `_.partial` except that partially applied arguments
                 * are appended to the arguments it receives.
                 *
                 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
                 *   return greeting + ' ' + name;
                 * }
                 *
                 * var greetFred = _.partialRight(greet, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 *
                 * // Partially applied with placeholders.
                 * var sayHelloTo = _.partialRight(greet, 'hello', _);
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 */
                var partialRight = baseRest(function (func, partials) {
                  var holders = replaceHolders(
                    partials,
                    getHolder(partialRight)
                  );
                  return createWrap(
                    func,
                    WRAP_PARTIAL_RIGHT_FLAG,
                    undefined,
                    partials,
                    holders
                  );
                });

                /**
                 * Creates a function that invokes `func` with arguments arranged according
                 * to the specified `indexes` where the argument value at the first index is
                 * provided as the first argument, the argument value at the second index is
                 * provided as the second argument, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to rearrange arguments for.
                 * @param {...(number|number[])} indexes The arranged argument indexes.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var rearged = _.rearg(function(a, b, c) {
                 *   return [a, b, c];
                 * }, [2, 0, 1]);
                 *
                 * rearged('b', 'c', 'a')
                 * // => ['a', 'b', 'c']
                 */
                var rearg = flatRest(function (func, indexes) {
                  return createWrap(
                    func,
                    WRAP_REARG_FLAG,
                    undefined,
                    undefined,
                    undefined,
                    indexes
                  );
                });

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * created function and arguments from `start` and beyond provided as
                 * an array.
                 *
                 * **Note:** This method is based on the
                 * [rest parameter](https://mdn.io/rest_parameters).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.rest(function(what, names) {
                 *   return what + ' ' + _.initial(names).join(', ') +
                 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
                 * });
                 *
                 * say('hello', 'fred', 'barney', 'pebbles');
                 * // => 'hello fred, barney, & pebbles'
                 */
                function rest(func, start) {
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  start = start === undefined ? start : toInteger(start);
                  return baseRest(func, start);
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * create function and an array of arguments much like
                 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                 *
                 * **Note:** This method is based on the
                 * [spread operator](https://mdn.io/spread_operator).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Function
                 * @param {Function} func The function to spread arguments over.
                 * @param {number} [start=0] The start position of the spread.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.spread(function(who, what) {
                 *   return who + ' says ' + what;
                 * });
                 *
                 * say(['fred', 'hello']);
                 * // => 'fred says hello'
                 *
                 * var numbers = Promise.all([
                 *   Promise.resolve(40),
                 *   Promise.resolve(36)
                 * ]);
                 *
                 * numbers.then(_.spread(function(x, y) {
                 *   return x + y;
                 * }));
                 * // => a Promise of 76
                 */
                function spread(func, start) {
                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  start = start == null ? 0 : nativeMax(toInteger(start), 0);
                  return baseRest(function (args) {
                    var array = args[start],
                      otherArgs = castSlice(args, 0, start);

                    if (array) {
                      arrayPush(otherArgs, array);
                    }
                    return apply(func, this, otherArgs);
                  });
                }

                /**
                 * Creates a throttled function that only invokes `func` at most once per
                 * every `wait` milliseconds. The throttled function comes with a `cancel`
                 * method to cancel delayed `func` invocations and a `flush` method to
                 * immediately invoke them. Provide `options` to indicate whether `func`
                 * should be invoked on the leading and/or trailing edge of the `wait`
                 * timeout. The `func` is invoked with the last arguments provided to the
                 * throttled function. Subsequent calls to the throttled function return the
                 * result of the last `func` invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the throttled function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.throttle` and `_.debounce`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to throttle.
                 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=true]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new throttled function.
                 * @example
                 *
                 * // Avoid excessively updating the position while scrolling.
                 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                 *
                 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                 * jQuery(element).on('click', throttled);
                 *
                 * // Cancel the trailing throttled invocation.
                 * jQuery(window).on('popstate', throttled.cancel);
                 */
                function throttle(func, wait, options) {
                  var leading = true,
                    trailing = true;

                  if (typeof func != "function") {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (isObject(options)) {
                    leading =
                      "leading" in options ? !!options.leading : leading;
                    trailing =
                      "trailing" in options ? !!options.trailing : trailing;
                  }
                  return debounce(func, wait, {
                    leading: leading,
                    maxWait: wait,
                    trailing: trailing,
                  });
                }

                /**
                 * Creates a function that accepts up to one argument, ignoring any
                 * additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.unary(parseInt));
                 * // => [6, 8, 10]
                 */
                function unary(func) {
                  return ary(func, 1);
                }

                /**
                 * Creates a function that provides `value` to `wrapper` as its first
                 * argument. Any additional arguments provided to the function are appended
                 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                 * binding of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {*} value The value to wrap.
                 * @param {Function} [wrapper=identity] The wrapper function.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var p = _.wrap(_.escape, function(func, text) {
                 *   return '<p>' + func(text) + '</p>';
                 * });
                 *
                 * p('fred, barney, & pebbles');
                 * // => '<p>fred, barney, &amp; pebbles</p>'
                 */
                function wrap(value, wrapper) {
                  return partial(castFunction(wrapper), value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Casts `value` as an array if it's not one.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Lang
                 * @param {*} value The value to inspect.
                 * @returns {Array} Returns the cast array.
                 * @example
                 *
                 * _.castArray(1);
                 * // => [1]
                 *
                 * _.castArray({ 'a': 1 });
                 * // => [{ 'a': 1 }]
                 *
                 * _.castArray('abc');
                 * // => ['abc']
                 *
                 * _.castArray(null);
                 * // => [null]
                 *
                 * _.castArray(undefined);
                 * // => [undefined]
                 *
                 * _.castArray();
                 * // => []
                 *
                 * var array = [1, 2, 3];
                 * console.log(_.castArray(array) === array);
                 * // => true
                 */
                function castArray() {
                  if (!arguments.length) {
                    return [];
                  }
                  var value = arguments[0];
                  return isArray(value) ? value : [value];
                }

                /**
                 * Creates a shallow clone of `value`.
                 *
                 * **Note:** This method is loosely based on the
                 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                 * and supports cloning arrays, array buffers, booleans, date objects, maps,
                 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                 * arrays. The own enumerable properties of `arguments` objects are cloned
                 * as plain objects. An empty object is returned for uncloneable values such
                 * as error objects, functions, DOM nodes, and WeakMaps.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeep
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var shallow = _.clone(objects);
                 * console.log(shallow[0] === objects[0]);
                 * // => true
                 */
                function clone(value) {
                  return baseClone(value, CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.clone` except that it accepts `customizer` which
                 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                 * cloning is handled by the method instead. The `customizer` is invoked with
                 * up to four arguments; (value [, index|key, object, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeepWith
                 * @example
                 *
                 * function customizer(value) {
                 *   if (_.isElement(value)) {
                 *     return value.cloneNode(false);
                 *   }
                 * }
                 *
                 * var el = _.cloneWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 0
                 */
                function cloneWith(value, customizer) {
                  customizer =
                    typeof customizer == "function" ? customizer : undefined;
                  return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                }

                /**
                 * This method is like `_.clone` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.clone
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var deep = _.cloneDeep(objects);
                 * console.log(deep[0] === objects[0]);
                 * // => false
                 */
                function cloneDeep(value) {
                  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.cloneWith` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.cloneWith
                 * @example
                 *
                 * function customizer(value) {
                 *   if (_.isElement(value)) {
                 *     return value.cloneNode(true);
                 *   }
                 * }
                 *
                 * var el = _.cloneDeepWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 20
                 */
                function cloneDeepWith(value, customizer) {
                  customizer =
                    typeof customizer == "function" ? customizer : undefined;
                  return baseClone(
                    value,
                    CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
                    customizer
                  );
                }

                /**
                 * Checks if `object` conforms to `source` by invoking the predicate
                 * properties of `source` with the corresponding property values of `object`.
                 *
                 * **Note:** This method is equivalent to `_.conforms` when `source` is
                 * partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                 * // => true
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                 * // => false
                 */
                function conformsTo(object, source) {
                  return (
                    source == null ||
                    baseConformsTo(object, source, keys(source))
                  );
                }

                /**
                 * Performs a
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * comparison between two values to determine if they are equivalent.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.eq(object, object);
                 * // => true
                 *
                 * _.eq(object, other);
                 * // => false
                 *
                 * _.eq('a', 'a');
                 * // => true
                 *
                 * _.eq('a', Object('a'));
                 * // => false
                 *
                 * _.eq(NaN, NaN);
                 * // => true
                 */
                function eq(value, other) {
                  return (
                    value === other || (value !== value && other !== other)
                  );
                }

                /**
                 * Checks if `value` is greater than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 * @see _.lt
                 * @example
                 *
                 * _.gt(3, 1);
                 * // => true
                 *
                 * _.gt(3, 3);
                 * // => false
                 *
                 * _.gt(1, 3);
                 * // => false
                 */
                var gt = createRelationalOperation(baseGt);

                /**
                 * Checks if `value` is greater than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than or equal to
                 *  `other`, else `false`.
                 * @see _.lte
                 * @example
                 *
                 * _.gte(3, 1);
                 * // => true
                 *
                 * _.gte(3, 3);
                 * // => true
                 *
                 * _.gte(1, 3);
                 * // => false
                 */
                var gte = createRelationalOperation(function (value, other) {
                  return value >= other;
                });

                /**
                 * Checks if `value` is likely an `arguments` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArguments(function() { return arguments; }());
                 * // => true
                 *
                 * _.isArguments([1, 2, 3]);
                 * // => false
                 */
                var isArguments = baseIsArguments(
                  (function () {
                    return arguments;
                  })()
                )
                  ? baseIsArguments
                  : function (value) {
                      return (
                        isObjectLike(value) &&
                        hasOwnProperty.call(value, "callee") &&
                        !propertyIsEnumerable.call(value, "callee")
                      );
                    };

                /**
                 * Checks if `value` is classified as an `Array` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                 * @example
                 *
                 * _.isArray([1, 2, 3]);
                 * // => true
                 *
                 * _.isArray(document.body.children);
                 * // => false
                 *
                 * _.isArray('abc');
                 * // => false
                 *
                 * _.isArray(_.noop);
                 * // => false
                 */
                var isArray = Array.isArray;

                /**
                 * Checks if `value` is classified as an `ArrayBuffer` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 * @example
                 *
                 * _.isArrayBuffer(new ArrayBuffer(2));
                 * // => true
                 *
                 * _.isArrayBuffer(new Array(2));
                 * // => false
                 */
                var isArrayBuffer = nodeIsArrayBuffer
                  ? baseUnary(nodeIsArrayBuffer)
                  : baseIsArrayBuffer;

                /**
                 * Checks if `value` is array-like. A value is considered array-like if it's
                 * not a function and has a `value.length` that's an integer greater than or
                 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                 * @example
                 *
                 * _.isArrayLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLike(document.body.children);
                 * // => true
                 *
                 * _.isArrayLike('abc');
                 * // => true
                 *
                 * _.isArrayLike(_.noop);
                 * // => false
                 */
                function isArrayLike(value) {
                  return (
                    value != null &&
                    isLength(value.length) &&
                    !isFunction(value)
                  );
                }

                /**
                 * This method is like `_.isArrayLike` except that it also checks if `value`
                 * is an object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array-like object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArrayLikeObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLikeObject(document.body.children);
                 * // => true
                 *
                 * _.isArrayLikeObject('abc');
                 * // => false
                 *
                 * _.isArrayLikeObject(_.noop);
                 * // => false
                 */
                function isArrayLikeObject(value) {
                  return isObjectLike(value) && isArrayLike(value);
                }

                /**
                 * Checks if `value` is classified as a boolean primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                 * @example
                 *
                 * _.isBoolean(false);
                 * // => true
                 *
                 * _.isBoolean(null);
                 * // => false
                 */
                function isBoolean(value) {
                  return (
                    value === true ||
                    value === false ||
                    (isObjectLike(value) && baseGetTag(value) == boolTag)
                  );
                }

                /**
                 * Checks if `value` is a buffer.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                 * @example
                 *
                 * _.isBuffer(new Buffer(2));
                 * // => true
                 *
                 * _.isBuffer(new Uint8Array(2));
                 * // => false
                 */
                var isBuffer = nativeIsBuffer || stubFalse;

                /**
                 * Checks if `value` is classified as a `Date` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 * @example
                 *
                 * _.isDate(new Date);
                 * // => true
                 *
                 * _.isDate('Mon April 23 2012');
                 * // => false
                 */
                var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                /**
                 * Checks if `value` is likely a DOM element.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                 * @example
                 *
                 * _.isElement(document.body);
                 * // => true
                 *
                 * _.isElement('<body>');
                 * // => false
                 */
                function isElement(value) {
                  return (
                    isObjectLike(value) &&
                    value.nodeType === 1 &&
                    !isPlainObject(value)
                  );
                }

                /**
                 * Checks if `value` is an empty object, collection, map, or set.
                 *
                 * Objects are considered empty if they have no own enumerable string keyed
                 * properties.
                 *
                 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                 * jQuery-like collections are considered empty if they have a `length` of `0`.
                 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                 * @example
                 *
                 * _.isEmpty(null);
                 * // => true
                 *
                 * _.isEmpty(true);
                 * // => true
                 *
                 * _.isEmpty(1);
                 * // => true
                 *
                 * _.isEmpty([1, 2, 3]);
                 * // => false
                 *
                 * _.isEmpty({ 'a': 1 });
                 * // => false
                 */
                function isEmpty(value) {
                  if (value == null) {
                    return true;
                  }
                  if (
                    isArrayLike(value) &&
                    (isArray(value) ||
                      typeof value == "string" ||
                      typeof value.splice == "function" ||
                      isBuffer(value) ||
                      isTypedArray(value) ||
                      isArguments(value))
                  ) {
                    return !value.length;
                  }
                  var tag = getTag(value);
                  if (tag == mapTag || tag == setTag) {
                    return !value.size;
                  }
                  if (isPrototype(value)) {
                    return !baseKeys(value).length;
                  }
                  for (var key in value) {
                    if (hasOwnProperty.call(value, key)) {
                      return false;
                    }
                  }
                  return true;
                }

                /**
                 * Performs a deep comparison between two values to determine if they are
                 * equivalent.
                 *
                 * **Note:** This method supports comparing arrays, array buffers, booleans,
                 * date objects, error objects, maps, numbers, `Object` objects, regexes,
                 * sets, strings, symbols, and typed arrays. `Object` objects are compared
                 * by their own, not inherited, enumerable properties. Functions and DOM
                 * nodes are compared by strict equality, i.e. `===`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.isEqual(object, other);
                 * // => true
                 *
                 * object === other;
                 * // => false
                 */
                function isEqual(value, other) {
                  return baseIsEqual(value, other);
                }

                /**
                 * This method is like `_.isEqual` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with up to
                 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
                 *   return /^h(?:i|ello)$/.test(value);
                 * }
                 *
                 * function customizer(objValue, othValue) {
                 *   if (isGreeting(objValue) && isGreeting(othValue)) {
                 *     return true;
                 *   }
                 * }
                 *
                 * var array = ['hello', 'goodbye'];
                 * var other = ['hi', 'goodbye'];
                 *
                 * _.isEqualWith(array, other, customizer);
                 * // => true
                 */
                function isEqualWith(value, other, customizer) {
                  customizer =
                    typeof customizer == "function" ? customizer : undefined;
                  var result = customizer
                    ? customizer(value, other)
                    : undefined;
                  return result === undefined
                    ? baseIsEqual(value, other, undefined, customizer)
                    : !!result;
                }

                /**
                 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                 * `SyntaxError`, `TypeError`, or `URIError` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                 * @example
                 *
                 * _.isError(new Error);
                 * // => true
                 *
                 * _.isError(Error);
                 * // => false
                 */
                function isError(value) {
                  if (!isObjectLike(value)) {
                    return false;
                  }
                  var tag = baseGetTag(value);
                  return (
                    tag == errorTag ||
                    tag == domExcTag ||
                    (typeof value.message == "string" &&
                      typeof value.name == "string" &&
                      !isPlainObject(value))
                  );
                }

                /**
                 * Checks if `value` is a finite primitive number.
                 *
                 * **Note:** This method is based on
                 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                 * @example
                 *
                 * _.isFinite(3);
                 * // => true
                 *
                 * _.isFinite(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isFinite(Infinity);
                 * // => false
                 *
                 * _.isFinite('3');
                 * // => false
                 */
                function isFinite(value) {
                  return typeof value == "number" && nativeIsFinite(value);
                }

                /**
                 * Checks if `value` is classified as a `Function` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                 * @example
                 *
                 * _.isFunction(_);
                 * // => true
                 *
                 * _.isFunction(/abc/);
                 * // => false
                 */
                function isFunction(value) {
                  if (!isObject(value)) {
                    return false;
                  }
                  // The use of `Object#toString` avoids issues with the `typeof` operator
                  // in Safari 9 which returns 'object' for typed arrays and other constructors.
                  var tag = baseGetTag(value);
                  return (
                    tag == funcTag ||
                    tag == genTag ||
                    tag == asyncTag ||
                    tag == proxyTag
                  );
                }

                /**
                 * Checks if `value` is an integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                 * @example
                 *
                 * _.isInteger(3);
                 * // => true
                 *
                 * _.isInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isInteger(Infinity);
                 * // => false
                 *
                 * _.isInteger('3');
                 * // => false
                 */
                function isInteger(value) {
                  return typeof value == "number" && value == toInteger(value);
                }

                /**
                 * Checks if `value` is a valid array-like length.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                 * @example
                 *
                 * _.isLength(3);
                 * // => true
                 *
                 * _.isLength(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isLength(Infinity);
                 * // => false
                 *
                 * _.isLength('3');
                 * // => false
                 */
                function isLength(value) {
                  return (
                    typeof value == "number" &&
                    value > -1 &&
                    value % 1 == 0 &&
                    value <= MAX_SAFE_INTEGER
                  );
                }

                /**
                 * Checks if `value` is the
                 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                 * @example
                 *
                 * _.isObject({});
                 * // => true
                 *
                 * _.isObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isObject(_.noop);
                 * // => true
                 *
                 * _.isObject(null);
                 * // => false
                 */
                function isObject(value) {
                  var type = typeof value;
                  return (
                    value != null && (type == "object" || type == "function")
                  );
                }

                /**
                 * Checks if `value` is object-like. A value is object-like if it's not `null`
                 * and has a `typeof` result of "object".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                 * @example
                 *
                 * _.isObjectLike({});
                 * // => true
                 *
                 * _.isObjectLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isObjectLike(_.noop);
                 * // => false
                 *
                 * _.isObjectLike(null);
                 * // => false
                 */
                function isObjectLike(value) {
                  return value != null && typeof value == "object";
                }

                /**
                 * Checks if `value` is classified as a `Map` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 * @example
                 *
                 * _.isMap(new Map);
                 * // => true
                 *
                 * _.isMap(new WeakMap);
                 * // => false
                 */
                var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                /**
                 * Performs a partial deep comparison between `object` and `source` to
                 * determine if `object` contains equivalent property values.
                 *
                 * **Note:** This method is equivalent to `_.matches` when `source` is
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.isMatch(object, { 'b': 2 });
                 * // => true
                 *
                 * _.isMatch(object, { 'b': 1 });
                 * // => false
                 */
                function isMatch(object, source) {
                  return (
                    object === source ||
                    baseIsMatch(object, source, getMatchData(source))
                  );
                }

                /**
                 * This method is like `_.isMatch` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with five
                 * arguments: (objValue, srcValue, index|key, object, source).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
                 *   return /^h(?:i|ello)$/.test(value);
                 * }
                 *
                 * function customizer(objValue, srcValue) {
                 *   if (isGreeting(objValue) && isGreeting(srcValue)) {
                 *     return true;
                 *   }
                 * }
                 *
                 * var object = { 'greeting': 'hello' };
                 * var source = { 'greeting': 'hi' };
                 *
                 * _.isMatchWith(object, source, customizer);
                 * // => true
                 */
                function isMatchWith(object, source, customizer) {
                  customizer =
                    typeof customizer == "function" ? customizer : undefined;
                  return baseIsMatch(
                    object,
                    source,
                    getMatchData(source),
                    customizer
                  );
                }

                /**
                 * Checks if `value` is `NaN`.
                 *
                 * **Note:** This method is based on
                 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                 * `undefined` and other non-number values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                 * @example
                 *
                 * _.isNaN(NaN);
                 * // => true
                 *
                 * _.isNaN(new Number(NaN));
                 * // => true
                 *
                 * isNaN(undefined);
                 * // => true
                 *
                 * _.isNaN(undefined);
                 * // => false
                 */
                function isNaN(value) {
                  // An `NaN` primitive is the only value that is not equal to itself.
                  // Perform the `toStringTag` check first to avoid errors with some
                  // ActiveX objects in IE.
                  return isNumber(value) && value != +value;
                }

                /**
                 * Checks if `value` is a pristine native function.
                 *
                 * **Note:** This method can't reliably detect native functions in the presence
                 * of the core-js package because core-js circumvents this kind of detection.
                 * Despite multiple requests, the core-js maintainer has made it clear: any
                 * attempt to fix the detection will be obstructed. As a result, we're left
                 * with little choice but to throw an error. Unfortunately, this also affects
                 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                 * which rely on core-js.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 * @example
                 *
                 * _.isNative(Array.prototype.push);
                 * // => true
                 *
                 * _.isNative(_);
                 * // => false
                 */
                function isNative(value) {
                  if (isMaskable(value)) {
                    throw new Error(CORE_ERROR_TEXT);
                  }
                  return baseIsNative(value);
                }

                /**
                 * Checks if `value` is `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                 * @example
                 *
                 * _.isNull(null);
                 * // => true
                 *
                 * _.isNull(void 0);
                 * // => false
                 */
                function isNull(value) {
                  return value === null;
                }

                /**
                 * Checks if `value` is `null` or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                 * @example
                 *
                 * _.isNil(null);
                 * // => true
                 *
                 * _.isNil(void 0);
                 * // => true
                 *
                 * _.isNil(NaN);
                 * // => false
                 */
                function isNil(value) {
                  return value == null;
                }

                /**
                 * Checks if `value` is classified as a `Number` primitive or object.
                 *
                 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                 * classified as numbers, use the `_.isFinite` method.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                 * @example
                 *
                 * _.isNumber(3);
                 * // => true
                 *
                 * _.isNumber(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isNumber(Infinity);
                 * // => true
                 *
                 * _.isNumber('3');
                 * // => false
                 */
                function isNumber(value) {
                  return (
                    typeof value == "number" ||
                    (isObjectLike(value) && baseGetTag(value) == numberTag)
                  );
                }

                /**
                 * Checks if `value` is a plain object, that is, an object created by the
                 * `Object` constructor or one with a `[[Prototype]]` of `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.8.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * _.isPlainObject(new Foo);
                 * // => false
                 *
                 * _.isPlainObject([1, 2, 3]);
                 * // => false
                 *
                 * _.isPlainObject({ 'x': 0, 'y': 0 });
                 * // => true
                 *
                 * _.isPlainObject(Object.create(null));
                 * // => true
                 */
                function isPlainObject(value) {
                  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                  }
                  var proto = getPrototype(value);
                  if (proto === null) {
                    return true;
                  }
                  var Ctor =
                    hasOwnProperty.call(proto, "constructor") &&
                    proto.constructor;
                  return (
                    typeof Ctor == "function" &&
                    Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString
                  );
                }

                /**
                 * Checks if `value` is classified as a `RegExp` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 * @example
                 *
                 * _.isRegExp(/abc/);
                 * // => true
                 *
                 * _.isRegExp('/abc/');
                 * // => false
                 */
                var isRegExp = nodeIsRegExp
                  ? baseUnary(nodeIsRegExp)
                  : baseIsRegExp;

                /**
                 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                 * double precision number which isn't the result of a rounded unsafe integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                 * @example
                 *
                 * _.isSafeInteger(3);
                 * // => true
                 *
                 * _.isSafeInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isSafeInteger(Infinity);
                 * // => false
                 *
                 * _.isSafeInteger('3');
                 * // => false
                 */
                function isSafeInteger(value) {
                  return (
                    isInteger(value) &&
                    value >= -MAX_SAFE_INTEGER &&
                    value <= MAX_SAFE_INTEGER
                  );
                }

                /**
                 * Checks if `value` is classified as a `Set` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 * @example
                 *
                 * _.isSet(new Set);
                 * // => true
                 *
                 * _.isSet(new WeakSet);
                 * // => false
                 */
                var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                /**
                 * Checks if `value` is classified as a `String` primitive or object.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                 * @example
                 *
                 * _.isString('abc');
                 * // => true
                 *
                 * _.isString(1);
                 * // => false
                 */
                function isString(value) {
                  return (
                    typeof value == "string" ||
                    (!isArray(value) &&
                      isObjectLike(value) &&
                      baseGetTag(value) == stringTag)
                  );
                }

                /**
                 * Checks if `value` is classified as a `Symbol` primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                 * @example
                 *
                 * _.isSymbol(Symbol.iterator);
                 * // => true
                 *
                 * _.isSymbol('abc');
                 * // => false
                 */
                function isSymbol(value) {
                  return (
                    typeof value == "symbol" ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag)
                  );
                }

                /**
                 * Checks if `value` is classified as a typed array.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 * @example
                 *
                 * _.isTypedArray(new Uint8Array);
                 * // => true
                 *
                 * _.isTypedArray([]);
                 * // => false
                 */
                var isTypedArray = nodeIsTypedArray
                  ? baseUnary(nodeIsTypedArray)
                  : baseIsTypedArray;

                /**
                 * Checks if `value` is `undefined`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                 * @example
                 *
                 * _.isUndefined(void 0);
                 * // => true
                 *
                 * _.isUndefined(null);
                 * // => false
                 */
                function isUndefined(value) {
                  return value === undefined;
                }

                /**
                 * Checks if `value` is classified as a `WeakMap` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                 * @example
                 *
                 * _.isWeakMap(new WeakMap);
                 * // => true
                 *
                 * _.isWeakMap(new Map);
                 * // => false
                 */
                function isWeakMap(value) {
                  return isObjectLike(value) && getTag(value) == weakMapTag;
                }

                /**
                 * Checks if `value` is classified as a `WeakSet` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                 * @example
                 *
                 * _.isWeakSet(new WeakSet);
                 * // => true
                 *
                 * _.isWeakSet(new Set);
                 * // => false
                 */
                function isWeakSet(value) {
                  return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                }

                /**
                 * Checks if `value` is less than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 * @see _.gt
                 * @example
                 *
                 * _.lt(1, 3);
                 * // => true
                 *
                 * _.lt(3, 3);
                 * // => false
                 *
                 * _.lt(3, 1);
                 * // => false
                 */
                var lt = createRelationalOperation(baseLt);

                /**
                 * Checks if `value` is less than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than or equal to
                 *  `other`, else `false`.
                 * @see _.gte
                 * @example
                 *
                 * _.lte(1, 3);
                 * // => true
                 *
                 * _.lte(3, 3);
                 * // => true
                 *
                 * _.lte(3, 1);
                 * // => false
                 */
                var lte = createRelationalOperation(function (value, other) {
                  return value <= other;
                });

                /**
                 * Converts `value` to an array.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the converted array.
                 * @example
                 *
                 * _.toArray({ 'a': 1, 'b': 2 });
                 * // => [1, 2]
                 *
                 * _.toArray('abc');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toArray(1);
                 * // => []
                 *
                 * _.toArray(null);
                 * // => []
                 */
                function toArray(value) {
                  if (!value) {
                    return [];
                  }
                  if (isArrayLike(value)) {
                    return isString(value)
                      ? stringToArray(value)
                      : copyArray(value);
                  }
                  if (symIterator && value[symIterator]) {
                    return iteratorToArray(value[symIterator]());
                  }
                  var tag = getTag(value),
                    func =
                      tag == mapTag
                        ? mapToArray
                        : tag == setTag
                        ? setToArray
                        : values;

                  return func(value);
                }

                /**
                 * Converts `value` to a finite number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.12.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted number.
                 * @example
                 *
                 * _.toFinite(3.2);
                 * // => 3.2
                 *
                 * _.toFinite(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toFinite(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toFinite('3.2');
                 * // => 3.2
                 */
                function toFinite(value) {
                  if (!value) {
                    return value === 0 ? value : 0;
                  }
                  value = toNumber(value);
                  if (value === INFINITY || value === -INFINITY) {
                    var sign = value < 0 ? -1 : 1;
                    return sign * MAX_INTEGER;
                  }
                  return value === value ? value : 0;
                }

                /**
                 * Converts `value` to an integer.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toInteger(3.2);
                 * // => 3
                 *
                 * _.toInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toInteger(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toInteger('3.2');
                 * // => 3
                 */
                function toInteger(value) {
                  var result = toFinite(value),
                    remainder = result % 1;

                  return result === result
                    ? remainder
                      ? result - remainder
                      : result
                    : 0;
                }

                /**
                 * Converts `value` to an integer suitable for use as the length of an
                 * array-like object.
                 *
                 * **Note:** This method is based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toLength(3.2);
                 * // => 3
                 *
                 * _.toLength(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toLength(Infinity);
                 * // => 4294967295
                 *
                 * _.toLength('3.2');
                 * // => 3
                 */
                function toLength(value) {
                  return value
                    ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH)
                    : 0;
                }

                /**
                 * Converts `value` to a number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 * @example
                 *
                 * _.toNumber(3.2);
                 * // => 3.2
                 *
                 * _.toNumber(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toNumber(Infinity);
                 * // => Infinity
                 *
                 * _.toNumber('3.2');
                 * // => 3.2
                 */
                function toNumber(value) {
                  if (typeof value == "number") {
                    return value;
                  }
                  if (isSymbol(value)) {
                    return NAN;
                  }
                  if (isObject(value)) {
                    var other =
                      typeof value.valueOf == "function"
                        ? value.valueOf()
                        : value;
                    value = isObject(other) ? other + "" : other;
                  }
                  if (typeof value != "string") {
                    return value === 0 ? value : +value;
                  }
                  value = baseTrim(value);
                  var isBinary = reIsBinary.test(value);
                  return isBinary || reIsOctal.test(value)
                    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                    : reIsBadHex.test(value)
                    ? NAN
                    : +value;
                }

                /**
                 * Converts `value` to a plain object flattening inherited enumerable string
                 * keyed properties of `value` to own properties of the plain object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Object} Returns the converted plain object.
                 * @example
                 *
                 * function Foo() {
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.assign({ 'a': 1 }, new Foo);
                 * // => { 'a': 1, 'b': 2 }
                 *
                 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                 * // => { 'a': 1, 'b': 2, 'c': 3 }
                 */
                function toPlainObject(value) {
                  return copyObject(value, keysIn(value));
                }

                /**
                 * Converts `value` to a safe integer. A safe integer can be compared and
                 * represented correctly.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toSafeInteger(3.2);
                 * // => 3
                 *
                 * _.toSafeInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toSafeInteger(Infinity);
                 * // => 9007199254740991
                 *
                 * _.toSafeInteger('3.2');
                 * // => 3
                 */
                function toSafeInteger(value) {
                  return value
                    ? baseClamp(
                        toInteger(value),
                        -MAX_SAFE_INTEGER,
                        MAX_SAFE_INTEGER
                      )
                    : value === 0
                    ? value
                    : 0;
                }

                /**
                 * Converts `value` to a string. An empty string is returned for `null`
                 * and `undefined` values. The sign of `-0` is preserved.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.toString(null);
                 * // => ''
                 *
                 * _.toString(-0);
                 * // => '-0'
                 *
                 * _.toString([1, 2, 3]);
                 * // => '1,2,3'
                 */
                function toString(value) {
                  return value == null ? "" : baseToString(value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Assigns own enumerable string keyed properties of source objects to the
                 * destination object. Source objects are applied from left to right.
                 * Subsequent sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object` and is loosely based on
                 * [`Object.assign`](https://mdn.io/Object/assign).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assignIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * function Bar() {
                 *   this.c = 3;
                 * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assign({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var assign = createAssigner(function (object, source) {
                  if (isPrototype(source) || isArrayLike(source)) {
                    copyObject(source, keys(source), object);
                    return;
                  }
                  for (var key in source) {
                    if (hasOwnProperty.call(source, key)) {
                      assignValue(object, key, source[key]);
                    }
                  }
                });

                /**
                 * This method is like `_.assign` except that it iterates over own and
                 * inherited source properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extend
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assign
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * function Bar() {
                 *   this.c = 3;
                 * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                 */
                var assignIn = createAssigner(function (object, source) {
                  copyObject(source, keysIn(source), object);
                });

                /**
                 * This method is like `_.assignIn` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extendWith
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   return _.isUndefined(objValue) ? srcValue : objValue;
                 * }
                 *
                 * var defaults = _.partialRight(_.assignInWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignInWith = createAssigner(function (
                  object,
                  source,
                  srcIndex,
                  customizer
                ) {
                  copyObject(source, keysIn(source), object, customizer);
                });

                /**
                 * This method is like `_.assign` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignInWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   return _.isUndefined(objValue) ? srcValue : objValue;
                 * }
                 *
                 * var defaults = _.partialRight(_.assignWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignWith = createAssigner(function (
                  object,
                  source,
                  srcIndex,
                  customizer
                ) {
                  copyObject(source, keys(source), object, customizer);
                });

                /**
                 * Creates an array of values corresponding to `paths` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Array} Returns the picked values.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _.at(object, ['a[0].b.c', 'a[1]']);
                 * // => [3, 4]
                 */
                var at = flatRest(baseAt);

                /**
                 * Creates an object that inherits from the `prototype` object. If a
                 * `properties` object is given, its own enumerable string keyed properties
                 * are assigned to the created object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Object
                 * @param {Object} prototype The object to inherit from.
                 * @param {Object} [properties] The properties to assign to the object.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * function Shape() {
                 *   this.x = 0;
                 *   this.y = 0;
                 * }
                 *
                 * function Circle() {
                 *   Shape.call(this);
                 * }
                 *
                 * Circle.prototype = _.create(Shape.prototype, {
                 *   'constructor': Circle
                 * });
                 *
                 * var circle = new Circle;
                 * circle instanceof Circle;
                 * // => true
                 *
                 * circle instanceof Shape;
                 * // => true
                 */
                function create(prototype, properties) {
                  var result = baseCreate(prototype);
                  return properties == null
                    ? result
                    : baseAssign(result, properties);
                }

                /**
                 * Assigns own and inherited enumerable string keyed properties of source
                 * objects to the destination object for all destination properties that
                 * resolve to `undefined`. Source objects are applied from left to right.
                 * Once a property is set, additional values of the same property are ignored.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaultsDeep
                 * @example
                 *
                 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var defaults = baseRest(function (object, sources) {
                  object = Object(object);

                  var index = -1;
                  var length = sources.length;
                  var guard = length > 2 ? sources[2] : undefined;

                  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    length = 1;
                  }

                  while (++index < length) {
                    var source = sources[index];
                    var props = keysIn(source);
                    var propsIndex = -1;
                    var propsLength = props.length;

                    while (++propsIndex < propsLength) {
                      var key = props[propsIndex];
                      var value = object[key];

                      if (
                        value === undefined ||
                        (eq(value, objectProto[key]) &&
                          !hasOwnProperty.call(object, key))
                      ) {
                        object[key] = source[key];
                      }
                    }
                  }

                  return object;
                });

                /**
                 * This method is like `_.defaults` except that it recursively assigns
                 * default properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaults
                 * @example
                 *
                 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                 * // => { 'a': { 'b': 2, 'c': 3 } }
                 */
                var defaultsDeep = baseRest(function (args) {
                  args.push(undefined, customDefaultsMerge);
                  return apply(mergeWith, undefined, args);
                });

                /**
                 * This method is like `_.find` except that it returns the key of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
                 *   'barney':  { 'age': 36, 'active': true },
                 *   'fred':    { 'age': 40, 'active': false },
                 *   'pebbles': { 'age': 1,  'active': true }
                 * };
                 *
                 * _.findKey(users, function(o) { return o.age < 40; });
                 * // => 'barney' (iteration order is not guaranteed)
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findKey(users, { 'age': 1, 'active': true });
                 * // => 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findKey(users, 'active');
                 * // => 'barney'
                 */
                function findKey(object, predicate) {
                  return baseFindKey(
                    object,
                    getIteratee(predicate, 3),
                    baseForOwn
                  );
                }

                /**
                 * This method is like `_.findKey` except that it iterates over elements of
                 * a collection in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
                 *   'barney':  { 'age': 36, 'active': true },
                 *   'fred':    { 'age': 40, 'active': false },
                 *   'pebbles': { 'age': 1,  'active': true }
                 * };
                 *
                 * _.findLastKey(users, function(o) { return o.age < 40; });
                 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastKey(users, { 'age': 36, 'active': true });
                 * // => 'barney'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastKey(users, 'active');
                 * // => 'pebbles'
                 */
                function findLastKey(object, predicate) {
                  return baseFindKey(
                    object,
                    getIteratee(predicate, 3),
                    baseForOwnRight
                  );
                }

                /**
                 * Iterates over own and inherited enumerable string keyed properties of an
                 * object and invokes `iteratee` for each property. The iteratee is invoked
                 * with three arguments: (value, key, object). Iteratee functions may exit
                 * iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forInRight
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forIn(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                 */
                function forIn(object, iteratee) {
                  return object == null
                    ? object
                    : baseFor(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * This method is like `_.forIn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forInRight(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                 */
                function forInRight(object, iteratee) {
                  return object == null
                    ? object
                    : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * Iterates over own enumerable string keyed properties of an object and
                 * invokes `iteratee` for each property. The iteratee is invoked with three
                 * arguments: (value, key, object). Iteratee functions may exit iteration
                 * early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwnRight
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwn(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forOwn(object, iteratee) {
                  return object && baseForOwn(object, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forOwn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwnRight(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                 */
                function forOwnRight(object, iteratee) {
                  return (
                    object && baseForOwnRight(object, getIteratee(iteratee, 3))
                  );
                }

                /**
                 * Creates an array of function property names from own enumerable properties
                 * of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functionsIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = _.constant('a');
                 *   this.b = _.constant('b');
                 * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functions(new Foo);
                 * // => ['a', 'b']
                 */
                function functions(object) {
                  return object == null
                    ? []
                    : baseFunctions(object, keys(object));
                }

                /**
                 * Creates an array of function property names from own and inherited
                 * enumerable properties of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functions
                 * @example
                 *
                 * function Foo() {
                 *   this.a = _.constant('a');
                 *   this.b = _.constant('b');
                 * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functionsIn(new Foo);
                 * // => ['a', 'b', 'c']
                 */
                function functionsIn(object) {
                  return object == null
                    ? []
                    : baseFunctions(object, keysIn(object));
                }

                /**
                 * Gets the value at `path` of `object`. If the resolved value is
                 * `undefined`, the `defaultValue` is returned in its place.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.get(object, 'a[0].b.c');
                 * // => 3
                 *
                 * _.get(object, ['a', '0', 'b', 'c']);
                 * // => 3
                 *
                 * _.get(object, 'a.b.c', 'default');
                 * // => 'default'
                 */
                function get(object, path, defaultValue) {
                  var result =
                    object == null ? undefined : baseGet(object, path);
                  return result === undefined ? defaultValue : result;
                }

                /**
                 * Checks if `path` is a direct property of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = { 'a': { 'b': 2 } };
                 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.has(object, 'a');
                 * // => true
                 *
                 * _.has(object, 'a.b');
                 * // => true
                 *
                 * _.has(object, ['a', 'b']);
                 * // => true
                 *
                 * _.has(other, 'a');
                 * // => false
                 */
                function has(object, path) {
                  return object != null && hasPath(object, path, baseHas);
                }

                /**
                 * Checks if `path` is a direct or inherited property of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.hasIn(object, 'a');
                 * // => true
                 *
                 * _.hasIn(object, 'a.b');
                 * // => true
                 *
                 * _.hasIn(object, ['a', 'b']);
                 * // => true
                 *
                 * _.hasIn(object, 'b');
                 * // => false
                 */
                function hasIn(object, path) {
                  return object != null && hasPath(object, path, baseHasIn);
                }

                /**
                 * Creates an object composed of the inverted keys and values of `object`.
                 * If `object` contains duplicate values, subsequent values overwrite
                 * property assignments of previous values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invert(object);
                 * // => { '1': 'c', '2': 'b' }
                 */
                var invert = createInverter(function (result, value, key) {
                  if (value != null && typeof value.toString != "function") {
                    value = nativeObjectToString.call(value);
                  }

                  result[value] = key;
                }, constant(identity));

                /**
                 * This method is like `_.invert` except that the inverted object is generated
                 * from the results of running each element of `object` thru `iteratee`. The
                 * corresponding inverted value of each inverted key is an array of keys
                 * responsible for generating the inverted value. The iteratee is invoked
                 * with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invertBy(object);
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 *
                 * _.invertBy(object, function(value) {
                 *   return 'group' + value;
                 * });
                 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                 */
                var invertBy = createInverter(function (result, value, key) {
                  if (value != null && typeof value.toString != "function") {
                    value = nativeObjectToString.call(value);
                  }

                  if (hasOwnProperty.call(result, value)) {
                    result[value].push(key);
                  } else {
                    result[value] = [key];
                  }
                }, getIteratee);

                /**
                 * Invokes the method at `path` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                 *
                 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                 * // => [2, 3]
                 */
                var invoke = baseRest(baseInvoke);

                /**
                 * Creates an array of the own enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects. See the
                 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * for more details.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keys(new Foo);
                 * // => ['a', 'b'] (iteration order is not guaranteed)
                 *
                 * _.keys('hi');
                 * // => ['0', '1']
                 */
                function keys(object) {
                  return isArrayLike(object)
                    ? arrayLikeKeys(object)
                    : baseKeys(object);
                }

                /**
                 * Creates an array of the own and inherited enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keysIn(new Foo);
                 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                 */
                function keysIn(object) {
                  return isArrayLike(object)
                    ? arrayLikeKeys(object, true)
                    : baseKeysIn(object);
                }

                /**
                 * The opposite of `_.mapValues`; this method creates an object with the
                 * same values as `object` and keys generated by running each own enumerable
                 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                 * with three arguments: (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapValues
                 * @example
                 *
                 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
                 *   return key + value;
                 * });
                 * // => { 'a1': 1, 'b2': 2 }
                 */
                function mapKeys(object, iteratee) {
                  var result = {};
                  iteratee = getIteratee(iteratee, 3);

                  baseForOwn(object, function (value, key, object) {
                    baseAssignValue(
                      result,
                      iteratee(value, key, object),
                      value
                    );
                  });
                  return result;
                }

                /**
                 * Creates an object with the same keys as `object` and values generated
                 * by running each own enumerable string keyed property of `object` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapKeys
                 * @example
                 *
                 * var users = {
                 *   'fred':    { 'user': 'fred',    'age': 40 },
                 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
                 * };
                 *
                 * _.mapValues(users, function(o) { return o.age; });
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.mapValues(users, 'age');
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 */
                function mapValues(object, iteratee) {
                  var result = {};
                  iteratee = getIteratee(iteratee, 3);

                  baseForOwn(object, function (value, key, object) {
                    baseAssignValue(result, key, iteratee(value, key, object));
                  });
                  return result;
                }

                /**
                 * This method is like `_.assign` except that it recursively merges own and
                 * inherited enumerable string keyed properties of source objects into the
                 * destination object. Source properties that resolve to `undefined` are
                 * skipped if a destination value exists. Array and plain object properties
                 * are merged recursively. Other objects and value types are overridden by
                 * assignment. Source objects are applied from left to right. Subsequent
                 * sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {
                 *   'a': [{ 'b': 2 }, { 'd': 4 }]
                 * };
                 *
                 * var other = {
                 *   'a': [{ 'c': 3 }, { 'e': 5 }]
                 * };
                 *
                 * _.merge(object, other);
                 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                 */
                var merge = createAssigner(function (object, source, srcIndex) {
                  baseMerge(object, source, srcIndex);
                });

                /**
                 * This method is like `_.merge` except that it accepts `customizer` which
                 * is invoked to produce the merged values of the destination and source
                 * properties. If `customizer` returns `undefined`, merging is handled by the
                 * method instead. The `customizer` is invoked with six arguments:
                 * (objValue, srcValue, key, object, source, stack).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} customizer The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   if (_.isArray(objValue)) {
                 *     return objValue.concat(srcValue);
                 *   }
                 * }
                 *
                 * var object = { 'a': [1], 'b': [2] };
                 * var other = { 'a': [3], 'b': [4] };
                 *
                 * _.mergeWith(object, other, customizer);
                 * // => { 'a': [1, 3], 'b': [2, 4] }
                 */
                var mergeWith = createAssigner(function (
                  object,
                  source,
                  srcIndex,
                  customizer
                ) {
                  baseMerge(object, source, srcIndex, customizer);
                });

                /**
                 * The opposite of `_.pick`; this method creates an object composed of the
                 * own and inherited enumerable property paths of `object` that are not omitted.
                 *
                 * **Note:** This method is considerably slower than `_.pick`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to omit.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omit(object, ['a', 'c']);
                 * // => { 'b': '2' }
                 */
                var omit = flatRest(function (object, paths) {
                  var result = {};
                  if (object == null) {
                    return result;
                  }
                  var isDeep = false;
                  paths = arrayMap(paths, function (path) {
                    path = castPath(path, object);
                    isDeep || (isDeep = path.length > 1);
                    return path;
                  });
                  copyObject(object, getAllKeysIn(object), result);
                  if (isDeep) {
                    result = baseClone(
                      result,
                      CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                      customOmitClone
                    );
                  }
                  var length = paths.length;
                  while (length--) {
                    baseUnset(result, paths[length]);
                  }
                  return result;
                });

                /**
                 * The opposite of `_.pickBy`; this method creates an object composed of
                 * the own and inherited enumerable string keyed properties of `object` that
                 * `predicate` doesn't return truthy for. The predicate is invoked with two
                 * arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omitBy(object, _.isNumber);
                 * // => { 'b': '2' }
                 */
                function omitBy(object, predicate) {
                  return pickBy(object, negate(getIteratee(predicate)));
                }

                /**
                 * Creates an object composed of the picked `object` properties.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pick(object, ['a', 'c']);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var pick = flatRest(function (object, paths) {
                  return object == null ? {} : basePick(object, paths);
                });

                /**
                 * Creates an object composed of the `object` properties `predicate` returns
                 * truthy for. The predicate is invoked with two arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pickBy(object, _.isNumber);
                 * // => { 'a': 1, 'c': 3 }
                 */
                function pickBy(object, predicate) {
                  if (object == null) {
                    return {};
                  }
                  var props = arrayMap(getAllKeysIn(object), function (prop) {
                    return [prop];
                  });
                  predicate = getIteratee(predicate);
                  return basePickBy(object, props, function (value, path) {
                    return predicate(value, path[0]);
                  });
                }

                /**
                 * This method is like `_.get` except that if the resolved value is a
                 * function it's invoked with the `this` binding of its parent object and
                 * its result is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to resolve.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                 *
                 * _.result(object, 'a[0].b.c1');
                 * // => 3
                 *
                 * _.result(object, 'a[0].b.c2');
                 * // => 4
                 *
                 * _.result(object, 'a[0].b.c3', 'default');
                 * // => 'default'
                 *
                 * _.result(object, 'a[0].b.c3', _.constant('default'));
                 * // => 'default'
                 */
                function result(object, path, defaultValue) {
                  path = castPath(path, object);

                  var index = -1,
                    length = path.length;

                  // Ensure the loop is entered when path is empty.
                  if (!length) {
                    length = 1;
                    object = undefined;
                  }
                  while (++index < length) {
                    var value =
                      object == null ? undefined : object[toKey(path[index])];
                    if (value === undefined) {
                      index = length;
                      value = defaultValue;
                    }
                    object = isFunction(value) ? value.call(object) : value;
                  }
                  return object;
                }

                /**
                 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                 * it's created. Arrays are created for missing index properties while objects
                 * are created for all other missing properties. Use `_.setWith` to customize
                 * `path` creation.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.set(object, 'a[0].b.c', 4);
                 * console.log(object.a[0].b.c);
                 * // => 4
                 *
                 * _.set(object, ['x', '0', 'y', 'z'], 5);
                 * console.log(object.x[0].y.z);
                 * // => 5
                 */
                function set(object, path, value) {
                  return object == null ? object : baseSet(object, path, value);
                }

                /**
                 * This method is like `_.set` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.setWith(object, '[0][1]', 'a', Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function setWith(object, path, value, customizer) {
                  customizer =
                    typeof customizer == "function" ? customizer : undefined;
                  return object == null
                    ? object
                    : baseSet(object, path, value, customizer);
                }

                /**
                 * Creates an array of own enumerable string keyed-value pairs for `object`
                 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                 * entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entries
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairs(new Foo);
                 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                 */
                var toPairs = createToPairs(keys);

                /**
                 * Creates an array of own and inherited enumerable string keyed-value pairs
                 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                 * or set, its entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entriesIn
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairsIn(new Foo);
                 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                 */
                var toPairsIn = createToPairs(keysIn);

                /**
                 * An alternative to `_.reduce`; this method transforms `object` to a new
                 * `accumulator` object which is the result of running each of its own
                 * enumerable string keyed properties thru `iteratee`, with each invocation
                 * potentially mutating the `accumulator` object. If `accumulator` is not
                 * provided, a new object with the same `[[Prototype]]` will be used. The
                 * iteratee is invoked with four arguments: (accumulator, value, key, object).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The custom accumulator value.
                 * @returns {*} Returns the accumulated value.
                 * @example
                 *
                 * _.transform([2, 3, 4], function(result, n) {
                 *   result.push(n *= n);
                 *   return n % 2 == 0;
                 * }, []);
                 * // => [4, 9]
                 *
                 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                 *   (result[value] || (result[value] = [])).push(key);
                 * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 */
                function transform(object, iteratee, accumulator) {
                  var isArr = isArray(object),
                    isArrLike =
                      isArr || isBuffer(object) || isTypedArray(object);

                  iteratee = getIteratee(iteratee, 4);
                  if (accumulator == null) {
                    var Ctor = object && object.constructor;
                    if (isArrLike) {
                      accumulator = isArr ? new Ctor() : [];
                    } else if (isObject(object)) {
                      accumulator = isFunction(Ctor)
                        ? baseCreate(getPrototype(object))
                        : {};
                    } else {
                      accumulator = {};
                    }
                  }
                  (isArrLike ? arrayEach : baseForOwn)(
                    object,
                    function (value, index, object) {
                      return iteratee(accumulator, value, index, object);
                    }
                  );
                  return accumulator;
                }

                /**
                 * Removes the property at `path` of `object`.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                 * _.unset(object, 'a[0].b.c');
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 *
                 * _.unset(object, ['a', '0', 'b', 'c']);
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 */
                function unset(object, path) {
                  return object == null ? true : baseUnset(object, path);
                }

                /**
                 * This method is like `_.set` except that accepts `updater` to produce the
                 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                 * is invoked with one argument: (value).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                 * console.log(object.a[0].b.c);
                 * // => 9
                 *
                 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                 * console.log(object.x[0].y.z);
                 * // => 0
                 */
                function update(object, path, updater) {
                  return object == null
                    ? object
                    : baseUpdate(object, path, castFunction(updater));
                }

                /**
                 * This method is like `_.update` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function updateWith(object, path, updater, customizer) {
                  customizer =
                    typeof customizer == "function" ? customizer : undefined;
                  return object == null
                    ? object
                    : baseUpdate(
                        object,
                        path,
                        castFunction(updater),
                        customizer
                      );
                }

                /**
                 * Creates an array of the own enumerable string keyed property values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.values(new Foo);
                 * // => [1, 2] (iteration order is not guaranteed)
                 *
                 * _.values('hi');
                 * // => ['h', 'i']
                 */
                function values(object) {
                  return object == null ? [] : baseValues(object, keys(object));
                }

                /**
                 * Creates an array of the own and inherited enumerable string keyed property
                 * values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.valuesIn(new Foo);
                 * // => [1, 2, 3] (iteration order is not guaranteed)
                 */
                function valuesIn(object) {
                  return object == null
                    ? []
                    : baseValues(object, keysIn(object));
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Clamps `number` within the inclusive `lower` and `upper` bounds.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Number
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 * @example
                 *
                 * _.clamp(-10, -5, 5);
                 * // => -5
                 *
                 * _.clamp(10, -5, 5);
                 * // => 5
                 */
                function clamp(number, lower, upper) {
                  if (upper === undefined) {
                    upper = lower;
                    lower = undefined;
                  }
                  if (upper !== undefined) {
                    upper = toNumber(upper);
                    upper = upper === upper ? upper : 0;
                  }
                  if (lower !== undefined) {
                    lower = toNumber(lower);
                    lower = lower === lower ? lower : 0;
                  }
                  return baseClamp(toNumber(number), lower, upper);
                }

                /**
                 * Checks if `n` is between `start` and up to, but not including, `end`. If
                 * `end` is not specified, it's set to `start` with `start` then set to `0`.
                 * If `start` is greater than `end` the params are swapped to support
                 * negative ranges.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.3.0
                 * @category Number
                 * @param {number} number The number to check.
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 * @see _.range, _.rangeRight
                 * @example
                 *
                 * _.inRange(3, 2, 4);
                 * // => true
                 *
                 * _.inRange(4, 8);
                 * // => true
                 *
                 * _.inRange(4, 2);
                 * // => false
                 *
                 * _.inRange(2, 2);
                 * // => false
                 *
                 * _.inRange(1.2, 2);
                 * // => true
                 *
                 * _.inRange(5.2, 4);
                 * // => false
                 *
                 * _.inRange(-3, -2, -6);
                 * // => true
                 */
                function inRange(number, start, end) {
                  start = toFinite(start);
                  if (end === undefined) {
                    end = start;
                    start = 0;
                  } else {
                    end = toFinite(end);
                  }
                  number = toNumber(number);
                  return baseInRange(number, start, end);
                }

                /**
                 * Produces a random number between the inclusive `lower` and `upper` bounds.
                 * If only one argument is provided a number between `0` and the given number
                 * is returned. If `floating` is `true`, or either `lower` or `upper` are
                 * floats, a floating-point number is returned instead of an integer.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Number
                 * @param {number} [lower=0] The lower bound.
                 * @param {number} [upper=1] The upper bound.
                 * @param {boolean} [floating] Specify returning a floating-point number.
                 * @returns {number} Returns the random number.
                 * @example
                 *
                 * _.random(0, 5);
                 * // => an integer between 0 and 5
                 *
                 * _.random(5);
                 * // => also an integer between 0 and 5
                 *
                 * _.random(5, true);
                 * // => a floating-point number between 0 and 5
                 *
                 * _.random(1.2, 5.2);
                 * // => a floating-point number between 1.2 and 5.2
                 */
                function random(lower, upper, floating) {
                  if (
                    floating &&
                    typeof floating != "boolean" &&
                    isIterateeCall(lower, upper, floating)
                  ) {
                    upper = floating = undefined;
                  }
                  if (floating === undefined) {
                    if (typeof upper == "boolean") {
                      floating = upper;
                      upper = undefined;
                    } else if (typeof lower == "boolean") {
                      floating = lower;
                      lower = undefined;
                    }
                  }
                  if (lower === undefined && upper === undefined) {
                    lower = 0;
                    upper = 1;
                  } else {
                    lower = toFinite(lower);
                    if (upper === undefined) {
                      upper = lower;
                      lower = 0;
                    } else {
                      upper = toFinite(upper);
                    }
                  }
                  if (lower > upper) {
                    var temp = lower;
                    lower = upper;
                    upper = temp;
                  }
                  if (floating || lower % 1 || upper % 1) {
                    var rand = nativeRandom();
                    return nativeMin(
                      lower +
                        rand *
                          (upper -
                            lower +
                            freeParseFloat("1e-" + ((rand + "").length - 1))),
                      upper
                    );
                  }
                  return baseRandom(lower, upper);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the camel cased string.
                 * @example
                 *
                 * _.camelCase('Foo Bar');
                 * // => 'fooBar'
                 *
                 * _.camelCase('--foo-bar--');
                 * // => 'fooBar'
                 *
                 * _.camelCase('__FOO_BAR__');
                 * // => 'fooBar'
                 */
                var camelCase = createCompounder(function (
                  result,
                  word,
                  index
                ) {
                  word = word.toLowerCase();
                  return result + (index ? capitalize(word) : word);
                });

                /**
                 * Converts the first character of `string` to upper case and the remaining
                 * to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to capitalize.
                 * @returns {string} Returns the capitalized string.
                 * @example
                 *
                 * _.capitalize('FRED');
                 * // => 'Fred'
                 */
                function capitalize(string) {
                  return upperFirst(toString(string).toLowerCase());
                }

                /**
                 * Deburrs `string` by converting
                 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                 * letters to basic Latin letters and removing
                 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to deburr.
                 * @returns {string} Returns the deburred string.
                 * @example
                 *
                 * _.deburr('déjà vu');
                 * // => 'deja vu'
                 */
                function deburr(string) {
                  string = toString(string);
                  return (
                    string &&
                    string
                      .replace(reLatin, deburrLetter)
                      .replace(reComboMark, "")
                  );
                }

                /**
                 * Checks if `string` ends with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=string.length] The position to search up to.
                 * @returns {boolean} Returns `true` if `string` ends with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.endsWith('abc', 'c');
                 * // => true
                 *
                 * _.endsWith('abc', 'b');
                 * // => false
                 *
                 * _.endsWith('abc', 'b', 2);
                 * // => true
                 */
                function endsWith(string, target, position) {
                  string = toString(string);
                  target = baseToString(target);

                  var length = string.length;
                  position =
                    position === undefined
                      ? length
                      : baseClamp(toInteger(position), 0, length);

                  var end = position;
                  position -= target.length;
                  return position >= 0 && string.slice(position, end) == target;
                }

                /**
                 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                 * corresponding HTML entities.
                 *
                 * **Note:** No other characters are escaped. To escape additional
                 * characters use a third-party library like [_he_](https://mths.be/he).
                 *
                 * Though the ">" character is escaped for symmetry, characters like
                 * ">" and "/" don't need escaping in HTML and have no special meaning
                 * unless they're part of a tag or unquoted attribute value. See
                 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                 * (under "semi-related fun fact") for more details.
                 *
                 * When working with HTML you should always
                 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                 * XSS vectors.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escape('fred, barney, & pebbles');
                 * // => 'fred, barney, &amp; pebbles'
                 */
                function escape(string) {
                  string = toString(string);
                  return string && reHasUnescapedHtml.test(string)
                    ? string.replace(reUnescapedHtml, escapeHtmlChar)
                    : string;
                }

                /**
                 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escapeRegExp('[lodash](https://lodash.com/)');
                 * // => '\[lodash\]\(https://lodash\.com/\)'
                 */
                function escapeRegExp(string) {
                  string = toString(string);
                  return string && reHasRegExpChar.test(string)
                    ? string.replace(reRegExpChar, "\\$&")
                    : string;
                }

                /**
                 * Converts `string` to
                 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the kebab cased string.
                 * @example
                 *
                 * _.kebabCase('Foo Bar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('fooBar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('__FOO_BAR__');
                 * // => 'foo-bar'
                 */
                var kebabCase = createCompounder(function (
                  result,
                  word,
                  index
                ) {
                  return result + (index ? "-" : "") + word.toLowerCase();
                });

                /**
                 * Converts `string`, as space separated words, to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.lowerCase('--Foo-Bar--');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('fooBar');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('__FOO_BAR__');
                 * // => 'foo bar'
                 */
                var lowerCase = createCompounder(function (
                  result,
                  word,
                  index
                ) {
                  return result + (index ? " " : "") + word.toLowerCase();
                });

                /**
                 * Converts the first character of `string` to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.lowerFirst('Fred');
                 * // => 'fred'
                 *
                 * _.lowerFirst('FRED');
                 * // => 'fRED'
                 */
                var lowerFirst = createCaseFirst("toLowerCase");

                /**
                 * Pads `string` on the left and right sides if it's shorter than `length`.
                 * Padding characters are truncated if they can't be evenly divided by `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.pad('abc', 8);
                 * // => '  abc   '
                 *
                 * _.pad('abc', 8, '_-');
                 * // => '_-abc_-_'
                 *
                 * _.pad('abc', 3);
                 * // => 'abc'
                 */
                function pad(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  if (!length || strLength >= length) {
                    return string;
                  }
                  var mid = (length - strLength) / 2;
                  return (
                    createPadding(nativeFloor(mid), chars) +
                    string +
                    createPadding(nativeCeil(mid), chars)
                  );
                }

                /**
                 * Pads `string` on the right side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padEnd('abc', 6);
                 * // => 'abc   '
                 *
                 * _.padEnd('abc', 6, '_-');
                 * // => 'abc_-_'
                 *
                 * _.padEnd('abc', 3);
                 * // => 'abc'
                 */
                function padEnd(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  return length && strLength < length
                    ? string + createPadding(length - strLength, chars)
                    : string;
                }

                /**
                 * Pads `string` on the left side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padStart('abc', 6);
                 * // => '   abc'
                 *
                 * _.padStart('abc', 6, '_-');
                 * // => '_-_abc'
                 *
                 * _.padStart('abc', 3);
                 * // => 'abc'
                 */
                function padStart(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  return length && strLength < length
                    ? createPadding(length - strLength, chars) + string
                    : string;
                }

                /**
                 * Converts `string` to an integer of the specified radix. If `radix` is
                 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                 * hexadecimal, in which case a `radix` of `16` is used.
                 *
                 * **Note:** This method aligns with the
                 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category String
                 * @param {string} string The string to convert.
                 * @param {number} [radix=10] The radix to interpret `value` by.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.parseInt('08');
                 * // => 8
                 *
                 * _.map(['6', '08', '10'], _.parseInt);
                 * // => [6, 8, 10]
                 */
                function parseInt(string, radix, guard) {
                  if (guard || radix == null) {
                    radix = 0;
                  } else if (radix) {
                    radix = +radix;
                  }
                  return nativeParseInt(
                    toString(string).replace(reTrimStart, ""),
                    radix || 0
                  );
                }

                /**
                 * Repeats the given string `n` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to repeat.
                 * @param {number} [n=1] The number of times to repeat the string.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the repeated string.
                 * @example
                 *
                 * _.repeat('*', 3);
                 * // => '***'
                 *
                 * _.repeat('abc', 2);
                 * // => 'abcabc'
                 *
                 * _.repeat('abc', 0);
                 * // => ''
                 */
                function repeat(string, n, guard) {
                  if (
                    guard ? isIterateeCall(string, n, guard) : n === undefined
                  ) {
                    n = 1;
                  } else {
                    n = toInteger(n);
                  }
                  return baseRepeat(toString(string), n);
                }

                /**
                 * Replaces matches for `pattern` in `string` with `replacement`.
                 *
                 * **Note:** This method is based on
                 * [`String#replace`](https://mdn.io/String/replace).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to modify.
                 * @param {RegExp|string} pattern The pattern to replace.
                 * @param {Function|string} replacement The match replacement.
                 * @returns {string} Returns the modified string.
                 * @example
                 *
                 * _.replace('Hi Fred', 'Fred', 'Barney');
                 * // => 'Hi Barney'
                 */
                function replace() {
                  var args = arguments,
                    string = toString(args[0]);

                  return args.length < 3
                    ? string
                    : string.replace(args[1], args[2]);
                }

                /**
                 * Converts `string` to
                 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the snake cased string.
                 * @example
                 *
                 * _.snakeCase('Foo Bar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('fooBar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('--FOO-BAR--');
                 * // => 'foo_bar'
                 */
                var snakeCase = createCompounder(function (
                  result,
                  word,
                  index
                ) {
                  return result + (index ? "_" : "") + word.toLowerCase();
                });

                /**
                 * Splits `string` by `separator`.
                 *
                 * **Note:** This method is based on
                 * [`String#split`](https://mdn.io/String/split).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to split.
                 * @param {RegExp|string} separator The separator pattern to split by.
                 * @param {number} [limit] The length to truncate results to.
                 * @returns {Array} Returns the string segments.
                 * @example
                 *
                 * _.split('a-b-c', '-', 2);
                 * // => ['a', 'b']
                 */
                function split(string, separator, limit) {
                  if (
                    limit &&
                    typeof limit != "number" &&
                    isIterateeCall(string, separator, limit)
                  ) {
                    separator = limit = undefined;
                  }
                  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                  if (!limit) {
                    return [];
                  }
                  string = toString(string);
                  if (
                    string &&
                    (typeof separator == "string" ||
                      (separator != null && !isRegExp(separator)))
                  ) {
                    separator = baseToString(separator);
                    if (!separator && hasUnicode(string)) {
                      return castSlice(stringToArray(string), 0, limit);
                    }
                  }
                  return string.split(separator, limit);
                }

                /**
                 * Converts `string` to
                 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.1.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the start cased string.
                 * @example
                 *
                 * _.startCase('--foo-bar--');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('fooBar');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('__FOO_BAR__');
                 * // => 'FOO BAR'
                 */
                var startCase = createCompounder(function (
                  result,
                  word,
                  index
                ) {
                  return result + (index ? " " : "") + upperFirst(word);
                });

                /**
                 * Checks if `string` starts with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=0] The position to search from.
                 * @returns {boolean} Returns `true` if `string` starts with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.startsWith('abc', 'a');
                 * // => true
                 *
                 * _.startsWith('abc', 'b');
                 * // => false
                 *
                 * _.startsWith('abc', 'b', 1);
                 * // => true
                 */
                function startsWith(string, target, position) {
                  string = toString(string);
                  position =
                    position == null
                      ? 0
                      : baseClamp(toInteger(position), 0, string.length);

                  target = baseToString(target);
                  return (
                    string.slice(position, position + target.length) == target
                  );
                }

                /**
                 * Creates a compiled template function that can interpolate data properties
                 * in "interpolate" delimiters, HTML-escape interpolated data properties in
                 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                 * properties may be accessed as free variables in the template. If a setting
                 * object is given, it takes precedence over `_.templateSettings` values.
                 *
                 * **Note:** In the development build `_.template` utilizes
                 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                 * for easier debugging.
                 *
                 * For more information on precompiling templates see
                 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                 *
                 * For more information on Chrome extension sandboxes see
                 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The template string.
                 * @param {Object} [options={}] The options object.
                 * @param {RegExp} [options.escape=_.templateSettings.escape]
                 *  The HTML "escape" delimiter.
                 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                 *  The "evaluate" delimiter.
                 * @param {Object} [options.imports=_.templateSettings.imports]
                 *  An object to import into the template as free variables.
                 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                 *  The "interpolate" delimiter.
                 * @param {string} [options.sourceURL='lodash.templateSources[n]']
                 *  The sourceURL of the compiled template.
                 * @param {string} [options.variable='obj']
                 *  The data object variable name.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the compiled template function.
                 * @example
                 *
                 * // Use the "interpolate" delimiter to create a compiled template.
                 * var compiled = _.template('hello <%= user %>!');
                 * compiled({ 'user': 'fred' });
                 * // => 'hello fred!'
                 *
                 * // Use the HTML "escape" delimiter to escape data property values.
                 * var compiled = _.template('<b><%- value %></b>');
                 * compiled({ 'value': '<script>' });
                 * // => '<b>&lt;script&gt;</b>'
                 *
                 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the internal `print` function in "evaluate" delimiters.
                 * var compiled = _.template('<% print("hello " + user); %>!');
                 * compiled({ 'user': 'barney' });
                 * // => 'hello barney!'
                 *
                 * // Use the ES template literal delimiter as an "interpolate" delimiter.
                 * // Disable support by replacing the "interpolate" delimiter.
                 * var compiled = _.template('hello ${ user }!');
                 * compiled({ 'user': 'pebbles' });
                 * // => 'hello pebbles!'
                 *
                 * // Use backslashes to treat delimiters as plain text.
                 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                 * compiled({ 'value': 'ignored' });
                 * // => '<%- value %>'
                 *
                 * // Use the `imports` option to import `jQuery` as `jq`.
                 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                 * compiled(data);
                 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                 *
                 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                 * compiled.source;
                 * // => function(data) {
                 * //   var __t, __p = '';
                 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
                 * //   return __p;
                 * // }
                 *
                 * // Use custom template delimiters.
                 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                 * var compiled = _.template('hello {{ user }}!');
                 * compiled({ 'user': 'mustache' });
                 * // => 'hello mustache!'
                 *
                 * // Use the `source` property to inline compiled templates for meaningful
                 * // line numbers in error messages and stack traces.
                 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                 *   var JST = {\
                 *     "main": ' + _.template(mainText).source + '\
                 *   };\
                 * ');
                 */
                function template(string, options, guard) {
                  // Based on John Resig's `tmpl` implementation
                  // (http://ejohn.org/blog/javascript-micro-templating/)
                  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                  var settings = lodash.templateSettings;

                  if (guard && isIterateeCall(string, options, guard)) {
                    options = undefined;
                  }
                  string = toString(string);
                  options = assignInWith(
                    {},
                    options,
                    settings,
                    customDefaultsAssignIn
                  );

                  var imports = assignInWith(
                      {},
                      options.imports,
                      settings.imports,
                      customDefaultsAssignIn
                    ),
                    importsKeys = keys(imports),
                    importsValues = baseValues(imports, importsKeys);

                  var isEscaping,
                    isEvaluating,
                    index = 0,
                    interpolate = options.interpolate || reNoMatch,
                    source = "__p += '";

                  // Compile the regexp to match each delimiter.
                  var reDelimiters = RegExp(
                    (options.escape || reNoMatch).source +
                      "|" +
                      interpolate.source +
                      "|" +
                      (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                        .source +
                      "|" +
                      (options.evaluate || reNoMatch).source +
                      "|$",
                    "g"
                  );

                  // Use a sourceURL for easier debugging.
                  // The sourceURL gets injected into the source that's eval-ed, so be careful
                  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
                  // and escape the comment, thus injecting code that gets evaled.
                  var sourceURL =
                    "//# sourceURL=" +
                    (hasOwnProperty.call(options, "sourceURL")
                      ? (options.sourceURL + "").replace(/\s/g, " ")
                      : "lodash.templateSources[" + ++templateCounter + "]") +
                    "\n";

                  string.replace(
                    reDelimiters,
                    function (
                      match,
                      escapeValue,
                      interpolateValue,
                      esTemplateValue,
                      evaluateValue,
                      offset
                    ) {
                      interpolateValue || (interpolateValue = esTemplateValue);

                      // Escape characters that can't be included in string literals.
                      source += string
                        .slice(index, offset)
                        .replace(reUnescapedString, escapeStringChar);

                      // Replace delimiters with snippets.
                      if (escapeValue) {
                        isEscaping = true;
                        source += "' +\n__e(" + escapeValue + ") +\n'";
                      }
                      if (evaluateValue) {
                        isEvaluating = true;
                        source += "';\n" + evaluateValue + ";\n__p += '";
                      }
                      if (interpolateValue) {
                        source +=
                          "' +\n((__t = (" +
                          interpolateValue +
                          ")) == null ? '' : __t) +\n'";
                      }
                      index = offset + match.length;

                      // The JS engine embedded in Adobe products needs `match` returned in
                      // order to produce the correct `offset` value.
                      return match;
                    }
                  );

                  source += "';\n";

                  // If `variable` is not specified wrap a with-statement around the generated
                  // code to add the data object to the top of the scope chain.
                  var variable =
                    hasOwnProperty.call(options, "variable") &&
                    options.variable;
                  if (!variable) {
                    source = "with (obj) {\n" + source + "\n}\n";
                  }
                  // Throw an error if a forbidden character was found in `variable`, to prevent
                  // potential command injection attacks.
                  else if (reForbiddenIdentifierChars.test(variable)) {
                    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
                  }

                  // Cleanup code by stripping empty strings.
                  source = (
                    isEvaluating
                      ? source.replace(reEmptyStringLeading, "")
                      : source
                  )
                    .replace(reEmptyStringMiddle, "$1")
                    .replace(reEmptyStringTrailing, "$1;");

                  // Frame code as the function body.
                  source =
                    "function(" +
                    (variable || "obj") +
                    ") {\n" +
                    (variable ? "" : "obj || (obj = {});\n") +
                    "var __t, __p = ''" +
                    (isEscaping ? ", __e = _.escape" : "") +
                    (isEvaluating
                      ? ", __j = Array.prototype.join;\n" +
                        "function print() { __p += __j.call(arguments, '') }\n"
                      : ";\n") +
                    source +
                    "return __p\n}";

                  var result = attempt(function () {
                    return Function(
                      importsKeys,
                      sourceURL + "return " + source
                    ).apply(undefined, importsValues);
                  });

                  // Provide the compiled function's source by its `toString` method or
                  // the `source` property as a convenience for inlining compiled templates.
                  result.source = source;
                  if (isError(result)) {
                    throw result;
                  }
                  return result;
                }

                /**
                 * Converts `string`, as a whole, to lower case just like
                 * [String#toLowerCase](https://mdn.io/toLowerCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.toLower('--Foo-Bar--');
                 * // => '--foo-bar--'
                 *
                 * _.toLower('fooBar');
                 * // => 'foobar'
                 *
                 * _.toLower('__FOO_BAR__');
                 * // => '__foo_bar__'
                 */
                function toLower(value) {
                  return toString(value).toLowerCase();
                }

                /**
                 * Converts `string`, as a whole, to upper case just like
                 * [String#toUpperCase](https://mdn.io/toUpperCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.toUpper('--foo-bar--');
                 * // => '--FOO-BAR--'
                 *
                 * _.toUpper('fooBar');
                 * // => 'FOOBAR'
                 *
                 * _.toUpper('__foo_bar__');
                 * // => '__FOO_BAR__'
                 */
                function toUpper(value) {
                  return toString(value).toUpperCase();
                }

                /**
                 * Removes leading and trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trim('  abc  ');
                 * // => 'abc'
                 *
                 * _.trim('-_-abc-_-', '_-');
                 * // => 'abc'
                 *
                 * _.map(['  foo  ', '  bar  '], _.trim);
                 * // => ['foo', 'bar']
                 */
                function trim(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return baseTrim(string);
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                    chrSymbols = stringToArray(chars),
                    start = charsStartIndex(strSymbols, chrSymbols),
                    end = charsEndIndex(strSymbols, chrSymbols) + 1;

                  return castSlice(strSymbols, start, end).join("");
                }

                /**
                 * Removes trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimEnd('  abc  ');
                 * // => '  abc'
                 *
                 * _.trimEnd('-_-abc-_-', '_-');
                 * // => '-_-abc'
                 */
                function trimEnd(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return string.slice(0, trimmedEndIndex(string) + 1);
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                  return castSlice(strSymbols, 0, end).join("");
                }

                /**
                 * Removes leading whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimStart('  abc  ');
                 * // => 'abc  '
                 *
                 * _.trimStart('-_-abc-_-', '_-');
                 * // => 'abc-_-'
                 */
                function trimStart(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return string.replace(reTrimStart, "");
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                    start = charsStartIndex(strSymbols, stringToArray(chars));

                  return castSlice(strSymbols, start).join("");
                }

                /**
                 * Truncates `string` if it's longer than the given maximum string length.
                 * The last characters of the truncated string are replaced with the omission
                 * string which defaults to "...".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to truncate.
                 * @param {Object} [options={}] The options object.
                 * @param {number} [options.length=30] The maximum string length.
                 * @param {string} [options.omission='...'] The string to indicate text is omitted.
                 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                 * @returns {string} Returns the truncated string.
                 * @example
                 *
                 * _.truncate('hi-diddly-ho there, neighborino');
                 * // => 'hi-diddly-ho there, neighbo...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'length': 24,
                 *   'separator': ' '
                 * });
                 * // => 'hi-diddly-ho there,...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'length': 24,
                 *   'separator': /,? +/
                 * });
                 * // => 'hi-diddly-ho there...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'omission': ' [...]'
                 * });
                 * // => 'hi-diddly-ho there, neig [...]'
                 */
                function truncate(string, options) {
                  var length = DEFAULT_TRUNC_LENGTH,
                    omission = DEFAULT_TRUNC_OMISSION;

                  if (isObject(options)) {
                    var separator =
                      "separator" in options ? options.separator : separator;
                    length =
                      "length" in options ? toInteger(options.length) : length;
                    omission =
                      "omission" in options
                        ? baseToString(options.omission)
                        : omission;
                  }
                  string = toString(string);

                  var strLength = string.length;
                  if (hasUnicode(string)) {
                    var strSymbols = stringToArray(string);
                    strLength = strSymbols.length;
                  }
                  if (length >= strLength) {
                    return string;
                  }
                  var end = length - stringSize(omission);
                  if (end < 1) {
                    return omission;
                  }
                  var result = strSymbols
                    ? castSlice(strSymbols, 0, end).join("")
                    : string.slice(0, end);

                  if (separator === undefined) {
                    return result + omission;
                  }
                  if (strSymbols) {
                    end += result.length - end;
                  }
                  if (isRegExp(separator)) {
                    if (string.slice(end).search(separator)) {
                      var match,
                        substring = result;

                      if (!separator.global) {
                        separator = RegExp(
                          separator.source,
                          toString(reFlags.exec(separator)) + "g"
                        );
                      }
                      separator.lastIndex = 0;
                      while ((match = separator.exec(substring))) {
                        var newEnd = match.index;
                      }
                      result = result.slice(
                        0,
                        newEnd === undefined ? end : newEnd
                      );
                    }
                  } else if (
                    string.indexOf(baseToString(separator), end) != end
                  ) {
                    var index = result.lastIndexOf(separator);
                    if (index > -1) {
                      result = result.slice(0, index);
                    }
                  }
                  return result + omission;
                }

                /**
                 * The inverse of `_.escape`; this method converts the HTML entities
                 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                 * their corresponding characters.
                 *
                 * **Note:** No other HTML entities are unescaped. To unescape additional
                 * HTML entities use a third-party library like [_he_](https://mths.be/he).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.6.0
                 * @category String
                 * @param {string} [string=''] The string to unescape.
                 * @returns {string} Returns the unescaped string.
                 * @example
                 *
                 * _.unescape('fred, barney, &amp; pebbles');
                 * // => 'fred, barney, & pebbles'
                 */
                function unescape(string) {
                  string = toString(string);
                  return string && reHasEscapedHtml.test(string)
                    ? string.replace(reEscapedHtml, unescapeHtmlChar)
                    : string;
                }

                /**
                 * Converts `string`, as space separated words, to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.upperCase('--foo-bar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('fooBar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('__foo_bar__');
                 * // => 'FOO BAR'
                 */
                var upperCase = createCompounder(function (
                  result,
                  word,
                  index
                ) {
                  return result + (index ? " " : "") + word.toUpperCase();
                });

                /**
                 * Converts the first character of `string` to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.upperFirst('fred');
                 * // => 'Fred'
                 *
                 * _.upperFirst('FRED');
                 * // => 'FRED'
                 */
                var upperFirst = createCaseFirst("toUpperCase");

                /**
                 * Splits `string` into an array of its words.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {RegExp|string} [pattern] The pattern to match words.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the words of `string`.
                 * @example
                 *
                 * _.words('fred, barney, & pebbles');
                 * // => ['fred', 'barney', 'pebbles']
                 *
                 * _.words('fred, barney, & pebbles', /[^, ]+/g);
                 * // => ['fred', 'barney', '&', 'pebbles']
                 */
                function words(string, pattern, guard) {
                  string = toString(string);
                  pattern = guard ? undefined : pattern;

                  if (pattern === undefined) {
                    return hasUnicodeWord(string)
                      ? unicodeWords(string)
                      : asciiWords(string);
                  }
                  return string.match(pattern) || [];
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Attempts to invoke `func`, returning either the result or the caught error
                 * object. Any additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Function} func The function to attempt.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {*} Returns the `func` result or error object.
                 * @example
                 *
                 * // Avoid throwing errors for invalid selectors.
                 * var elements = _.attempt(function(selector) {
                 *   return document.querySelectorAll(selector);
                 * }, '>_>');
                 *
                 * if (_.isError(elements)) {
                 *   elements = [];
                 * }
                 */
                var attempt = baseRest(function (func, args) {
                  try {
                    return apply(func, undefined, args);
                  } catch (e) {
                    return isError(e) ? e : new Error(e);
                  }
                });

                /**
                 * Binds methods of an object to the object itself, overwriting the existing
                 * method.
                 *
                 * **Note:** This method doesn't set the "length" property of bound functions.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Object} object The object to bind and assign the bound methods to.
                 * @param {...(string|string[])} methodNames The object method names to bind.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var view = {
                 *   'label': 'docs',
                 *   'click': function() {
                 *     console.log('clicked ' + this.label);
                 *   }
                 * };
                 *
                 * _.bindAll(view, ['click']);
                 * jQuery(element).on('click', view.click);
                 * // => Logs 'clicked docs' when clicked.
                 */
                var bindAll = flatRest(function (object, methodNames) {
                  arrayEach(methodNames, function (key) {
                    key = toKey(key);
                    baseAssignValue(object, key, bind(object[key], object));
                  });
                  return object;
                });

                /**
                 * Creates a function that iterates over `pairs` and invokes the corresponding
                 * function of the first predicate to return truthy. The predicate-function
                 * pairs are invoked with the `this` binding and arguments of the created
                 * function.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Array} pairs The predicate-function pairs.
                 * @returns {Function} Returns the new composite function.
                 * @example
                 *
                 * var func = _.cond([
                 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                 *   [_.stubTrue,                      _.constant('no match')]
                 * ]);
                 *
                 * func({ 'a': 1, 'b': 2 });
                 * // => 'matches A'
                 *
                 * func({ 'a': 0, 'b': 1 });
                 * // => 'matches B'
                 *
                 * func({ 'a': '1', 'b': '2' });
                 * // => 'no match'
                 */
                function cond(pairs) {
                  var length = pairs == null ? 0 : pairs.length,
                    toIteratee = getIteratee();

                  pairs = !length
                    ? []
                    : arrayMap(pairs, function (pair) {
                        if (typeof pair[1] != "function") {
                          throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return [toIteratee(pair[0]), pair[1]];
                      });

                  return baseRest(function (args) {
                    var index = -1;
                    while (++index < length) {
                      var pair = pairs[index];
                      if (apply(pair[0], this, args)) {
                        return apply(pair[1], this, args);
                      }
                    }
                  });
                }

                /**
                 * Creates a function that invokes the predicate properties of `source` with
                 * the corresponding property values of a given object, returning `true` if
                 * all predicates return truthy, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.conformsTo` with
                 * `source` partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 2, 'b': 1 },
                 *   { 'a': 1, 'b': 2 }
                 * ];
                 *
                 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                 * // => [{ 'a': 1, 'b': 2 }]
                 */
                function conforms(source) {
                  return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that returns `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {*} value The value to return from the new function.
                 * @returns {Function} Returns the new constant function.
                 * @example
                 *
                 * var objects = _.times(2, _.constant({ 'a': 1 }));
                 *
                 * console.log(objects);
                 * // => [{ 'a': 1 }, { 'a': 1 }]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => true
                 */
                function constant(value) {
                  return function () {
                    return value;
                  };
                }

                /**
                 * Checks `value` to determine whether a default value should be returned in
                 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                 * or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Util
                 * @param {*} value The value to check.
                 * @param {*} defaultValue The default value.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * _.defaultTo(1, 10);
                 * // => 1
                 *
                 * _.defaultTo(undefined, 10);
                 * // => 10
                 */
                function defaultTo(value, defaultValue) {
                  return value == null || value !== value
                    ? defaultValue
                    : value;
                }

                /**
                 * Creates a function that returns the result of invoking the given functions
                 * with the `this` binding of the created function, where each successive
                 * invocation is supplied the return value of the previous.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flowRight
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var addSquare = _.flow([_.add, square]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flow = createFlow();

                /**
                 * This method is like `_.flow` except that it creates a function that
                 * invokes the given functions from right to left.
                 *
                 * @static
                 * @since 3.0.0
                 * @memberOf _
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flow
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var addSquare = _.flowRight([square, _.add]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flowRight = createFlow(true);

                /**
                 * This method returns the first argument it receives.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {*} value Any value.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 *
                 * console.log(_.identity(object) === object);
                 * // => true
                 */
                function identity(value) {
                  return value;
                }

                /**
                 * Creates a function that invokes `func` with the arguments of the created
                 * function. If `func` is a property name, the created function returns the
                 * property value for a given element. If `func` is an array or object, the
                 * created function returns `true` for elements that contain the equivalent
                 * source properties, otherwise it returns `false`.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Util
                 * @param {*} [func=_.identity] The value to convert to a callback.
                 * @returns {Function} Returns the callback.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, _.iteratee(['user', 'fred']));
                 * // => [{ 'user': 'fred', 'age': 40 }]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, _.iteratee('user'));
                 * // => ['barney', 'fred']
                 *
                 * // Create custom iteratee shorthands.
                 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
                 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
                 *     return func.test(string);
                 *   };
                 * });
                 *
                 * _.filter(['abc', 'def'], /ef/);
                 * // => ['def']
                 */
                function iteratee(func) {
                  return baseIteratee(
                    typeof func == "function"
                      ? func
                      : baseClone(func, CLONE_DEEP_FLAG)
                  );
                }

                /**
                 * Creates a function that performs a partial deep comparison between a given
                 * object and `source`, returning `true` if the given object has equivalent
                 * property values, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.isMatch` with `source`
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * **Note:** Multiple values can be checked by combining several matchers
                 * using `_.overSome`
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                 *
                 * // Checking for several possible values
                 * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
                 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
                 */
                function matches(source) {
                  return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that performs a partial deep comparison between the
                 * value at `path` of a given object to `srcValue`, returning `true` if the
                 * object value is equivalent, else `false`.
                 *
                 * **Note:** Partial comparisons will match empty array and empty object
                 * `srcValue` values against any array or object value, respectively. See
                 * `_.isEqual` for a list of supported value comparisons.
                 *
                 * **Note:** Multiple values can be checked by combining several matchers
                 * using `_.overSome`
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.find(objects, _.matchesProperty('a', 4));
                 * // => { 'a': 4, 'b': 5, 'c': 6 }
                 *
                 * // Checking for several possible values
                 * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
                 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
                 */
                function matchesProperty(path, srcValue) {
                  return baseMatchesProperty(
                    path,
                    baseClone(srcValue, CLONE_DEEP_FLAG)
                  );
                }

                /**
                 * Creates a function that invokes the method at `path` of a given object.
                 * Any additional arguments are provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': _.constant(2) } },
                 *   { 'a': { 'b': _.constant(1) } }
                 * ];
                 *
                 * _.map(objects, _.method('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(objects, _.method(['a', 'b']));
                 * // => [2, 1]
                 */
                var method = baseRest(function (path, args) {
                  return function (object) {
                    return baseInvoke(object, path, args);
                  };
                });

                /**
                 * The opposite of `_.method`; this method creates a function that invokes
                 * the method at a given path of `object`. Any additional arguments are
                 * provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var array = _.times(3, _.constant),
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                 * // => [2, 0]
                 */
                var methodOf = baseRest(function (object, args) {
                  return function (path) {
                    return baseInvoke(object, path, args);
                  };
                });

                /**
                 * Adds all own enumerable string keyed function properties of a source
                 * object to the destination object. If `object` is a function, then methods
                 * are added to its prototype as well.
                 *
                 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                 * avoid conflicts caused by modifying the original.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Function|Object} [object=lodash] The destination object.
                 * @param {Object} source The object of functions to add.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                 * @returns {Function|Object} Returns `object`.
                 * @example
                 *
                 * function vowels(string) {
                 *   return _.filter(string, function(v) {
                 *     return /[aeiou]/i.test(v);
                 *   });
                 * }
                 *
                 * _.mixin({ 'vowels': vowels });
                 * _.vowels('fred');
                 * // => ['e']
                 *
                 * _('fred').vowels().value();
                 * // => ['e']
                 *
                 * _.mixin({ 'vowels': vowels }, { 'chain': false });
                 * _('fred').vowels();
                 * // => ['e']
                 */
                function mixin(object, source, options) {
                  var props = keys(source),
                    methodNames = baseFunctions(source, props);

                  if (
                    options == null &&
                    !(isObject(source) && (methodNames.length || !props.length))
                  ) {
                    options = source;
                    source = object;
                    object = this;
                    methodNames = baseFunctions(source, keys(source));
                  }
                  var chain =
                      !(isObject(options) && "chain" in options) ||
                      !!options.chain,
                    isFunc = isFunction(object);

                  arrayEach(methodNames, function (methodName) {
                    var func = source[methodName];
                    object[methodName] = func;
                    if (isFunc) {
                      object.prototype[methodName] = function () {
                        var chainAll = this.__chain__;
                        if (chain || chainAll) {
                          var result = object(this.__wrapped__),
                            actions = (result.__actions__ = copyArray(
                              this.__actions__
                            ));

                          actions.push({
                            func: func,
                            args: arguments,
                            thisArg: object,
                          });
                          result.__chain__ = chainAll;
                          return result;
                        }
                        return func.apply(
                          object,
                          arrayPush([this.value()], arguments)
                        );
                      };
                    }
                  });

                  return object;
                }

                /**
                 * Reverts the `_` variable to its previous value and returns a reference to
                 * the `lodash` function.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @returns {Function} Returns the `lodash` function.
                 * @example
                 *
                 * var lodash = _.noConflict();
                 */
                function noConflict() {
                  if (root._ === this) {
                    root._ = oldDash;
                  }
                  return this;
                }

                /**
                 * This method returns `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Util
                 * @example
                 *
                 * _.times(2, _.noop);
                 * // => [undefined, undefined]
                 */
                function noop() {
                  // No operation performed.
                }

                /**
                 * Creates a function that gets the argument at index `n`. If `n` is negative,
                 * the nth argument from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [n=0] The index of the argument to return.
                 * @returns {Function} Returns the new pass-thru function.
                 * @example
                 *
                 * var func = _.nthArg(1);
                 * func('a', 'b', 'c', 'd');
                 * // => 'b'
                 *
                 * var func = _.nthArg(-2);
                 * func('a', 'b', 'c', 'd');
                 * // => 'c'
                 */
                function nthArg(n) {
                  n = toInteger(n);
                  return baseRest(function (args) {
                    return baseNth(args, n);
                  });
                }

                /**
                 * Creates a function that invokes `iteratees` with the arguments it receives
                 * and returns their results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to invoke.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.over([Math.max, Math.min]);
                 *
                 * func(1, 2, 3, 4);
                 * // => [4, 1]
                 */
                var over = createOver(arrayMap);

                /**
                 * Creates a function that checks if **all** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * Following shorthands are possible for providing predicates.
                 * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
                 * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overEvery([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => false
                 *
                 * func(NaN);
                 * // => false
                 */
                var overEvery = createOver(arrayEvery);

                /**
                 * Creates a function that checks if **any** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * Following shorthands are possible for providing predicates.
                 * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
                 * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overSome([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => true
                 *
                 * func(NaN);
                 * // => false
                 *
                 * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
                 * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
                 */
                var overSome = createOver(arraySome);

                /**
                 * Creates a function that returns the value at `path` of a given object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': 2 } },
                 *   { 'a': { 'b': 1 } }
                 * ];
                 *
                 * _.map(objects, _.property('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                 * // => [1, 2]
                 */
                function property(path) {
                  return isKey(path)
                    ? baseProperty(toKey(path))
                    : basePropertyDeep(path);
                }

                /**
                 * The opposite of `_.property`; this method creates a function that returns
                 * the value at a given path of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var array = [0, 1, 2],
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                 * // => [2, 0]
                 */
                function propertyOf(object) {
                  return function (path) {
                    return object == null ? undefined : baseGet(object, path);
                  };
                }

                /**
                 * Creates an array of numbers (positive and/or negative) progressing from
                 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                 * `start` is specified without an `end` or `step`. If `end` is not specified,
                 * it's set to `start` with `start` then set to `0`.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.rangeRight
                 * @example
                 *
                 * _.range(4);
                 * // => [0, 1, 2, 3]
                 *
                 * _.range(-4);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 5);
                 * // => [1, 2, 3, 4]
                 *
                 * _.range(0, 20, 5);
                 * // => [0, 5, 10, 15]
                 *
                 * _.range(0, -4, -1);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.range(0);
                 * // => []
                 */
                var range = createRange();

                /**
                 * This method is like `_.range` except that it populates values in
                 * descending order.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.range
                 * @example
                 *
                 * _.rangeRight(4);
                 * // => [3, 2, 1, 0]
                 *
                 * _.rangeRight(-4);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 5);
                 * // => [4, 3, 2, 1]
                 *
                 * _.rangeRight(0, 20, 5);
                 * // => [15, 10, 5, 0]
                 *
                 * _.rangeRight(0, -4, -1);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.rangeRight(0);
                 * // => []
                 */
                var rangeRight = createRange(true);

                /**
                 * This method returns a new empty array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Array} Returns the new empty array.
                 * @example
                 *
                 * var arrays = _.times(2, _.stubArray);
                 *
                 * console.log(arrays);
                 * // => [[], []]
                 *
                 * console.log(arrays[0] === arrays[1]);
                 * // => false
                 */
                function stubArray() {
                  return [];
                }

                /**
                 * This method returns `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `false`.
                 * @example
                 *
                 * _.times(2, _.stubFalse);
                 * // => [false, false]
                 */
                function stubFalse() {
                  return false;
                }

                /**
                 * This method returns a new empty object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Object} Returns the new empty object.
                 * @example
                 *
                 * var objects = _.times(2, _.stubObject);
                 *
                 * console.log(objects);
                 * // => [{}, {}]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => false
                 */
                function stubObject() {
                  return {};
                }

                /**
                 * This method returns an empty string.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {string} Returns the empty string.
                 * @example
                 *
                 * _.times(2, _.stubString);
                 * // => ['', '']
                 */
                function stubString() {
                  return "";
                }

                /**
                 * This method returns `true`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `true`.
                 * @example
                 *
                 * _.times(2, _.stubTrue);
                 * // => [true, true]
                 */
                function stubTrue() {
                  return true;
                }

                /**
                 * Invokes the iteratee `n` times, returning an array of the results of
                 * each invocation. The iteratee is invoked with one argument; (index).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.times(3, String);
                 * // => ['0', '1', '2']
                 *
                 *  _.times(4, _.constant(0));
                 * // => [0, 0, 0, 0]
                 */
                function times(n, iteratee) {
                  n = toInteger(n);
                  if (n < 1 || n > MAX_SAFE_INTEGER) {
                    return [];
                  }
                  var index = MAX_ARRAY_LENGTH,
                    length = nativeMin(n, MAX_ARRAY_LENGTH);

                  iteratee = getIteratee(iteratee);
                  n -= MAX_ARRAY_LENGTH;

                  var result = baseTimes(length, iteratee);
                  while (++index < n) {
                    iteratee(index);
                  }
                  return result;
                }

                /**
                 * Converts `value` to a property path array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the new property path array.
                 * @example
                 *
                 * _.toPath('a.b.c');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toPath('a[0].b.c');
                 * // => ['a', '0', 'b', 'c']
                 */
                function toPath(value) {
                  if (isArray(value)) {
                    return arrayMap(value, toKey);
                  }
                  return isSymbol(value)
                    ? [value]
                    : copyArray(stringToPath(toString(value)));
                }

                /**
                 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {string} [prefix=''] The value to prefix the ID with.
                 * @returns {string} Returns the unique ID.
                 * @example
                 *
                 * _.uniqueId('contact_');
                 * // => 'contact_104'
                 *
                 * _.uniqueId();
                 * // => '105'
                 */
                function uniqueId(prefix) {
                  var id = ++idCounter;
                  return toString(prefix) + id;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Adds two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {number} augend The first number in an addition.
                 * @param {number} addend The second number in an addition.
                 * @returns {number} Returns the total.
                 * @example
                 *
                 * _.add(6, 4);
                 * // => 10
                 */
                var add = createMathOperation(function (augend, addend) {
                  return augend + addend;
                }, 0);

                /**
                 * Computes `number` rounded up to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round up.
                 * @param {number} [precision=0] The precision to round up to.
                 * @returns {number} Returns the rounded up number.
                 * @example
                 *
                 * _.ceil(4.006);
                 * // => 5
                 *
                 * _.ceil(6.004, 2);
                 * // => 6.01
                 *
                 * _.ceil(6040, -2);
                 * // => 6100
                 */
                var ceil = createRound("ceil");

                /**
                 * Divide two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} dividend The first number in a division.
                 * @param {number} divisor The second number in a division.
                 * @returns {number} Returns the quotient.
                 * @example
                 *
                 * _.divide(6, 4);
                 * // => 1.5
                 */
                var divide = createMathOperation(function (dividend, divisor) {
                  return dividend / divisor;
                }, 1);

                /**
                 * Computes `number` rounded down to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round down.
                 * @param {number} [precision=0] The precision to round down to.
                 * @returns {number} Returns the rounded down number.
                 * @example
                 *
                 * _.floor(4.006);
                 * // => 4
                 *
                 * _.floor(0.046, 2);
                 * // => 0.04
                 *
                 * _.floor(4060, -2);
                 * // => 4000
                 */
                var floor = createRound("floor");

                /**
                 * Computes the maximum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * _.max([4, 2, 8, 6]);
                 * // => 8
                 *
                 * _.max([]);
                 * // => undefined
                 */
                function max(array) {
                  return array && array.length
                    ? baseExtremum(array, identity, baseGt)
                    : undefined;
                }

                /**
                 * This method is like `_.max` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.maxBy(objects, function(o) { return o.n; });
                 * // => { 'n': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.maxBy(objects, 'n');
                 * // => { 'n': 2 }
                 */
                function maxBy(array, iteratee) {
                  return array && array.length
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                    : undefined;
                }

                /**
                 * Computes the mean of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * _.mean([4, 2, 8, 6]);
                 * // => 5
                 */
                function mean(array) {
                  return baseMean(array, identity);
                }

                /**
                 * This method is like `_.mean` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be averaged.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.meanBy(objects, function(o) { return o.n; });
                 * // => 5
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.meanBy(objects, 'n');
                 * // => 5
                 */
                function meanBy(array, iteratee) {
                  return baseMean(array, getIteratee(iteratee, 2));
                }

                /**
                 * Computes the minimum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * _.min([4, 2, 8, 6]);
                 * // => 2
                 *
                 * _.min([]);
                 * // => undefined
                 */
                function min(array) {
                  return array && array.length
                    ? baseExtremum(array, identity, baseLt)
                    : undefined;
                }

                /**
                 * This method is like `_.min` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.minBy(objects, function(o) { return o.n; });
                 * // => { 'n': 1 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.minBy(objects, 'n');
                 * // => { 'n': 1 }
                 */
                function minBy(array, iteratee) {
                  return array && array.length
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                    : undefined;
                }

                /**
                 * Multiply two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} multiplier The first number in a multiplication.
                 * @param {number} multiplicand The second number in a multiplication.
                 * @returns {number} Returns the product.
                 * @example
                 *
                 * _.multiply(6, 4);
                 * // => 24
                 */
                var multiply = createMathOperation(function (
                  multiplier,
                  multiplicand
                ) {
                  return multiplier * multiplicand;
                },
                1);

                /**
                 * Computes `number` rounded to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round.
                 * @param {number} [precision=0] The precision to round to.
                 * @returns {number} Returns the rounded number.
                 * @example
                 *
                 * _.round(4.006);
                 * // => 4
                 *
                 * _.round(4.006, 2);
                 * // => 4.01
                 *
                 * _.round(4060, -2);
                 * // => 4100
                 */
                var round = createRound("round");

                /**
                 * Subtract two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {number} minuend The first number in a subtraction.
                 * @param {number} subtrahend The second number in a subtraction.
                 * @returns {number} Returns the difference.
                 * @example
                 *
                 * _.subtract(6, 4);
                 * // => 2
                 */
                var subtract = createMathOperation(function (
                  minuend,
                  subtrahend
                ) {
                  return minuend - subtrahend;
                },
                0);

                /**
                 * Computes the sum of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * _.sum([4, 2, 8, 6]);
                 * // => 20
                 */
                function sum(array) {
                  return array && array.length ? baseSum(array, identity) : 0;
                }

                /**
                 * This method is like `_.sum` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be summed.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.sumBy(objects, function(o) { return o.n; });
                 * // => 20
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sumBy(objects, 'n');
                 * // => 20
                 */
                function sumBy(array, iteratee) {
                  return array && array.length
                    ? baseSum(array, getIteratee(iteratee, 2))
                    : 0;
                }

                /*------------------------------------------------------------------------*/

                // Add methods that return wrapped values in chain sequences.
                lodash.after = after;
                lodash.ary = ary;
                lodash.assign = assign;
                lodash.assignIn = assignIn;
                lodash.assignInWith = assignInWith;
                lodash.assignWith = assignWith;
                lodash.at = at;
                lodash.before = before;
                lodash.bind = bind;
                lodash.bindAll = bindAll;
                lodash.bindKey = bindKey;
                lodash.castArray = castArray;
                lodash.chain = chain;
                lodash.chunk = chunk;
                lodash.compact = compact;
                lodash.concat = concat;
                lodash.cond = cond;
                lodash.conforms = conforms;
                lodash.constant = constant;
                lodash.countBy = countBy;
                lodash.create = create;
                lodash.curry = curry;
                lodash.curryRight = curryRight;
                lodash.debounce = debounce;
                lodash.defaults = defaults;
                lodash.defaultsDeep = defaultsDeep;
                lodash.defer = defer;
                lodash.delay = delay;
                lodash.difference = difference;
                lodash.differenceBy = differenceBy;
                lodash.differenceWith = differenceWith;
                lodash.drop = drop;
                lodash.dropRight = dropRight;
                lodash.dropRightWhile = dropRightWhile;
                lodash.dropWhile = dropWhile;
                lodash.fill = fill;
                lodash.filter = filter;
                lodash.flatMap = flatMap;
                lodash.flatMapDeep = flatMapDeep;
                lodash.flatMapDepth = flatMapDepth;
                lodash.flatten = flatten;
                lodash.flattenDeep = flattenDeep;
                lodash.flattenDepth = flattenDepth;
                lodash.flip = flip;
                lodash.flow = flow;
                lodash.flowRight = flowRight;
                lodash.fromPairs = fromPairs;
                lodash.functions = functions;
                lodash.functionsIn = functionsIn;
                lodash.groupBy = groupBy;
                lodash.initial = initial;
                lodash.intersection = intersection;
                lodash.intersectionBy = intersectionBy;
                lodash.intersectionWith = intersectionWith;
                lodash.invert = invert;
                lodash.invertBy = invertBy;
                lodash.invokeMap = invokeMap;
                lodash.iteratee = iteratee;
                lodash.keyBy = keyBy;
                lodash.keys = keys;
                lodash.keysIn = keysIn;
                lodash.map = map;
                lodash.mapKeys = mapKeys;
                lodash.mapValues = mapValues;
                lodash.matches = matches;
                lodash.matchesProperty = matchesProperty;
                lodash.memoize = memoize;
                lodash.merge = merge;
                lodash.mergeWith = mergeWith;
                lodash.method = method;
                lodash.methodOf = methodOf;
                lodash.mixin = mixin;
                lodash.negate = negate;
                lodash.nthArg = nthArg;
                lodash.omit = omit;
                lodash.omitBy = omitBy;
                lodash.once = once;
                lodash.orderBy = orderBy;
                lodash.over = over;
                lodash.overArgs = overArgs;
                lodash.overEvery = overEvery;
                lodash.overSome = overSome;
                lodash.partial = partial;
                lodash.partialRight = partialRight;
                lodash.partition = partition;
                lodash.pick = pick;
                lodash.pickBy = pickBy;
                lodash.property = property;
                lodash.propertyOf = propertyOf;
                lodash.pull = pull;
                lodash.pullAll = pullAll;
                lodash.pullAllBy = pullAllBy;
                lodash.pullAllWith = pullAllWith;
                lodash.pullAt = pullAt;
                lodash.range = range;
                lodash.rangeRight = rangeRight;
                lodash.rearg = rearg;
                lodash.reject = reject;
                lodash.remove = remove;
                lodash.rest = rest;
                lodash.reverse = reverse;
                lodash.sampleSize = sampleSize;
                lodash.set = set;
                lodash.setWith = setWith;
                lodash.shuffle = shuffle;
                lodash.slice = slice;
                lodash.sortBy = sortBy;
                lodash.sortedUniq = sortedUniq;
                lodash.sortedUniqBy = sortedUniqBy;
                lodash.split = split;
                lodash.spread = spread;
                lodash.tail = tail;
                lodash.take = take;
                lodash.takeRight = takeRight;
                lodash.takeRightWhile = takeRightWhile;
                lodash.takeWhile = takeWhile;
                lodash.tap = tap;
                lodash.throttle = throttle;
                lodash.thru = thru;
                lodash.toArray = toArray;
                lodash.toPairs = toPairs;
                lodash.toPairsIn = toPairsIn;
                lodash.toPath = toPath;
                lodash.toPlainObject = toPlainObject;
                lodash.transform = transform;
                lodash.unary = unary;
                lodash.union = union;
                lodash.unionBy = unionBy;
                lodash.unionWith = unionWith;
                lodash.uniq = uniq;
                lodash.uniqBy = uniqBy;
                lodash.uniqWith = uniqWith;
                lodash.unset = unset;
                lodash.unzip = unzip;
                lodash.unzipWith = unzipWith;
                lodash.update = update;
                lodash.updateWith = updateWith;
                lodash.values = values;
                lodash.valuesIn = valuesIn;
                lodash.without = without;
                lodash.words = words;
                lodash.wrap = wrap;
                lodash.xor = xor;
                lodash.xorBy = xorBy;
                lodash.xorWith = xorWith;
                lodash.zip = zip;
                lodash.zipObject = zipObject;
                lodash.zipObjectDeep = zipObjectDeep;
                lodash.zipWith = zipWith;

                // Add aliases.
                lodash.entries = toPairs;
                lodash.entriesIn = toPairsIn;
                lodash.extend = assignIn;
                lodash.extendWith = assignInWith;

                // Add methods to `lodash.prototype`.
                mixin(lodash, lodash);

                /*------------------------------------------------------------------------*/

                // Add methods that return unwrapped values in chain sequences.
                lodash.add = add;
                lodash.attempt = attempt;
                lodash.camelCase = camelCase;
                lodash.capitalize = capitalize;
                lodash.ceil = ceil;
                lodash.clamp = clamp;
                lodash.clone = clone;
                lodash.cloneDeep = cloneDeep;
                lodash.cloneDeepWith = cloneDeepWith;
                lodash.cloneWith = cloneWith;
                lodash.conformsTo = conformsTo;
                lodash.deburr = deburr;
                lodash.defaultTo = defaultTo;
                lodash.divide = divide;
                lodash.endsWith = endsWith;
                lodash.eq = eq;
                lodash.escape = escape;
                lodash.escapeRegExp = escapeRegExp;
                lodash.every = every;
                lodash.find = find;
                lodash.findIndex = findIndex;
                lodash.findKey = findKey;
                lodash.findLast = findLast;
                lodash.findLastIndex = findLastIndex;
                lodash.findLastKey = findLastKey;
                lodash.floor = floor;
                lodash.forEach = forEach;
                lodash.forEachRight = forEachRight;
                lodash.forIn = forIn;
                lodash.forInRight = forInRight;
                lodash.forOwn = forOwn;
                lodash.forOwnRight = forOwnRight;
                lodash.get = get;
                lodash.gt = gt;
                lodash.gte = gte;
                lodash.has = has;
                lodash.hasIn = hasIn;
                lodash.head = head;
                lodash.identity = identity;
                lodash.includes = includes;
                lodash.indexOf = indexOf;
                lodash.inRange = inRange;
                lodash.invoke = invoke;
                lodash.isArguments = isArguments;
                lodash.isArray = isArray;
                lodash.isArrayBuffer = isArrayBuffer;
                lodash.isArrayLike = isArrayLike;
                lodash.isArrayLikeObject = isArrayLikeObject;
                lodash.isBoolean = isBoolean;
                lodash.isBuffer = isBuffer;
                lodash.isDate = isDate;
                lodash.isElement = isElement;
                lodash.isEmpty = isEmpty;
                lodash.isEqual = isEqual;
                lodash.isEqualWith = isEqualWith;
                lodash.isError = isError;
                lodash.isFinite = isFinite;
                lodash.isFunction = isFunction;
                lodash.isInteger = isInteger;
                lodash.isLength = isLength;
                lodash.isMap = isMap;
                lodash.isMatch = isMatch;
                lodash.isMatchWith = isMatchWith;
                lodash.isNaN = isNaN;
                lodash.isNative = isNative;
                lodash.isNil = isNil;
                lodash.isNull = isNull;
                lodash.isNumber = isNumber;
                lodash.isObject = isObject;
                lodash.isObjectLike = isObjectLike;
                lodash.isPlainObject = isPlainObject;
                lodash.isRegExp = isRegExp;
                lodash.isSafeInteger = isSafeInteger;
                lodash.isSet = isSet;
                lodash.isString = isString;
                lodash.isSymbol = isSymbol;
                lodash.isTypedArray = isTypedArray;
                lodash.isUndefined = isUndefined;
                lodash.isWeakMap = isWeakMap;
                lodash.isWeakSet = isWeakSet;
                lodash.join = join;
                lodash.kebabCase = kebabCase;
                lodash.last = last;
                lodash.lastIndexOf = lastIndexOf;
                lodash.lowerCase = lowerCase;
                lodash.lowerFirst = lowerFirst;
                lodash.lt = lt;
                lodash.lte = lte;
                lodash.max = max;
                lodash.maxBy = maxBy;
                lodash.mean = mean;
                lodash.meanBy = meanBy;
                lodash.min = min;
                lodash.minBy = minBy;
                lodash.stubArray = stubArray;
                lodash.stubFalse = stubFalse;
                lodash.stubObject = stubObject;
                lodash.stubString = stubString;
                lodash.stubTrue = stubTrue;
                lodash.multiply = multiply;
                lodash.nth = nth;
                lodash.noConflict = noConflict;
                lodash.noop = noop;
                lodash.now = now;
                lodash.pad = pad;
                lodash.padEnd = padEnd;
                lodash.padStart = padStart;
                lodash.parseInt = parseInt;
                lodash.random = random;
                lodash.reduce = reduce;
                lodash.reduceRight = reduceRight;
                lodash.repeat = repeat;
                lodash.replace = replace;
                lodash.result = result;
                lodash.round = round;
                lodash.runInContext = runInContext;
                lodash.sample = sample;
                lodash.size = size;
                lodash.snakeCase = snakeCase;
                lodash.some = some;
                lodash.sortedIndex = sortedIndex;
                lodash.sortedIndexBy = sortedIndexBy;
                lodash.sortedIndexOf = sortedIndexOf;
                lodash.sortedLastIndex = sortedLastIndex;
                lodash.sortedLastIndexBy = sortedLastIndexBy;
                lodash.sortedLastIndexOf = sortedLastIndexOf;
                lodash.startCase = startCase;
                lodash.startsWith = startsWith;
                lodash.subtract = subtract;
                lodash.sum = sum;
                lodash.sumBy = sumBy;
                lodash.template = template;
                lodash.times = times;
                lodash.toFinite = toFinite;
                lodash.toInteger = toInteger;
                lodash.toLength = toLength;
                lodash.toLower = toLower;
                lodash.toNumber = toNumber;
                lodash.toSafeInteger = toSafeInteger;
                lodash.toString = toString;
                lodash.toUpper = toUpper;
                lodash.trim = trim;
                lodash.trimEnd = trimEnd;
                lodash.trimStart = trimStart;
                lodash.truncate = truncate;
                lodash.unescape = unescape;
                lodash.uniqueId = uniqueId;
                lodash.upperCase = upperCase;
                lodash.upperFirst = upperFirst;

                // Add aliases.
                lodash.each = forEach;
                lodash.eachRight = forEachRight;
                lodash.first = head;

                mixin(
                  lodash,
                  (function () {
                    var source = {};
                    baseForOwn(lodash, function (func, methodName) {
                      if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                        source[methodName] = func;
                      }
                    });
                    return source;
                  })(),
                  { chain: false }
                );

                /*------------------------------------------------------------------------*/

                /**
                 * The semantic version number.
                 *
                 * @static
                 * @memberOf _
                 * @type {string}
                 */
                lodash.VERSION = VERSION;

                // Assign default placeholders.
                arrayEach(
                  [
                    "bind",
                    "bindKey",
                    "curry",
                    "curryRight",
                    "partial",
                    "partialRight",
                  ],
                  function (methodName) {
                    lodash[methodName].placeholder = lodash;
                  }
                );

                // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                arrayEach(["drop", "take"], function (methodName, index) {
                  LazyWrapper.prototype[methodName] = function (n) {
                    n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                    var result =
                      this.__filtered__ && !index
                        ? new LazyWrapper(this)
                        : this.clone();

                    if (result.__filtered__) {
                      result.__takeCount__ = nativeMin(n, result.__takeCount__);
                    } else {
                      result.__views__.push({
                        size: nativeMin(n, MAX_ARRAY_LENGTH),
                        type: methodName + (result.__dir__ < 0 ? "Right" : ""),
                      });
                    }
                    return result;
                  };

                  LazyWrapper.prototype[methodName + "Right"] = function (n) {
                    return this.reverse()[methodName](n).reverse();
                  };
                });

                // Add `LazyWrapper` methods that accept an `iteratee` value.
                arrayEach(
                  ["filter", "map", "takeWhile"],
                  function (methodName, index) {
                    var type = index + 1,
                      isFilter =
                        type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                    LazyWrapper.prototype[methodName] = function (iteratee) {
                      var result = this.clone();
                      result.__iteratees__.push({
                        iteratee: getIteratee(iteratee, 3),
                        type: type,
                      });
                      result.__filtered__ = result.__filtered__ || isFilter;
                      return result;
                    };
                  }
                );

                // Add `LazyWrapper` methods for `_.head` and `_.last`.
                arrayEach(["head", "last"], function (methodName, index) {
                  var takeName = "take" + (index ? "Right" : "");

                  LazyWrapper.prototype[methodName] = function () {
                    return this[takeName](1).value()[0];
                  };
                });

                // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                arrayEach(["initial", "tail"], function (methodName, index) {
                  var dropName = "drop" + (index ? "" : "Right");

                  LazyWrapper.prototype[methodName] = function () {
                    return this.__filtered__
                      ? new LazyWrapper(this)
                      : this[dropName](1);
                  };
                });

                LazyWrapper.prototype.compact = function () {
                  return this.filter(identity);
                };

                LazyWrapper.prototype.find = function (predicate) {
                  return this.filter(predicate).head();
                };

                LazyWrapper.prototype.findLast = function (predicate) {
                  return this.reverse().find(predicate);
                };

                LazyWrapper.prototype.invokeMap = baseRest(function (
                  path,
                  args
                ) {
                  if (typeof path == "function") {
                    return new LazyWrapper(this);
                  }
                  return this.map(function (value) {
                    return baseInvoke(value, path, args);
                  });
                });

                LazyWrapper.prototype.reject = function (predicate) {
                  return this.filter(negate(getIteratee(predicate)));
                };

                LazyWrapper.prototype.slice = function (start, end) {
                  start = toInteger(start);

                  var result = this;
                  if (result.__filtered__ && (start > 0 || end < 0)) {
                    return new LazyWrapper(result);
                  }
                  if (start < 0) {
                    result = result.takeRight(-start);
                  } else if (start) {
                    result = result.drop(start);
                  }
                  if (end !== undefined) {
                    end = toInteger(end);
                    result =
                      end < 0
                        ? result.dropRight(-end)
                        : result.take(end - start);
                  }
                  return result;
                };

                LazyWrapper.prototype.takeRightWhile = function (predicate) {
                  return this.reverse().takeWhile(predicate).reverse();
                };

                LazyWrapper.prototype.toArray = function () {
                  return this.take(MAX_ARRAY_LENGTH);
                };

                // Add `LazyWrapper` methods to `lodash.prototype`.
                baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                  var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
                      methodName
                    ),
                    isTaker = /^(?:head|last)$/.test(methodName),
                    lodashFunc =
                      lodash[
                        isTaker
                          ? "take" + (methodName == "last" ? "Right" : "")
                          : methodName
                      ],
                    retUnwrapped = isTaker || /^find/.test(methodName);

                  if (!lodashFunc) {
                    return;
                  }
                  lodash.prototype[methodName] = function () {
                    var value = this.__wrapped__,
                      args = isTaker ? [1] : arguments,
                      isLazy = value instanceof LazyWrapper,
                      iteratee = args[0],
                      useLazy = isLazy || isArray(value);

                    var interceptor = function (value) {
                      var result = lodashFunc.apply(
                        lodash,
                        arrayPush([value], args)
                      );
                      return isTaker && chainAll ? result[0] : result;
                    };

                    if (
                      useLazy &&
                      checkIteratee &&
                      typeof iteratee == "function" &&
                      iteratee.length != 1
                    ) {
                      // Avoid lazy use if the iteratee has a "length" value other than `1`.
                      isLazy = useLazy = false;
                    }
                    var chainAll = this.__chain__,
                      isHybrid = !!this.__actions__.length,
                      isUnwrapped = retUnwrapped && !chainAll,
                      onlyLazy = isLazy && !isHybrid;

                    if (!retUnwrapped && useLazy) {
                      value = onlyLazy ? value : new LazyWrapper(this);
                      var result = func.apply(value, args);
                      result.__actions__.push({
                        func: thru,
                        args: [interceptor],
                        thisArg: undefined,
                      });
                      return new LodashWrapper(result, chainAll);
                    }
                    if (isUnwrapped && onlyLazy) {
                      return func.apply(this, args);
                    }
                    result = this.thru(interceptor);
                    return isUnwrapped
                      ? isTaker
                        ? result.value()[0]
                        : result.value()
                      : result;
                  };
                });

                // Add `Array` methods to `lodash.prototype`.
                arrayEach(
                  ["pop", "push", "shift", "sort", "splice", "unshift"],
                  function (methodName) {
                    var func = arrayProto[methodName],
                      chainName = /^(?:push|sort|unshift)$/.test(methodName)
                        ? "tap"
                        : "thru",
                      retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                    lodash.prototype[methodName] = function () {
                      var args = arguments;
                      if (retUnwrapped && !this.__chain__) {
                        var value = this.value();
                        return func.apply(isArray(value) ? value : [], args);
                      }
                      return this[chainName](function (value) {
                        return func.apply(isArray(value) ? value : [], args);
                      });
                    };
                  }
                );

                // Map minified method names to their real names.
                baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                  var lodashFunc = lodash[methodName];
                  if (lodashFunc) {
                    var key = lodashFunc.name + "";
                    if (!hasOwnProperty.call(realNames, key)) {
                      realNames[key] = [];
                    }
                    realNames[key].push({ name: methodName, func: lodashFunc });
                  }
                });

                realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
                  {
                    name: "wrapper",
                    func: undefined,
                  },
                ];

                // Add methods to `LazyWrapper`.
                LazyWrapper.prototype.clone = lazyClone;
                LazyWrapper.prototype.reverse = lazyReverse;
                LazyWrapper.prototype.value = lazyValue;

                // Add chain sequence methods to the `lodash` wrapper.
                lodash.prototype.at = wrapperAt;
                lodash.prototype.chain = wrapperChain;
                lodash.prototype.commit = wrapperCommit;
                lodash.prototype.next = wrapperNext;
                lodash.prototype.plant = wrapperPlant;
                lodash.prototype.reverse = wrapperReverse;
                lodash.prototype.toJSON =
                  lodash.prototype.valueOf =
                  lodash.prototype.value =
                    wrapperValue;

                // Add lazy aliases.
                lodash.prototype.first = lodash.prototype.head;

                if (symIterator) {
                  lodash.prototype[symIterator] = wrapperToIterator;
                }
                return lodash;
              };

              /*--------------------------------------------------------------------------*/

              // Export lodash.
              var _ = runInContext();

              // Some AMD build optimizers, like r.js, check for condition patterns like:
              if (true) {
                // Expose Lodash on the global object to prevent errors when Lodash is
                // loaded by a script tag in the presence of an AMD loader.
                // See http://requirejs.org/docs/errors.html#mismatch for more details.
                // Use `_.noConflict` to remove Lodash from the global object.
                root._ = _;

                // Define as an anonymous module so, through path mapping, it can be
                // referenced as the "underscore" module.
                !((__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                  return _;
                }.call(exports, __webpack_require__, exports, module)),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                  (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              }
              // Check for `exports` after `define` in case a build optimizer adds it.
              else {
              }
            }.call(this));

            /* WEBPACK VAR INJECTION */
          }.call(
            this,
            __webpack_require__("c8ba"),
            __webpack_require__("62e4")(module)
          ));

          /***/
        },

        /***/ "2fcc": /***/ function (module, exports) {
          /**
           * Removes `key` and its value from the stack.
           *
           * @private
           * @name delete
           * @memberOf Stack
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function stackDelete(key) {
            var data = this.__data__,
              result = data["delete"](key);

            this.size = data.size;
            return result;
          }

          module.exports = stackDelete;

          /***/
        },

        /***/ "30c9": /***/ function (module, exports, __webpack_require__) {
          var isFunction = __webpack_require__("9520"),
            isLength = __webpack_require__("b218");

          /**
           * Checks if `value` is array-like. A value is considered array-like if it's
           * not a function and has a `value.length` that's an integer greater than or
           * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
           * @example
           *
           * _.isArrayLike([1, 2, 3]);
           * // => true
           *
           * _.isArrayLike(document.body.children);
           * // => true
           *
           * _.isArrayLike('abc');
           * // => true
           *
           * _.isArrayLike(_.noop);
           * // => false
           */
          function isArrayLike(value) {
            return (
              value != null && isLength(value.length) && !isFunction(value)
            );
          }

          module.exports = isArrayLike;

          /***/
        },

        /***/ "32f4": /***/ function (module, exports, __webpack_require__) {
          var arrayFilter = __webpack_require__("2d7c"),
            stubArray = __webpack_require__("d327");

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Built-in value references. */
          var propertyIsEnumerable = objectProto.propertyIsEnumerable;

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeGetSymbols = Object.getOwnPropertySymbols;

          /**
           * Creates an array of the own enumerable symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */
          var getSymbols = !nativeGetSymbols
            ? stubArray
            : function (object) {
                if (object == null) {
                  return [];
                }
                object = Object(object);
                return arrayFilter(nativeGetSymbols(object), function (symbol) {
                  return propertyIsEnumerable.call(object, symbol);
                });
              };

          module.exports = getSymbols;

          /***/
        },

        /***/ 3410: /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var fails = __webpack_require__("d039");
          var toObject = __webpack_require__("7b0b");
          var nativeGetPrototypeOf = __webpack_require__("e163");
          var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

          var FAILS_ON_PRIMITIVES = fails(function () {
            nativeGetPrototypeOf(1);
          });

          // `Object.getPrototypeOf` method
          // https://tc39.es/ecma262/#sec-object.getprototypeof
          $(
            {
              target: "Object",
              stat: true,
              forced: FAILS_ON_PRIMITIVES,
              sham: !CORRECT_PROTOTYPE_GETTER,
            },
            {
              getPrototypeOf: function getPrototypeOf(it) {
                return nativeGetPrototypeOf(toObject(it));
              },
            }
          );

          /***/
        },

        /***/ "342f": /***/ function (module, exports, __webpack_require__) {
          var getBuiltIn = __webpack_require__("d066");

          module.exports = getBuiltIn("navigator", "userAgent") || "";

          /***/
        },

        /***/ "34ac": /***/ function (module, exports, __webpack_require__) {
          var isFunction = __webpack_require__("9520"),
            isMasked = __webpack_require__("1368"),
            isObject = __webpack_require__("1a8c"),
            toSource = __webpack_require__("dc57");

          /**
           * Used to match `RegExp`
           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
           */
          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

          /** Used to detect host constructors (Safari). */
          var reIsHostCtor = /^\[object .+?Constructor\]$/;

          /** Used for built-in method references. */
          var funcProto = Function.prototype,
            objectProto = Object.prototype;

          /** Used to resolve the decompiled source of functions. */
          var funcToString = funcProto.toString;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /** Used to detect if a method is native. */
          var reIsNative = RegExp(
            "^" +
              funcToString
                .call(hasOwnProperty)
                .replace(reRegExpChar, "\\$&")
                .replace(
                  /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                  "$1.*?"
                ) +
              "$"
          );

          /**
           * The base implementation of `_.isNative` without bad shim checks.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           */
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }

          module.exports = baseIsNative;

          /***/
        },

        /***/ "35a1": /***/ function (module, exports, __webpack_require__) {
          var classof = __webpack_require__("f5df");
          var getMethod = __webpack_require__("dc4a");
          var Iterators = __webpack_require__("3f8c");
          var wellKnownSymbol = __webpack_require__("b622");

          var ITERATOR = wellKnownSymbol("iterator");

          module.exports = function (it) {
            if (it != undefined)
              return (
                getMethod(it, ITERATOR) ||
                getMethod(it, "@@iterator") ||
                Iterators[classof(it)]
              );
          };

          /***/
        },

        /***/ 3698: /***/ function (module, exports) {
          /**
           * Gets the value at `key` of `object`.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          module.exports = getValue;

          /***/
        },

        /***/ 3729: /***/ function (module, exports, __webpack_require__) {
          var Symbol = __webpack_require__("9e69"),
            getRawTag = __webpack_require__("00fd"),
            objectToString = __webpack_require__("29f3");

          /** `Object#toString` result references. */
          var nullTag = "[object Null]",
            undefinedTag = "[object Undefined]";

          /** Built-in value references. */
          var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

          /**
           * The base implementation of `getTag` without fallbacks for buggy environments.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object(value)
              ? getRawTag(value)
              : objectToString(value);
          }

          module.exports = baseGetTag;

          /***/
        },

        /***/ "37e8": /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var definePropertyModule = __webpack_require__("9bf2");
          var anObject = __webpack_require__("825a");
          var objectKeys = __webpack_require__("df75");

          // `Object.defineProperties` method
          // https://tc39.es/ecma262/#sec-object.defineproperties
          // eslint-disable-next-line es/no-object-defineproperties -- safe
          module.exports = DESCRIPTORS
            ? Object.defineProperties
            : function defineProperties(O, Properties) {
                anObject(O);
                var keys = objectKeys(Properties);
                var length = keys.length;
                var index = 0;
                var key;
                while (length > index)
                  definePropertyModule.f(
                    O,
                    (key = keys[index++]),
                    Properties[key]
                  );
                return O;
              };

          /***/
        },

        /***/ "39ff": /***/ function (module, exports, __webpack_require__) {
          var getNative = __webpack_require__("0b07"),
            root = __webpack_require__("2b3e");

          /* Built-in method references that are verified to be native. */
          var WeakMap = getNative(root, "WeakMap");

          module.exports = WeakMap;

          /***/
        },

        /***/ "3b4a": /***/ function (module, exports, __webpack_require__) {
          var getNative = __webpack_require__("0b07");

          var defineProperty = (function () {
            try {
              var func = getNative(Object, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {}
          })();

          module.exports = defineProperty;

          /***/
        },

        /***/ "3bb4": /***/ function (module, exports, __webpack_require__) {
          var isStrictComparable = __webpack_require__("08cc"),
            keys = __webpack_require__("ec69");

          /**
           * Gets the property names, values, and compare flags of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the match data of `object`.
           */
          function getMatchData(object) {
            var result = keys(object),
              length = result.length;

            while (length--) {
              var key = result[length],
                value = object[key];

              result[length] = [key, value, isStrictComparable(value)];
            }
            return result;
          }

          module.exports = getMatchData;

          /***/
        },

        /***/ "3bb8": /***/ function (module, exports) {
          /**
           * The inverse of `_.toPairs`; this method returns an object composed
           * from key-value `pairs`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} pairs The key-value pairs.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.fromPairs([['a', 1], ['b', 2]]);
           * // => { 'a': 1, 'b': 2 }
           */
          function fromPairs(pairs) {
            var index = -1,
              length = pairs == null ? 0 : pairs.length,
              result = {};

            while (++index < length) {
              var pair = pairs[index];
              result[pair[0]] = pair[1];
            }
            return result;
          }

          module.exports = fromPairs;

          /***/
        },

        /***/ "3bbe": /***/ function (module, exports, __webpack_require__) {
          var isCallable = __webpack_require__("1626");

          module.exports = function (argument) {
            if (typeof argument === "object" || isCallable(argument))
              return argument;
            throw TypeError(
              "Can't set " + String(argument) + " as a prototype"
            );
          };

          /***/
        },

        /***/ "3ca3": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var charAt = __webpack_require__("6547").charAt;
          var toString = __webpack_require__("577e");
          var InternalStateModule = __webpack_require__("69f3");
          var defineIterator = __webpack_require__("7dd0");

          var STRING_ITERATOR = "String Iterator";
          var setInternalState = InternalStateModule.set;
          var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

          // `String.prototype[@@iterator]` method
          // https://tc39.es/ecma262/#sec-string.prototype-@@iterator
          defineIterator(
            String,
            "String",
            function (iterated) {
              setInternalState(this, {
                type: STRING_ITERATOR,
                string: toString(iterated),
                index: 0,
              });
              // `%StringIteratorPrototype%.next` method
              // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
            },
            function next() {
              var state = getInternalState(this);
              var string = state.string;
              var index = state.index;
              var point;
              if (index >= string.length)
                return { value: undefined, done: true };
              point = charAt(string, index);
              state.index += point.length;
              return { value: point, done: false };
            }
          );

          /***/
        },

        /***/ "3f4e": /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "setupDevtoolsPlugin",
            function () {
              return setupDevtoolsPlugin;
            }
          );
          /* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__("abc5");
          /* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__("b774");
          /* harmony import */ var _proxy__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__("f30a");

          function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
            const target = Object(
              _env__WEBPACK_IMPORTED_MODULE_0__[/* getTarget */ "b"]
            )();
            const hook = Object(
              _env__WEBPACK_IMPORTED_MODULE_0__[/* getDevtoolsGlobalHook */ "a"]
            )();
            const enableProxy =
              _env__WEBPACK_IMPORTED_MODULE_0__[/* isProxyAvailable */ "c"] &&
              pluginDescriptor.enableEarlyProxy;
            if (
              hook &&
              (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)
            ) {
              hook.emit(
                _const__WEBPACK_IMPORTED_MODULE_1__[/* HOOK_SETUP */ "b"],
                pluginDescriptor,
                setupFn
              );
            } else {
              const proxy = enableProxy
                ? new _proxy__WEBPACK_IMPORTED_MODULE_2__[/* ApiProxy */ "a"](
                    pluginDescriptor,
                    hook
                  )
                : null;
              const list = (target.__VUE_DEVTOOLS_PLUGINS__ =
                target.__VUE_DEVTOOLS_PLUGINS__ || []);
              list.push({
                pluginDescriptor,
                setupFn,
                proxy,
              });
              if (proxy) setupFn(proxy.proxiedTarget);
            }
          }

          /***/
        },

        /***/ "3f8c": /***/ function (module, exports) {
          module.exports = {};

          /***/
        },

        /***/ "408a": /***/ function (module, exports) {
          var valueOf = (1.0).valueOf;

          // `thisNumberValue` abstract operation
          // https://tc39.es/ecma262/#sec-thisnumbervalue
          module.exports = function (value) {
            return valueOf.call(value);
          };

          /***/
        },

        /***/ 4245: /***/ function (module, exports, __webpack_require__) {
          var isKeyable = __webpack_require__("1290");

          /**
           * Gets the data for `map`.
           *
           * @private
           * @param {Object} map The map to query.
           * @param {string} key The reference key.
           * @returns {*} Returns the map data.
           */
          function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key)
              ? data[typeof key == "string" ? "string" : "hash"]
              : data.map;
          }

          module.exports = getMapData;

          /***/
        },

        /***/ 4284: /***/ function (module, exports) {
          /**
           * A specialized version of `_.some` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */
          function arraySome(array, predicate) {
            var index = -1,
              length = array == null ? 0 : array.length;

            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }

          module.exports = arraySome;

          /***/
        },

        /***/ "428f": /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");

          module.exports = global;

          /***/
        },

        /***/ "42a2": /***/ function (module, exports, __webpack_require__) {
          var DataView = __webpack_require__("b5a7"),
            Map = __webpack_require__("79bc"),
            Promise = __webpack_require__("1cec"),
            Set = __webpack_require__("c869"),
            WeakMap = __webpack_require__("39ff"),
            baseGetTag = __webpack_require__("3729"),
            toSource = __webpack_require__("dc57");

          /** `Object#toString` result references. */
          var mapTag = "[object Map]",
            objectTag = "[object Object]",
            promiseTag = "[object Promise]",
            setTag = "[object Set]",
            weakMapTag = "[object WeakMap]";

          var dataViewTag = "[object DataView]";

          /** Used to detect maps, sets, and weakmaps. */
          var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);

          /**
           * Gets the `toStringTag` of `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */
          var getTag = baseGetTag;

          // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
          if (
            (DataView &&
              getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map()) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set()) != setTag) ||
            (WeakMap && getTag(new WeakMap()) != weakMapTag)
          ) {
            getTag = function (value) {
              var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : "";

              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result;
            };
          }

          module.exports = getTag;

          /***/
        },

        /***/ "44ad": /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");
          var classof = __webpack_require__("c6b6");

          var split = "".split;

          // fallback for non-array-like ES3 and non-enumerable old V8 strings
          module.exports = fails(function () {
            // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
            // eslint-disable-next-line no-prototype-builtins -- safe
            return !Object("z").propertyIsEnumerable(0);
          })
            ? function (it) {
                return classof(it) == "String"
                  ? split.call(it, "")
                  : Object(it);
              }
            : Object;

          /***/
        },

        /***/ "44d2": /***/ function (module, exports, __webpack_require__) {
          var wellKnownSymbol = __webpack_require__("b622");
          var create = __webpack_require__("7c73");
          var definePropertyModule = __webpack_require__("9bf2");

          var UNSCOPABLES = wellKnownSymbol("unscopables");
          var ArrayPrototype = Array.prototype;

          // Array.prototype[@@unscopables]
          // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
          if (ArrayPrototype[UNSCOPABLES] == undefined) {
            definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
              configurable: true,
              value: create(null),
            });
          }

          // add a key to Array.prototype[@@unscopables]
          module.exports = function (key) {
            ArrayPrototype[UNSCOPABLES][key] = true;
          };

          /***/
        },

        /***/ "44de": /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");

          module.exports = function (a, b) {
            var console = global.console;
            if (console && console.error) {
              arguments.length === 1 ? console.error(a) : console.error(a, b);
            }
          };

          /***/
        },

        /***/ "44e7": /***/ function (module, exports, __webpack_require__) {
          var isObject = __webpack_require__("861d");
          var classof = __webpack_require__("c6b6");
          var wellKnownSymbol = __webpack_require__("b622");

          var MATCH = wellKnownSymbol("match");

          // `IsRegExp` abstract operation
          // https://tc39.es/ecma262/#sec-isregexp
          module.exports = function (it) {
            var isRegExp;
            return (
              isObject(it) &&
              ((isRegExp = it[MATCH]) !== undefined
                ? !!isRegExp
                : classof(it) == "RegExp")
            );
          };

          /***/
        },

        /***/ "466d": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
          var anObject = __webpack_require__("825a");
          var toLength = __webpack_require__("50c4");
          var toString = __webpack_require__("577e");
          var requireObjectCoercible = __webpack_require__("1d80");
          var getMethod = __webpack_require__("dc4a");
          var advanceStringIndex = __webpack_require__("8aa5");
          var regExpExec = __webpack_require__("14c3");

          // @@match logic
          fixRegExpWellKnownSymbolLogic(
            "match",
            function (MATCH, nativeMatch, maybeCallNative) {
              return [
                // `String.prototype.match` method
                // https://tc39.es/ecma262/#sec-string.prototype.match
                function match(regexp) {
                  var O = requireObjectCoercible(this);
                  var matcher =
                    regexp == undefined ? undefined : getMethod(regexp, MATCH);
                  return matcher
                    ? matcher.call(regexp, O)
                    : new RegExp(regexp)[MATCH](toString(O));
                },
                // `RegExp.prototype[@@match]` method
                // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
                function (string) {
                  var rx = anObject(this);
                  var S = toString(string);
                  var res = maybeCallNative(nativeMatch, rx, S);

                  if (res.done) return res.value;

                  if (!rx.global) return regExpExec(rx, S);

                  var fullUnicode = rx.unicode;
                  rx.lastIndex = 0;
                  var A = [];
                  var n = 0;
                  var result;
                  while ((result = regExpExec(rx, S)) !== null) {
                    var matchStr = toString(result[0]);
                    A[n] = matchStr;
                    if (matchStr === "")
                      rx.lastIndex = advanceStringIndex(
                        S,
                        toLength(rx.lastIndex),
                        fullUnicode
                      );
                    n++;
                  }
                  return n === 0 ? null : A;
                },
              ];
            }
          );

          /***/
        },

        /***/ 4840: /***/ function (module, exports, __webpack_require__) {
          var anObject = __webpack_require__("825a");
          var aConstructor = __webpack_require__("5087");
          var wellKnownSymbol = __webpack_require__("b622");

          var SPECIES = wellKnownSymbol("species");

          // `SpeciesConstructor` abstract operation
          // https://tc39.es/ecma262/#sec-speciesconstructor
          module.exports = function (O, defaultConstructor) {
            var C = anObject(O).constructor;
            var S;
            return C === undefined || (S = anObject(C)[SPECIES]) == undefined
              ? defaultConstructor
              : aConstructor(S);
          };

          /***/
        },

        /***/ "485a": /***/ function (module, exports, __webpack_require__) {
          var isCallable = __webpack_require__("1626");
          var isObject = __webpack_require__("861d");

          // `OrdinaryToPrimitive` abstract operation
          // https://tc39.es/ecma262/#sec-ordinarytoprimitive
          module.exports = function (input, pref) {
            var fn, val;
            if (
              pref === "string" &&
              isCallable((fn = input.toString)) &&
              !isObject((val = fn.call(input)))
            )
              return val;
            if (
              isCallable((fn = input.valueOf)) &&
              !isObject((val = fn.call(input)))
            )
              return val;
            if (
              pref !== "string" &&
              isCallable((fn = input.toString)) &&
              !isObject((val = fn.call(input)))
            )
              return val;
            throw TypeError("Can't convert object to primitive value");
          };

          /***/
        },

        /***/ 4930: /***/ function (module, exports, __webpack_require__) {
          /* eslint-disable es/no-symbol -- required for testing */
          var V8_VERSION = __webpack_require__("2d00");
          var fails = __webpack_require__("d039");

          // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
          module.exports =
            !!Object.getOwnPropertySymbols &&
            !fails(function () {
              var symbol = Symbol();
              // Chrome 38 Symbol has incorrect toString conversion
              // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
              return (
                !String(symbol) ||
                !(Object(symbol) instanceof Symbol) ||
                // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
                (!Symbol.sham && V8_VERSION && V8_VERSION < 41)
              );
            });

          /***/
        },

        /***/ "49f4": /***/ function (module, exports, __webpack_require__) {
          var nativeCreate = __webpack_require__("6044");

          /**
           * Removes all key-value entries from the hash.
           *
           * @private
           * @name clear
           * @memberOf Hash
           */
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }

          module.exports = hashClear;

          /***/
        },

        /***/ "4ae1": /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var getBuiltIn = __webpack_require__("d066");
          var aConstructor = __webpack_require__("5087");
          var anObject = __webpack_require__("825a");
          var isObject = __webpack_require__("861d");
          var create = __webpack_require__("7c73");
          var bind = __webpack_require__("0538");
          var fails = __webpack_require__("d039");

          var nativeConstruct = getBuiltIn("Reflect", "construct");

          // `Reflect.construct` method
          // https://tc39.es/ecma262/#sec-reflect.construct
          // MS Edge supports only 2 arguments and argumentsList argument is optional
          // FF Nightly sets third argument as `new.target`, but does not create `this` from it
          var NEW_TARGET_BUG = fails(function () {
            function F() {
              /* empty */
            }
            return !(
              nativeConstruct(
                function () {
                  /* empty */
                },
                [],
                F
              ) instanceof F
            );
          });
          var ARGS_BUG = !fails(function () {
            nativeConstruct(function () {
              /* empty */
            });
          });
          var FORCED = NEW_TARGET_BUG || ARGS_BUG;

          $(
            { target: "Reflect", stat: true, forced: FORCED, sham: FORCED },
            {
              construct: function construct(Target, args /* , newTarget */) {
                aConstructor(Target);
                anObject(args);
                var newTarget =
                  arguments.length < 3 ? Target : aConstructor(arguments[2]);
                if (ARGS_BUG && !NEW_TARGET_BUG)
                  return nativeConstruct(Target, args, newTarget);
                if (Target == newTarget) {
                  // w/o altered newTarget, optimization for 0-4 arguments
                  switch (args.length) {
                    case 0:
                      return new Target();
                    case 1:
                      return new Target(args[0]);
                    case 2:
                      return new Target(args[0], args[1]);
                    case 3:
                      return new Target(args[0], args[1], args[2]);
                    case 4:
                      return new Target(args[0], args[1], args[2], args[3]);
                  }
                  // w/o altered newTarget, lot of arguments case
                  var $args = [null];
                  $args.push.apply($args, args);
                  return new (bind.apply(Target, $args))();
                }
                // with altered newTarget, not support built-in constructors
                var proto = newTarget.prototype;
                var instance = create(
                  isObject(proto) ? proto : Object.prototype
                );
                var result = Function.apply.call(Target, instance, args);
                return isObject(result) ? result : instance;
              },
            }
          );

          /***/
        },

        /***/ "4d63": /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var global = __webpack_require__("da84");
          var isForced = __webpack_require__("94ca");
          var inheritIfRequired = __webpack_require__("7156");
          var createNonEnumerableProperty = __webpack_require__("9112");
          var defineProperty = __webpack_require__("9bf2").f;
          var getOwnPropertyNames = __webpack_require__("241c").f;
          var isRegExp = __webpack_require__("44e7");
          var toString = __webpack_require__("577e");
          var getFlags = __webpack_require__("ad6d");
          var stickyHelpers = __webpack_require__("9f7f");
          var redefine = __webpack_require__("6eeb");
          var fails = __webpack_require__("d039");
          var hasOwn = __webpack_require__("1a2d");
          var enforceInternalState = __webpack_require__("69f3").enforce;
          var setSpecies = __webpack_require__("2626");
          var wellKnownSymbol = __webpack_require__("b622");
          var UNSUPPORTED_DOT_ALL = __webpack_require__("fce3");
          var UNSUPPORTED_NCG = __webpack_require__("107c");

          var MATCH = wellKnownSymbol("match");
          var NativeRegExp = global.RegExp;
          var RegExpPrototype = NativeRegExp.prototype;
          // TODO: Use only propper RegExpIdentifierName
          var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
          var re1 = /a/g;
          var re2 = /a/g;

          // "new" should create a new object, old webkit bug
          var CORRECT_NEW = new NativeRegExp(re1) !== re1;

          var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

          var BASE_FORCED =
            DESCRIPTORS &&
            (!CORRECT_NEW ||
              UNSUPPORTED_Y ||
              UNSUPPORTED_DOT_ALL ||
              UNSUPPORTED_NCG ||
              fails(function () {
                re2[MATCH] = false;
                // RegExp constructor can alter flags and IsRegExp works correct with @@match
                return (
                  NativeRegExp(re1) != re1 ||
                  NativeRegExp(re2) == re2 ||
                  NativeRegExp(re1, "i") != "/a/i"
                );
              }));

          var handleDotAll = function (string) {
            var length = string.length;
            var index = 0;
            var result = "";
            var brackets = false;
            var chr;
            for (; index <= length; index++) {
              chr = string.charAt(index);
              if (chr === "\\") {
                result += chr + string.charAt(++index);
                continue;
              }
              if (!brackets && chr === ".") {
                result += "[\\s\\S]";
              } else {
                if (chr === "[") {
                  brackets = true;
                } else if (chr === "]") {
                  brackets = false;
                }
                result += chr;
              }
            }
            return result;
          };

          var handleNCG = function (string) {
            var length = string.length;
            var index = 0;
            var result = "";
            var named = [];
            var names = {};
            var brackets = false;
            var ncg = false;
            var groupid = 0;
            var groupname = "";
            var chr;
            for (; index <= length; index++) {
              chr = string.charAt(index);
              if (chr === "\\") {
                chr = chr + string.charAt(++index);
              } else if (chr === "]") {
                brackets = false;
              } else if (!brackets)
                switch (true) {
                  case chr === "[":
                    brackets = true;
                    break;
                  case chr === "(":
                    if (IS_NCG.test(string.slice(index + 1))) {
                      index += 2;
                      ncg = true;
                    }
                    result += chr;
                    groupid++;
                    continue;
                  case chr === ">" && ncg:
                    if (groupname === "" || hasOwn(names, groupname)) {
                      throw new SyntaxError("Invalid capture group name");
                    }
                    names[groupname] = true;
                    named.push([groupname, groupid]);
                    ncg = false;
                    groupname = "";
                    continue;
                }
              if (ncg) groupname += chr;
              else result += chr;
            }
            return [result, named];
          };

          // `RegExp` constructor
          // https://tc39.es/ecma262/#sec-regexp-constructor
          if (isForced("RegExp", BASE_FORCED)) {
            var RegExpWrapper = function RegExp(pattern, flags) {
              var thisIsRegExp = this instanceof RegExpWrapper;
              var patternIsRegExp = isRegExp(pattern);
              var flagsAreUndefined = flags === undefined;
              var groups = [];
              var rawPattern = pattern;
              var rawFlags, dotAll, sticky, handled, result, state;

              if (
                !thisIsRegExp &&
                patternIsRegExp &&
                flagsAreUndefined &&
                pattern.constructor === RegExpWrapper
              ) {
                return pattern;
              }

              if (patternIsRegExp || pattern instanceof RegExpWrapper) {
                pattern = pattern.source;
                if (flagsAreUndefined)
                  flags =
                    "flags" in rawPattern
                      ? rawPattern.flags
                      : getFlags.call(rawPattern);
              }

              pattern = pattern === undefined ? "" : toString(pattern);
              flags = flags === undefined ? "" : toString(flags);
              rawPattern = pattern;

              if (UNSUPPORTED_DOT_ALL && "dotAll" in re1) {
                dotAll = !!flags && flags.indexOf("s") > -1;
                if (dotAll) flags = flags.replace(/s/g, "");
              }

              rawFlags = flags;

              if (UNSUPPORTED_Y && "sticky" in re1) {
                sticky = !!flags && flags.indexOf("y") > -1;
                if (sticky) flags = flags.replace(/y/g, "");
              }

              if (UNSUPPORTED_NCG) {
                handled = handleNCG(pattern);
                pattern = handled[0];
                groups = handled[1];
              }

              result = inheritIfRequired(
                NativeRegExp(pattern, flags),
                thisIsRegExp ? this : RegExpPrototype,
                RegExpWrapper
              );

              if (dotAll || sticky || groups.length) {
                state = enforceInternalState(result);
                if (dotAll) {
                  state.dotAll = true;
                  state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
                }
                if (sticky) state.sticky = true;
                if (groups.length) state.groups = groups;
              }

              if (pattern !== rawPattern)
                try {
                  // fails in old engines, but we have no alternatives for unsupported regex syntax
                  createNonEnumerableProperty(
                    result,
                    "source",
                    rawPattern === "" ? "(?:)" : rawPattern
                  );
                } catch (error) {
                  /* empty */
                }

              return result;
            };

            var proxy = function (key) {
              key in RegExpWrapper ||
                defineProperty(RegExpWrapper, key, {
                  configurable: true,
                  get: function () {
                    return NativeRegExp[key];
                  },
                  set: function (it) {
                    NativeRegExp[key] = it;
                  },
                });
            };

            for (
              var keys = getOwnPropertyNames(NativeRegExp), index = 0;
              keys.length > index;

            ) {
              proxy(keys[index++]);
            }

            RegExpPrototype.constructor = RegExpWrapper;
            RegExpWrapper.prototype = RegExpPrototype;
            redefine(global, "RegExp", RegExpWrapper);
          }

          // https://tc39.es/ecma262/#sec-get-regexp-@@species
          setSpecies("RegExp");

          /***/
        },

        /***/ "4d64": /***/ function (module, exports, __webpack_require__) {
          var toIndexedObject = __webpack_require__("fc6a");
          var toAbsoluteIndex = __webpack_require__("23cb");
          var lengthOfArrayLike = __webpack_require__("07fa");

          // `Array.prototype.{ indexOf, includes }` methods implementation
          var createMethod = function (IS_INCLUDES) {
            return function ($this, el, fromIndex) {
              var O = toIndexedObject($this);
              var length = lengthOfArrayLike(O);
              var index = toAbsoluteIndex(fromIndex, length);
              var value;
              // Array#includes uses SameValueZero equality algorithm
              // eslint-disable-next-line no-self-compare -- NaN check
              if (IS_INCLUDES && el != el)
                while (length > index) {
                  value = O[index++];
                  // eslint-disable-next-line no-self-compare -- NaN check
                  if (value != value) return true;
                  // Array#indexOf ignores holes, Array#includes - not
                }
              else
                for (; length > index; index++) {
                  if ((IS_INCLUDES || index in O) && O[index] === el)
                    return IS_INCLUDES || index || 0;
                }
              return !IS_INCLUDES && -1;
            };
          };

          module.exports = {
            // `Array.prototype.includes` method
            // https://tc39.es/ecma262/#sec-array.prototype.includes
            includes: createMethod(true),
            // `Array.prototype.indexOf` method
            // https://tc39.es/ecma262/#sec-array.prototype.indexof
            indexOf: createMethod(false),
          };

          /***/
        },

        /***/ "4de4": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var $filter = __webpack_require__("b727").filter;
          var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

          var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");

          // `Array.prototype.filter` method
          // https://tc39.es/ecma262/#sec-array.prototype.filter
          // with adding support of @@species
          $(
            { target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT },
            {
              filter: function filter(callbackfn /* , thisArg */) {
                return $filter(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              },
            }
          );

          /***/
        },

        /***/ "4df4": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var bind = __webpack_require__("0366");
          var toObject = __webpack_require__("7b0b");
          var callWithSafeIterationClosing = __webpack_require__("9bdd");
          var isArrayIteratorMethod = __webpack_require__("e95a");
          var isConstructor = __webpack_require__("68ee");
          var lengthOfArrayLike = __webpack_require__("07fa");
          var createProperty = __webpack_require__("8418");
          var getIterator = __webpack_require__("9a1f");
          var getIteratorMethod = __webpack_require__("35a1");

          // `Array.from` method implementation
          // https://tc39.es/ecma262/#sec-array.from
          module.exports = function from(
            arrayLike /* , mapfn = undefined, thisArg = undefined */
          ) {
            var O = toObject(arrayLike);
            var IS_CONSTRUCTOR = isConstructor(this);
            var argumentsLength = arguments.length;
            var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
            var mapping = mapfn !== undefined;
            if (mapping)
              mapfn = bind(
                mapfn,
                argumentsLength > 2 ? arguments[2] : undefined,
                2
              );
            var iteratorMethod = getIteratorMethod(O);
            var index = 0;
            var length, result, step, iterator, next, value;
            // if the target is not iterable or it's an array with the default iterator - use a simple case
            if (
              iteratorMethod &&
              !(this == Array && isArrayIteratorMethod(iteratorMethod))
            ) {
              iterator = getIterator(O, iteratorMethod);
              next = iterator.next;
              result = IS_CONSTRUCTOR ? new this() : [];
              for (; !(step = next.call(iterator)).done; index++) {
                value = mapping
                  ? callWithSafeIterationClosing(
                      iterator,
                      mapfn,
                      [step.value, index],
                      true
                    )
                  : step.value;
                createProperty(result, index, value);
              }
            } else {
              length = lengthOfArrayLike(O);
              result = IS_CONSTRUCTOR ? new this(length) : Array(length);
              for (; length > index; index++) {
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty(result, index, value);
              }
            }
            result.length = index;
            return result;
          };

          /***/
        },

        /***/ 5087: /***/ function (module, exports, __webpack_require__) {
          var isConstructor = __webpack_require__("68ee");
          var tryToString = __webpack_require__("0d51");

          // `Assert: IsConstructor(argument) is true`
          module.exports = function (argument) {
            if (isConstructor(argument)) return argument;
            throw TypeError(tryToString(argument) + " is not a constructor");
          };

          /***/
        },

        /***/ "50c4": /***/ function (module, exports, __webpack_require__) {
          var toIntegerOrInfinity = __webpack_require__("5926");

          var min = Math.min;

          // `ToLength` abstract operation
          // https://tc39.es/ecma262/#sec-tolength
          module.exports = function (argument) {
            return argument > 0
              ? min(toIntegerOrInfinity(argument), 0x1fffffffffffff)
              : 0; // 2 ** 53 - 1 == 9007199254740991
          };

          /***/
        },

        /***/ "50d8": /***/ function (module, exports) {
          /**
           * The base implementation of `_.times` without support for iteratee shorthands
           * or max array length checks.
           *
           * @private
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           */
          function baseTimes(n, iteratee) {
            var index = -1,
              result = Array(n);

            while (++index < n) {
              result[index] = iteratee(index);
            }
            return result;
          }

          module.exports = baseTimes;

          /***/
        },

        /***/ 5319: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
          var fails = __webpack_require__("d039");
          var anObject = __webpack_require__("825a");
          var isCallable = __webpack_require__("1626");
          var toIntegerOrInfinity = __webpack_require__("5926");
          var toLength = __webpack_require__("50c4");
          var toString = __webpack_require__("577e");
          var requireObjectCoercible = __webpack_require__("1d80");
          var advanceStringIndex = __webpack_require__("8aa5");
          var getMethod = __webpack_require__("dc4a");
          var getSubstitution = __webpack_require__("0cb2");
          var regExpExec = __webpack_require__("14c3");
          var wellKnownSymbol = __webpack_require__("b622");

          var REPLACE = wellKnownSymbol("replace");
          var max = Math.max;
          var min = Math.min;

          var maybeToString = function (it) {
            return it === undefined ? it : String(it);
          };

          // IE <= 11 replaces $0 with the whole match, as if it was $&
          // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
          var REPLACE_KEEPS_$0 = (function () {
            // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
            return "a".replace(/./, "$0") === "$0";
          })();

          // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
          var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
            if (/./[REPLACE]) {
              return /./[REPLACE]("a", "$0") === "";
            }
            return false;
          })();

          var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
            var re = /./;
            re.exec = function () {
              var result = [];
              result.groups = { a: "7" };
              return result;
            };
            // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
            return "".replace(re, "$<a>") !== "7";
          });

          // @@replace logic
          fixRegExpWellKnownSymbolLogic(
            "replace",
            function (_, nativeReplace, maybeCallNative) {
              var UNSAFE_SUBSTITUTE =
                REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";

              return [
                // `String.prototype.replace` method
                // https://tc39.es/ecma262/#sec-string.prototype.replace
                function replace(searchValue, replaceValue) {
                  var O = requireObjectCoercible(this);
                  var replacer =
                    searchValue == undefined
                      ? undefined
                      : getMethod(searchValue, REPLACE);
                  return replacer
                    ? replacer.call(searchValue, O, replaceValue)
                    : nativeReplace.call(
                        toString(O),
                        searchValue,
                        replaceValue
                      );
                },
                // `RegExp.prototype[@@replace]` method
                // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
                function (string, replaceValue) {
                  var rx = anObject(this);
                  var S = toString(string);

                  if (
                    typeof replaceValue === "string" &&
                    replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1 &&
                    replaceValue.indexOf("$<") === -1
                  ) {
                    var res = maybeCallNative(
                      nativeReplace,
                      rx,
                      S,
                      replaceValue
                    );
                    if (res.done) return res.value;
                  }

                  var functionalReplace = isCallable(replaceValue);
                  if (!functionalReplace) replaceValue = toString(replaceValue);

                  var global = rx.global;
                  if (global) {
                    var fullUnicode = rx.unicode;
                    rx.lastIndex = 0;
                  }
                  var results = [];
                  while (true) {
                    var result = regExpExec(rx, S);
                    if (result === null) break;

                    results.push(result);
                    if (!global) break;

                    var matchStr = toString(result[0]);
                    if (matchStr === "")
                      rx.lastIndex = advanceStringIndex(
                        S,
                        toLength(rx.lastIndex),
                        fullUnicode
                      );
                  }

                  var accumulatedResult = "";
                  var nextSourcePosition = 0;
                  for (var i = 0; i < results.length; i++) {
                    result = results[i];

                    var matched = toString(result[0]);
                    var position = max(
                      min(toIntegerOrInfinity(result.index), S.length),
                      0
                    );
                    var captures = [];
                    // NOTE: This is equivalent to
                    //   captures = result.slice(1).map(maybeToString)
                    // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                    // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                    // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                    for (var j = 1; j < result.length; j++)
                      captures.push(maybeToString(result[j]));
                    var namedCaptures = result.groups;
                    if (functionalReplace) {
                      var replacerArgs = [matched].concat(
                        captures,
                        position,
                        S
                      );
                      if (namedCaptures !== undefined)
                        replacerArgs.push(namedCaptures);
                      var replacement = toString(
                        replaceValue.apply(undefined, replacerArgs)
                      );
                    } else {
                      replacement = getSubstitution(
                        matched,
                        S,
                        position,
                        captures,
                        namedCaptures,
                        replaceValue
                      );
                    }
                    if (position >= nextSourcePosition) {
                      accumulatedResult +=
                        S.slice(nextSourcePosition, position) + replacement;
                      nextSourcePosition = position + matched.length;
                    }
                  }
                  return accumulatedResult + S.slice(nextSourcePosition);
                },
              ];
            },
            !REPLACE_SUPPORTS_NAMED_GROUPS ||
              !REPLACE_KEEPS_$0 ||
              REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
          );

          /***/
        },

        /***/ "55a3": /***/ function (module, exports) {
          /**
           * Checks if a stack value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Stack
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function stackHas(key) {
            return this.__data__.has(key);
          }

          module.exports = stackHas;

          /***/
        },

        /***/ "55b9": /***/ function (module, exports) {
          /***/
        },

        /***/ 5692: /***/ function (module, exports, __webpack_require__) {
          var IS_PURE = __webpack_require__("c430");
          var store = __webpack_require__("c6cd");

          (module.exports = function (key, value) {
            return (
              store[key] || (store[key] = value !== undefined ? value : {})
            );
          })("versions", []).push({
            version: "3.18.3",
            mode: IS_PURE ? "pure" : "global",
            copyright: "© 2021 Denis Pushkarev (zloirock.ru)",
          });

          /***/
        },

        /***/ "56ef": /***/ function (module, exports, __webpack_require__) {
          var getBuiltIn = __webpack_require__("d066");
          var getOwnPropertyNamesModule = __webpack_require__("241c");
          var getOwnPropertySymbolsModule = __webpack_require__("7418");
          var anObject = __webpack_require__("825a");

          // all object keys, includes non-enumerable and symbols
          module.exports =
            getBuiltIn("Reflect", "ownKeys") ||
            function ownKeys(it) {
              var keys = getOwnPropertyNamesModule.f(anObject(it));
              var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
              return getOwnPropertySymbols
                ? keys.concat(getOwnPropertySymbols(it))
                : keys;
            };

          /***/
        },

        /***/ "577e": /***/ function (module, exports, __webpack_require__) {
          var classof = __webpack_require__("f5df");

          module.exports = function (argument) {
            if (classof(argument) === "Symbol")
              throw TypeError("Cannot convert a Symbol value to a string");
            return String(argument);
          };

          /***/
        },

        /***/ "57a5": /***/ function (module, exports, __webpack_require__) {
          var overArg = __webpack_require__("91e9");

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeKeys = overArg(Object.keys, Object);

          module.exports = nativeKeys;

          /***/
        },

        /***/ "585a": /***/ function (module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function (global) {
            /** Detect free variable `global` from Node.js. */
            var freeGlobal =
              typeof global == "object" &&
              global &&
              global.Object === Object &&
              global;

            module.exports = freeGlobal;

            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__("c8ba")));

          /***/
        },

        /***/ 5899: /***/ function (module, exports) {
          // a string of all valid unicode whitespaces
          module.exports =
            "\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002" +
            "\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

          /***/
        },

        /***/ "58a8": /***/ function (module, exports, __webpack_require__) {
          var requireObjectCoercible = __webpack_require__("1d80");
          var toString = __webpack_require__("577e");
          var whitespaces = __webpack_require__("5899");

          var whitespace = "[" + whitespaces + "]";
          var ltrim = RegExp("^" + whitespace + whitespace + "*");
          var rtrim = RegExp(whitespace + whitespace + "*$");

          // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
          var createMethod = function (TYPE) {
            return function ($this) {
              var string = toString(requireObjectCoercible($this));
              if (TYPE & 1) string = string.replace(ltrim, "");
              if (TYPE & 2) string = string.replace(rtrim, "");
              return string;
            };
          };

          module.exports = {
            // `String.prototype.{ trimLeft, trimStart }` methods
            // https://tc39.es/ecma262/#sec-string.prototype.trimstart
            start: createMethod(1),
            // `String.prototype.{ trimRight, trimEnd }` methods
            // https://tc39.es/ecma262/#sec-string.prototype.trimend
            end: createMethod(2),
            // `String.prototype.trim` method
            // https://tc39.es/ecma262/#sec-string.prototype.trim
            trim: createMethod(3),
          };

          /***/
        },

        /***/ 5926: /***/ function (module, exports) {
          var ceil = Math.ceil;
          var floor = Math.floor;

          // `ToIntegerOrInfinity` abstract operation
          // https://tc39.es/ecma262/#sec-tointegerorinfinity
          module.exports = function (argument) {
            var number = +argument;
            // eslint-disable-next-line no-self-compare -- safe
            return number !== number || number === 0
              ? 0
              : (number > 0 ? floor : ceil)(number);
          };

          /***/
        },

        /***/ "59ed": /***/ function (module, exports, __webpack_require__) {
          var isCallable = __webpack_require__("1626");
          var tryToString = __webpack_require__("0d51");

          // `Assert: IsCallable(argument) is true`
          module.exports = function (argument) {
            if (isCallable(argument)) return argument;
            throw TypeError(tryToString(argument) + " is not a function");
          };

          /***/
        },

        /***/ "5a34": /***/ function (module, exports, __webpack_require__) {
          var isRegExp = __webpack_require__("44e7");

          module.exports = function (it) {
            if (isRegExp(it)) {
              throw TypeError("The method doesn't accept regular expressions");
            }
            return it;
          };

          /***/
        },

        /***/ "5c6c": /***/ function (module, exports) {
          module.exports = function (bitmap, value) {
            return {
              enumerable: !(bitmap & 1),
              configurable: !(bitmap & 2),
              writable: !(bitmap & 4),
              value: value,
            };
          };

          /***/
        },

        /***/ "5e2e": /***/ function (module, exports, __webpack_require__) {
          var listCacheClear = __webpack_require__("28c9"),
            listCacheDelete = __webpack_require__("69d5"),
            listCacheGet = __webpack_require__("b4c0"),
            listCacheHas = __webpack_require__("fba5"),
            listCacheSet = __webpack_require__("67ca");

          /**
           * Creates an list cache object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function ListCache(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          // Add methods to `ListCache`.
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;

          module.exports = ListCache;

          /***/
        },

        /***/ "5e77": /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var hasOwn = __webpack_require__("1a2d");

          var FunctionPrototype = Function.prototype;
          // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
          var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

          var EXISTS = hasOwn(FunctionPrototype, "name");
          // additional protection from minified / mangled / dropped function names
          var PROPER =
            EXISTS &&
            function something() {
              /* empty */
            }.name === "something";
          var CONFIGURABLE =
            EXISTS &&
            (!DESCRIPTORS ||
              (DESCRIPTORS &&
                getDescriptor(FunctionPrototype, "name").configurable));

          module.exports = {
            EXISTS: EXISTS,
            PROPER: PROPER,
            CONFIGURABLE: CONFIGURABLE,
          };

          /***/
        },

        /***/ "5fb2": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          // based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
          var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
          var base = 36;
          var tMin = 1;
          var tMax = 26;
          var skew = 38;
          var damp = 700;
          var initialBias = 72;
          var initialN = 128; // 0x80
          var delimiter = "-"; // '\x2D'
          var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
          var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
          var OVERFLOW_ERROR =
            "Overflow: input needs wider integers to process";
          var baseMinusTMin = base - tMin;
          var floor = Math.floor;
          var stringFromCharCode = String.fromCharCode;

          /**
           * Creates an array containing the numeric code points of each Unicode
           * character in the string. While JavaScript uses UCS-2 internally,
           * this function will convert a pair of surrogate halves (each of which
           * UCS-2 exposes as separate characters) into a single code point,
           * matching UTF-16.
           */
          var ucs2decode = function (string) {
            var output = [];
            var counter = 0;
            var length = string.length;
            while (counter < length) {
              var value = string.charCodeAt(counter++);
              if (value >= 0xd800 && value <= 0xdbff && counter < length) {
                // It's a high surrogate, and there is a next character.
                var extra = string.charCodeAt(counter++);
                if ((extra & 0xfc00) == 0xdc00) {
                  // Low surrogate.
                  output.push(
                    ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000
                  );
                } else {
                  // It's an unmatched surrogate; only append this code unit, in case the
                  // next code unit is the high surrogate of a surrogate pair.
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }
            return output;
          };

          /**
           * Converts a digit/integer into a basic code point.
           */
          var digitToBasic = function (digit) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26);
          };

          /**
           * Bias adaptation function as per section 3.4 of RFC 3492.
           * https://tools.ietf.org/html/rfc3492#section-3.4
           */
          var adapt = function (delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);
            for (; delta > (baseMinusTMin * tMax) >> 1; k += base) {
              delta = floor(delta / baseMinusTMin);
            }
            return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));
          };

          /**
           * Converts a string of Unicode symbols (e.g. a domain name label) to a
           * Punycode string of ASCII-only symbols.
           */
          // eslint-disable-next-line max-statements -- TODO
          var encode = function (input) {
            var output = [];

            // Convert the input in UCS-2 to an array of Unicode code points.
            input = ucs2decode(input);

            // Cache the length.
            var inputLength = input.length;

            // Initialize the state.
            var n = initialN;
            var delta = 0;
            var bias = initialBias;
            var i, currentValue;

            // Handle the basic code points.
            for (i = 0; i < input.length; i++) {
              currentValue = input[i];
              if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
              }
            }

            var basicLength = output.length; // number of basic code points.
            var handledCPCount = basicLength; // number of code points that have been handled;

            // Finish the basic string with a delimiter unless it's empty.
            if (basicLength) {
              output.push(delimiter);
            }

            // Main encoding loop:
            while (handledCPCount < inputLength) {
              // All non-basic code points < n have been handled already. Find the next larger one:
              var m = maxInt;
              for (i = 0; i < input.length; i++) {
                currentValue = input[i];
                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              }

              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
              var handledCPCountPlusOne = handledCPCount + 1;
              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                throw RangeError(OVERFLOW_ERROR);
              }

              delta += (m - n) * handledCPCountPlusOne;
              n = m;

              for (i = 0; i < input.length; i++) {
                currentValue = input[i];
                if (currentValue < n && ++delta > maxInt) {
                  throw RangeError(OVERFLOW_ERROR);
                }
                if (currentValue == n) {
                  // Represent delta as a generalized variable-length integer.
                  var q = delta;
                  for (var k = base /* no condition */; ; k += base) {
                    var t =
                      k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (q < t) break;
                    var qMinusT = q - t;
                    var baseMinusT = base - t;
                    output.push(
                      stringFromCharCode(
                        digitToBasic(t + (qMinusT % baseMinusT))
                      )
                    );
                    q = floor(qMinusT / baseMinusT);
                  }

                  output.push(stringFromCharCode(digitToBasic(q)));
                  bias = adapt(
                    delta,
                    handledCPCountPlusOne,
                    handledCPCount == basicLength
                  );
                  delta = 0;
                  ++handledCPCount;
                }
              }

              ++delta;
              ++n;
            }
            return output.join("");
          };

          module.exports = function (input) {
            var encoded = [];
            var labels = input
              .toLowerCase()
              .replace(regexSeparators, "\u002E")
              .split(".");
            var i, label;
            for (i = 0; i < labels.length; i++) {
              label = labels[i];
              encoded.push(
                regexNonASCII.test(label) ? "xn--" + encode(label) : label
              );
            }
            return encoded.join(".");
          };

          /***/
        },

        /***/ "600f": /***/ function (module, exports, __webpack_require__) {
          // extracted by mini-css-extract-plugin
          /***/
        },

        /***/ 6044: /***/ function (module, exports, __webpack_require__) {
          var getNative = __webpack_require__("0b07");

          /* Built-in method references that are verified to be native. */
          var nativeCreate = getNative(Object, "create");

          module.exports = nativeCreate;

          /***/
        },

        /***/ "605d": /***/ function (module, exports, __webpack_require__) {
          var classof = __webpack_require__("c6b6");
          var global = __webpack_require__("da84");

          module.exports = classof(global.process) == "process";

          /***/
        },

        /***/ 6069: /***/ function (module, exports) {
          module.exports = typeof window == "object";

          /***/
        },

        /***/ "60da": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var DESCRIPTORS = __webpack_require__("83ab");
          var fails = __webpack_require__("d039");
          var objectKeys = __webpack_require__("df75");
          var getOwnPropertySymbolsModule = __webpack_require__("7418");
          var propertyIsEnumerableModule = __webpack_require__("d1e7");
          var toObject = __webpack_require__("7b0b");
          var IndexedObject = __webpack_require__("44ad");

          // eslint-disable-next-line es/no-object-assign -- safe
          var $assign = Object.assign;
          // eslint-disable-next-line es/no-object-defineproperty -- required for testing
          var defineProperty = Object.defineProperty;

          // `Object.assign` method
          // https://tc39.es/ecma262/#sec-object.assign
          module.exports =
            !$assign ||
            fails(function () {
              // should have correct order of operations (Edge bug)
              if (
                DESCRIPTORS &&
                $assign(
                  { b: 1 },
                  $assign(
                    defineProperty({}, "a", {
                      enumerable: true,
                      get: function () {
                        defineProperty(this, "b", {
                          value: 3,
                          enumerable: false,
                        });
                      },
                    }),
                    { b: 2 }
                  )
                ).b !== 1
              )
                return true;
              // should work with symbols and should have deterministic property order (V8 bug)
              var A = {};
              var B = {};
              // eslint-disable-next-line es/no-symbol -- safe
              var symbol = Symbol();
              var alphabet = "abcdefghijklmnopqrst";
              A[symbol] = 7;
              alphabet.split("").forEach(function (chr) {
                B[chr] = chr;
              });
              return (
                $assign({}, A)[symbol] != 7 ||
                objectKeys($assign({}, B)).join("") != alphabet
              );
            })
              ? function assign(target, source) {
                  // eslint-disable-line no-unused-vars -- required for `.length`
                  var T = toObject(target);
                  var argumentsLength = arguments.length;
                  var index = 1;
                  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                  var propertyIsEnumerable = propertyIsEnumerableModule.f;
                  while (argumentsLength > index) {
                    var S = IndexedObject(arguments[index++]);
                    var keys = getOwnPropertySymbols
                      ? objectKeys(S).concat(getOwnPropertySymbols(S))
                      : objectKeys(S);
                    var length = keys.length;
                    var j = 0;
                    var key;
                    while (length > j) {
                      key = keys[j++];
                      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key))
                        T[key] = S[key];
                    }
                  }
                  return T;
                }
              : $assign;

          /***/
        },

        /***/ "62e4": /***/ function (module, exports) {
          module.exports = function (module) {
            if (!module.webpackPolyfill) {
              module.deprecate = function () {};
              module.paths = [];
              // module.parent = undefined by default
              if (!module.children) module.children = [];
              Object.defineProperty(module, "loaded", {
                enumerable: true,
                get: function () {
                  return module.l;
                },
              });
              Object.defineProperty(module, "id", {
                enumerable: true,
                get: function () {
                  return module.i;
                },
              });
              module.webpackPolyfill = 1;
            }
            return module;
          };

          /***/
        },

        /***/ "642a": /***/ function (module, exports, __webpack_require__) {
          var baseIsMatch = __webpack_require__("966f"),
            getMatchData = __webpack_require__("3bb4"),
            matchesStrictComparable = __webpack_require__("20ec");

          /**
           * The base implementation of `_.matches` which doesn't clone `source`.
           *
           * @private
           * @param {Object} source The object of property values to match.
           * @returns {Function} Returns the new spec function.
           */
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function (object) {
              return (
                object === source || baseIsMatch(object, source, matchData)
              );
            };
          }

          module.exports = baseMatches;

          /***/
        },

        /***/ 6547: /***/ function (module, exports, __webpack_require__) {
          var toIntegerOrInfinity = __webpack_require__("5926");
          var toString = __webpack_require__("577e");
          var requireObjectCoercible = __webpack_require__("1d80");

          var createMethod = function (CONVERT_TO_STRING) {
            return function ($this, pos) {
              var S = toString(requireObjectCoercible($this));
              var position = toIntegerOrInfinity(pos);
              var size = S.length;
              var first, second;
              if (position < 0 || position >= size)
                return CONVERT_TO_STRING ? "" : undefined;
              first = S.charCodeAt(position);
              return first < 0xd800 ||
                first > 0xdbff ||
                position + 1 === size ||
                (second = S.charCodeAt(position + 1)) < 0xdc00 ||
                second > 0xdfff
                ? CONVERT_TO_STRING
                  ? S.charAt(position)
                  : first
                : CONVERT_TO_STRING
                ? S.slice(position, position + 2)
                : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
            };
          };

          module.exports = {
            // `String.prototype.codePointAt` method
            // https://tc39.es/ecma262/#sec-string.prototype.codepointat
            codeAt: createMethod(false),
            // `String.prototype.at` method
            // https://github.com/mathiasbynens/String.prototype.at
            charAt: createMethod(true),
          };

          /***/
        },

        /***/ "656b": /***/ function (module, exports, __webpack_require__) {
          var castPath = __webpack_require__("e2e4"),
            toKey = __webpack_require__("f4d6");

          /**
           * The base implementation of `_.get` without support for default values.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to get.
           * @returns {*} Returns the resolved value.
           */
          function baseGet(object, path) {
            path = castPath(path, object);

            var index = 0,
              length = path.length;

            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined;
          }

          module.exports = baseGet;

          /***/
        },

        /***/ "65f0": /***/ function (module, exports, __webpack_require__) {
          var arraySpeciesConstructor = __webpack_require__("0b42");

          // `ArraySpeciesCreate` abstract operation
          // https://tc39.es/ecma262/#sec-arrayspeciescreate
          module.exports = function (originalArray, length) {
            return new (arraySpeciesConstructor(originalArray))(
              length === 0 ? 0 : length
            );
          };

          /***/
        },

        /***/ 6747: /***/ function (module, exports) {
          /**
           * Checks if `value` is classified as an `Array` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array, else `false`.
           * @example
           *
           * _.isArray([1, 2, 3]);
           * // => true
           *
           * _.isArray(document.body.children);
           * // => false
           *
           * _.isArray('abc');
           * // => false
           *
           * _.isArray(_.noop);
           * // => false
           */
          var isArray = Array.isArray;

          module.exports = isArray;

          /***/
        },

        /***/ "67ca": /***/ function (module, exports, __webpack_require__) {
          var assocIndexOf = __webpack_require__("cb5a");

          /**
           * Sets the list cache `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf ListCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the list cache instance.
           */
          function listCacheSet(key, value) {
            var data = this.__data__,
              index = assocIndexOf(data, key);

            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }

          module.exports = listCacheSet;

          /***/
        },

        /***/ "68ee": /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");
          var isCallable = __webpack_require__("1626");
          var classof = __webpack_require__("f5df");
          var getBuiltIn = __webpack_require__("d066");
          var inspectSource = __webpack_require__("8925");

          var empty = [];
          var construct = getBuiltIn("Reflect", "construct");
          var constructorRegExp = /^\s*(?:class|function)\b/;
          var exec = constructorRegExp.exec;
          var INCORRECT_TO_STRING = !constructorRegExp.exec(function () {
            /* empty */
          });

          var isConstructorModern = function (argument) {
            if (!isCallable(argument)) return false;
            try {
              construct(Object, empty, argument);
              return true;
            } catch (error) {
              return false;
            }
          };

          var isConstructorLegacy = function (argument) {
            if (!isCallable(argument)) return false;
            switch (classof(argument)) {
              case "AsyncFunction":
              case "GeneratorFunction":
              case "AsyncGeneratorFunction":
                return false;
              // we can't check .prototype since constructors produced by .bind haven't it
            }
            return (
              INCORRECT_TO_STRING ||
              !!exec.call(constructorRegExp, inspectSource(argument))
            );
          };

          // `IsConstructor` abstract operation
          // https://tc39.es/ecma262/#sec-isconstructor
          module.exports =
            !construct ||
            fails(function () {
              var called;
              return (
                isConstructorModern(isConstructorModern.call) ||
                !isConstructorModern(Object) ||
                !isConstructorModern(function () {
                  called = true;
                }) ||
                called
              );
            })
              ? isConstructorLegacy
              : isConstructorModern;

          /***/
        },

        /***/ "69d5": /***/ function (module, exports, __webpack_require__) {
          var assocIndexOf = __webpack_require__("cb5a");

          /** Used for built-in method references. */
          var arrayProto = Array.prototype;

          /** Built-in value references. */
          var splice = arrayProto.splice;

          /**
           * Removes `key` and its value from the list cache.
           *
           * @private
           * @name delete
           * @memberOf ListCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function listCacheDelete(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key);

            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }

          module.exports = listCacheDelete;

          /***/
        },

        /***/ "69f3": /***/ function (module, exports, __webpack_require__) {
          var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
          var global = __webpack_require__("da84");
          var isObject = __webpack_require__("861d");
          var createNonEnumerableProperty = __webpack_require__("9112");
          var hasOwn = __webpack_require__("1a2d");
          var shared = __webpack_require__("c6cd");
          var sharedKey = __webpack_require__("f772");
          var hiddenKeys = __webpack_require__("d012");

          var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
          var WeakMap = global.WeakMap;
          var set, get, has;

          var enforce = function (it) {
            return has(it) ? get(it) : set(it, {});
          };

          var getterFor = function (TYPE) {
            return function (it) {
              var state;
              if (!isObject(it) || (state = get(it)).type !== TYPE) {
                throw TypeError("Incompatible receiver, " + TYPE + " required");
              }
              return state;
            };
          };

          if (NATIVE_WEAK_MAP || shared.state) {
            var store = shared.state || (shared.state = new WeakMap());
            var wmget = store.get;
            var wmhas = store.has;
            var wmset = store.set;
            set = function (it, metadata) {
              if (wmhas.call(store, it))
                throw new TypeError(OBJECT_ALREADY_INITIALIZED);
              metadata.facade = it;
              wmset.call(store, it, metadata);
              return metadata;
            };
            get = function (it) {
              return wmget.call(store, it) || {};
            };
            has = function (it) {
              return wmhas.call(store, it);
            };
          } else {
            var STATE = sharedKey("state");
            hiddenKeys[STATE] = true;
            set = function (it, metadata) {
              if (hasOwn(it, STATE))
                throw new TypeError(OBJECT_ALREADY_INITIALIZED);
              metadata.facade = it;
              createNonEnumerableProperty(it, STATE, metadata);
              return metadata;
            };
            get = function (it) {
              return hasOwn(it, STATE) ? it[STATE] : {};
            };
            has = function (it) {
              return hasOwn(it, STATE);
            };
          }

          module.exports = {
            set: set,
            get: get,
            has: has,
            enforce: enforce,
            getterFor: getterFor,
          };

          /***/
        },

        /***/ "6b0d": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          // runtime helper for setting properties on components
          // in a tree-shakable way
          exports.default = (sfc, props) => {
            const target = sfc.__vccOpts || sfc;
            for (const [key, val] of props) {
              target[key] = val;
            }
            return target;
          };

          /***/
        },

        /***/ "6eeb": /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var isCallable = __webpack_require__("1626");
          var hasOwn = __webpack_require__("1a2d");
          var createNonEnumerableProperty = __webpack_require__("9112");
          var setGlobal = __webpack_require__("ce4e");
          var inspectSource = __webpack_require__("8925");
          var InternalStateModule = __webpack_require__("69f3");
          var CONFIGURABLE_FUNCTION_NAME =
            __webpack_require__("5e77").CONFIGURABLE;

          var getInternalState = InternalStateModule.get;
          var enforceInternalState = InternalStateModule.enforce;
          var TEMPLATE = String(String).split("String");

          (module.exports = function (O, key, value, options) {
            var unsafe = options ? !!options.unsafe : false;
            var simple = options ? !!options.enumerable : false;
            var noTargetGet = options ? !!options.noTargetGet : false;
            var name =
              options && options.name !== undefined ? options.name : key;
            var state;
            if (isCallable(value)) {
              if (String(name).slice(0, 7) === "Symbol(") {
                name =
                  "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
              }
              if (
                !hasOwn(value, "name") ||
                (CONFIGURABLE_FUNCTION_NAME && value.name !== name)
              ) {
                createNonEnumerableProperty(value, "name", name);
              }
              state = enforceInternalState(value);
              if (!state.source) {
                state.source = TEMPLATE.join(
                  typeof name == "string" ? name : ""
                );
              }
            }
            if (O === global) {
              if (simple) O[key] = value;
              else setGlobal(key, value);
              return;
            } else if (!unsafe) {
              delete O[key];
            } else if (!noTargetGet && O[key]) {
              simple = true;
            }
            if (simple) O[key] = value;
            else createNonEnumerableProperty(O, key, value);
            // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
          })(Function.prototype, "toString", function toString() {
            return (
              (isCallable(this) && getInternalState(this).source) ||
              inspectSource(this)
            );
          });

          /***/
        },

        /***/ "6fcd": /***/ function (module, exports, __webpack_require__) {
          var baseTimes = __webpack_require__("50d8"),
            isArguments = __webpack_require__("d370"),
            isArray = __webpack_require__("6747"),
            isBuffer = __webpack_require__("0d24"),
            isIndex = __webpack_require__("c098"),
            isTypedArray = __webpack_require__("73ac");

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * Creates an array of the enumerable property names of the array-like `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @param {boolean} inherited Specify returning inherited property names.
           * @returns {Array} Returns the array of property names.
           */
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;

            for (var key in value) {
              if (
                (inherited || hasOwnProperty.call(value, key)) &&
                !(
                  skipIndexes &&
                  // Safari 9 has enumerable `arguments.length` in strict mode.
                  (key == "length" ||
                    // Node.js 0.10 has enumerable non-index properties on buffers.
                    (isBuff && (key == "offset" || key == "parent")) ||
                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                    (isType &&
                      (key == "buffer" ||
                        key == "byteLength" ||
                        key == "byteOffset")) ||
                    // Skip index properties.
                    isIndex(key, length))
                )
              ) {
                result.push(key);
              }
            }
            return result;
          }

          module.exports = arrayLikeKeys;

          /***/
        },

        /***/ 7037: /***/ function (module, exports, __webpack_require__) {
          __webpack_require__("a4d3");

          __webpack_require__("e01a");

          __webpack_require__("d3b7");

          __webpack_require__("d28b");

          __webpack_require__("e260");

          __webpack_require__("3ca3");

          __webpack_require__("ddb0");

          function _typeof(obj) {
            "@babel/helpers - typeof";

            return (
              ((module.exports = _typeof =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                  ? function (obj) {
                      return typeof obj;
                    }
                  : function (obj) {
                      return obj &&
                        "function" == typeof Symbol &&
                        obj.constructor === Symbol &&
                        obj !== Symbol.prototype
                        ? "symbol"
                        : typeof obj;
                    }),
              (module.exports.__esModule = true),
              (module.exports["default"] = module.exports)),
              _typeof(obj)
            );
          }

          (module.exports = _typeof),
            (module.exports.__esModule = true),
            (module.exports["default"] = module.exports);

          /***/
        },

        /***/ 7156: /***/ function (module, exports, __webpack_require__) {
          var isCallable = __webpack_require__("1626");
          var isObject = __webpack_require__("861d");
          var setPrototypeOf = __webpack_require__("d2bb");

          // makes subclassing work correct for wrapped built-ins
          module.exports = function ($this, dummy, Wrapper) {
            var NewTarget, NewTargetPrototype;
            if (
              // it can work only with native `setPrototypeOf`
              setPrototypeOf &&
              // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
              isCallable((NewTarget = dummy.constructor)) &&
              NewTarget !== Wrapper &&
              isObject((NewTargetPrototype = NewTarget.prototype)) &&
              NewTargetPrototype !== Wrapper.prototype
            )
              setPrototypeOf($this, NewTargetPrototype);
            return $this;
          };

          /***/
        },

        /***/ "72af": /***/ function (module, exports, __webpack_require__) {
          var createBaseFor = __webpack_require__("99cd");

          /**
           * The base implementation of `baseForOwn` which iterates over `object`
           * properties returned by `keysFunc` and invokes `iteratee` for each property.
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @returns {Object} Returns `object`.
           */
          var baseFor = createBaseFor();

          module.exports = baseFor;

          /***/
        },

        /***/ "73ac": /***/ function (module, exports, __webpack_require__) {
          var baseIsTypedArray = __webpack_require__("743f"),
            baseUnary = __webpack_require__("b047"),
            nodeUtil = __webpack_require__("99d3");

          /* Node.js helper references. */
          var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

          /**
           * Checks if `value` is classified as a typed array.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
           * @example
           *
           * _.isTypedArray(new Uint8Array);
           * // => true
           *
           * _.isTypedArray([]);
           * // => false
           */
          var isTypedArray = nodeIsTypedArray
            ? baseUnary(nodeIsTypedArray)
            : baseIsTypedArray;

          module.exports = isTypedArray;

          /***/
        },

        /***/ 7418: /***/ function (module, exports) {
          // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
          exports.f = Object.getOwnPropertySymbols;

          /***/
        },

        /***/ "743f": /***/ function (module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__("3729"),
            isLength = __webpack_require__("b218"),
            isObjectLike = __webpack_require__("1310");

          /** `Object#toString` result references. */
          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            boolTag = "[object Boolean]",
            dateTag = "[object Date]",
            errorTag = "[object Error]",
            funcTag = "[object Function]",
            mapTag = "[object Map]",
            numberTag = "[object Number]",
            objectTag = "[object Object]",
            regexpTag = "[object RegExp]",
            setTag = "[object Set]",
            stringTag = "[object String]",
            weakMapTag = "[object WeakMap]";

          var arrayBufferTag = "[object ArrayBuffer]",
            dataViewTag = "[object DataView]",
            float32Tag = "[object Float32Array]",
            float64Tag = "[object Float64Array]",
            int8Tag = "[object Int8Array]",
            int16Tag = "[object Int16Array]",
            int32Tag = "[object Int32Array]",
            uint8Tag = "[object Uint8Array]",
            uint8ClampedTag = "[object Uint8ClampedArray]",
            uint16Tag = "[object Uint16Array]",
            uint32Tag = "[object Uint32Array]";

          /** Used to identify `toStringTag` values of typed arrays. */
          var typedArrayTags = {};
          typedArrayTags[float32Tag] =
            typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] =
            typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] =
            typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] =
            typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] =
              true;
          typedArrayTags[argsTag] =
            typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] =
            typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] =
            typedArrayTags[dateTag] =
            typedArrayTags[errorTag] =
            typedArrayTags[funcTag] =
            typedArrayTags[mapTag] =
            typedArrayTags[numberTag] =
            typedArrayTags[objectTag] =
            typedArrayTags[regexpTag] =
            typedArrayTags[setTag] =
            typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] =
              false;

          /**
           * The base implementation of `_.isTypedArray` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
           */
          function baseIsTypedArray(value) {
            return (
              isObjectLike(value) &&
              isLength(value.length) &&
              !!typedArrayTags[baseGetTag(value)]
            );
          }

          module.exports = baseIsTypedArray;

          /***/
        },

        /***/ "746f": /***/ function (module, exports, __webpack_require__) {
          var path = __webpack_require__("428f");
          var hasOwn = __webpack_require__("1a2d");
          var wrappedWellKnownSymbolModule = __webpack_require__("e538");
          var defineProperty = __webpack_require__("9bf2").f;

          module.exports = function (NAME) {
            var Symbol = path.Symbol || (path.Symbol = {});
            if (!hasOwn(Symbol, NAME))
              defineProperty(Symbol, NAME, {
                value: wrappedWellKnownSymbolModule.f(NAME),
              });
          };

          /***/
        },

        /***/ "76dd": /***/ function (module, exports, __webpack_require__) {
          var baseToString = __webpack_require__("ce86");

          /**
           * Converts `value` to a string. An empty string is returned for `null`
           * and `undefined` values. The sign of `-0` is preserved.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.toString(null);
           * // => ''
           *
           * _.toString(-0);
           * // => '-0'
           *
           * _.toString([1, 2, 3]);
           * // => '1,2,3'
           */
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }

          module.exports = toString;

          /***/
        },

        /***/ 7839: /***/ function (module, exports) {
          // IE8- don't enum bug keys
          module.exports = [
            "constructor",
            "hasOwnProperty",
            "isPrototypeOf",
            "propertyIsEnumerable",
            "toLocaleString",
            "toString",
            "valueOf",
          ];

          /***/
        },

        /***/ "785a": /***/ function (module, exports, __webpack_require__) {
          // in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
          var documentCreateElement = __webpack_require__("cc12");

          var classList = documentCreateElement("span").classList;
          var DOMTokenListPrototype =
            classList &&
            classList.constructor &&
            classList.constructor.prototype;

          module.exports =
            DOMTokenListPrototype === Object.prototype
              ? undefined
              : DOMTokenListPrototype;

          /***/
        },

        /***/ 7948: /***/ function (module, exports) {
          /**
           * A specialized version of `_.map` for arrays without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */
          function arrayMap(array, iteratee) {
            var index = -1,
              length = array == null ? 0 : array.length,
              result = Array(length);

            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }

          module.exports = arrayMap;

          /***/
        },

        /***/ "79bc": /***/ function (module, exports, __webpack_require__) {
          var getNative = __webpack_require__("0b07"),
            root = __webpack_require__("2b3e");

          /* Built-in method references that are verified to be native. */
          var Map = getNative(root, "Map");

          module.exports = Map;

          /***/
        },

        /***/ "7a48": /***/ function (module, exports, __webpack_require__) {
          var nativeCreate = __webpack_require__("6044");

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * Checks if a hash value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Hash
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate
              ? data[key] !== undefined
              : hasOwnProperty.call(data, key);
          }

          module.exports = hashHas;

          /***/
        },

        /***/ "7b0b": /***/ function (module, exports, __webpack_require__) {
          var requireObjectCoercible = __webpack_require__("1d80");

          // `ToObject` abstract operation
          // https://tc39.es/ecma262/#sec-toobject
          module.exports = function (argument) {
            return Object(requireObjectCoercible(argument));
          };

          /***/
        },

        /***/ "7b83": /***/ function (module, exports, __webpack_require__) {
          var mapCacheClear = __webpack_require__("7c64"),
            mapCacheDelete = __webpack_require__("93ed"),
            mapCacheGet = __webpack_require__("2478"),
            mapCacheHas = __webpack_require__("a524"),
            mapCacheSet = __webpack_require__("1fc8");

          /**
           * Creates a map cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function MapCache(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          // Add methods to `MapCache`.
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;

          module.exports = MapCache;

          /***/
        },

        /***/ "7b97": /***/ function (module, exports, __webpack_require__) {
          var Stack = __webpack_require__("7e64"),
            equalArrays = __webpack_require__("a2be"),
            equalByTag = __webpack_require__("1c3c"),
            equalObjects = __webpack_require__("b1e5"),
            getTag = __webpack_require__("42a2"),
            isArray = __webpack_require__("6747"),
            isBuffer = __webpack_require__("0d24"),
            isTypedArray = __webpack_require__("73ac");

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1;

          /** `Object#toString` result references. */
          var argsTag = "[object Arguments]",
            arrayTag = "[object Array]",
            objectTag = "[object Object]";

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * A specialized version of `baseIsEqual` for arrays and objects which performs
           * deep comparisons and tracks traversed objects enabling objects with circular
           * references to be compared.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} [stack] Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function baseIsEqualDeep(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other);

            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;

            var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag;

            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object)
                ? equalArrays(
                    object,
                    other,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  )
                : equalByTag(
                    object,
                    other,
                    objTag,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  );
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped =
                  objIsObj && hasOwnProperty.call(object, "__wrapped__"),
                othIsWrapped =
                  othIsObj && hasOwnProperty.call(other, "__wrapped__");

              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other;

                stack || (stack = new Stack());
                return equalFunc(
                  objUnwrapped,
                  othUnwrapped,
                  bitmask,
                  customizer,
                  stack
                );
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            );
          }

          module.exports = baseIsEqualDeep;

          /***/
        },

        /***/ "7c64": /***/ function (module, exports, __webpack_require__) {
          var Hash = __webpack_require__("e24b"),
            ListCache = __webpack_require__("5e2e"),
            Map = __webpack_require__("79bc");

          /**
           * Removes all key-value entries from the map.
           *
           * @private
           * @name clear
           * @memberOf MapCache
           */
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              hash: new Hash(),
              map: new (Map || ListCache)(),
              string: new Hash(),
            };
          }

          module.exports = mapCacheClear;

          /***/
        },

        /***/ "7c73": /***/ function (module, exports, __webpack_require__) {
          /* global ActiveXObject -- old IE, WSH */
          var anObject = __webpack_require__("825a");
          var defineProperties = __webpack_require__("37e8");
          var enumBugKeys = __webpack_require__("7839");
          var hiddenKeys = __webpack_require__("d012");
          var html = __webpack_require__("1be4");
          var documentCreateElement = __webpack_require__("cc12");
          var sharedKey = __webpack_require__("f772");

          var GT = ">";
          var LT = "<";
          var PROTOTYPE = "prototype";
          var SCRIPT = "script";
          var IE_PROTO = sharedKey("IE_PROTO");

          var EmptyConstructor = function () {
            /* empty */
          };

          var scriptTag = function (content) {
            return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
          };

          // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
          var NullProtoObjectViaActiveX = function (activeXDocument) {
            activeXDocument.write(scriptTag(""));
            activeXDocument.close();
            var temp = activeXDocument.parentWindow.Object;
            activeXDocument = null; // avoid memory leak
            return temp;
          };

          // Create object with fake `null` prototype: use iframe Object with cleared prototype
          var NullProtoObjectViaIFrame = function () {
            // Thrash, waste and sodomy: IE GC bug
            var iframe = documentCreateElement("iframe");
            var JS = "java" + SCRIPT + ":";
            var iframeDocument;
            iframe.style.display = "none";
            html.appendChild(iframe);
            // https://github.com/zloirock/core-js/issues/475
            iframe.src = String(JS);
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(scriptTag("document.F=Object"));
            iframeDocument.close();
            return iframeDocument.F;
          };

          // Check for document.domain and active x support
          // No need to use active x approach when document.domain is not set
          // see https://github.com/es-shims/es5-shim/issues/150
          // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
          // avoid IE GC bug
          var activeXDocument;
          var NullProtoObject = function () {
            try {
              activeXDocument = new ActiveXObject("htmlfile");
            } catch (error) {
              /* ignore */
            }
            NullProtoObject =
              typeof document != "undefined"
                ? document.domain && activeXDocument
                  ? NullProtoObjectViaActiveX(activeXDocument) // old IE
                  : NullProtoObjectViaIFrame()
                : NullProtoObjectViaActiveX(activeXDocument); // WSH
            var length = enumBugKeys.length;
            while (length--)
              delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
            return NullProtoObject();
          };

          hiddenKeys[IE_PROTO] = true;

          // `Object.create` method
          // https://tc39.es/ecma262/#sec-object.create
          module.exports =
            Object.create ||
            function create(O, Properties) {
              var result;
              if (O !== null) {
                EmptyConstructor[PROTOTYPE] = anObject(O);
                result = new EmptyConstructor();
                EmptyConstructor[PROTOTYPE] = null;
                // add "__proto__" for Object.getPrototypeOf polyfill
                result[IE_PROTO] = O;
              } else result = NullProtoObject();
              return Properties === undefined
                ? result
                : defineProperties(result, Properties);
            };

          /***/
        },

        /***/ "7d1f": /***/ function (module, exports, __webpack_require__) {
          var arrayPush = __webpack_require__("087d"),
            isArray = __webpack_require__("6747");

          /**
           * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
           * `keysFunc` and `symbolsFunc` to get the enumerable property names and
           * symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @param {Function} symbolsFunc The function to get the symbols of `object`.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object)
              ? result
              : arrayPush(result, symbolsFunc(object));
          }

          module.exports = baseGetAllKeys;

          /***/
        },

        /***/ "7db0": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var $find = __webpack_require__("b727").find;
          var addToUnscopables = __webpack_require__("44d2");

          var FIND = "find";
          var SKIPS_HOLES = true;

          // Shouldn't skip holes
          if (FIND in [])
            Array(1)[FIND](function () {
              SKIPS_HOLES = false;
            });

          // `Array.prototype.find` method
          // https://tc39.es/ecma262/#sec-array.prototype.find
          $(
            { target: "Array", proto: true, forced: SKIPS_HOLES },
            {
              find: function find(callbackfn /* , that = undefined */) {
                return $find(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              },
            }
          );

          // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
          addToUnscopables(FIND);

          /***/
        },

        /***/ "7dd0": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var IS_PURE = __webpack_require__("c430");
          var FunctionName = __webpack_require__("5e77");
          var isCallable = __webpack_require__("1626");
          var createIteratorConstructor = __webpack_require__("9ed3");
          var getPrototypeOf = __webpack_require__("e163");
          var setPrototypeOf = __webpack_require__("d2bb");
          var setToStringTag = __webpack_require__("d44e");
          var createNonEnumerableProperty = __webpack_require__("9112");
          var redefine = __webpack_require__("6eeb");
          var wellKnownSymbol = __webpack_require__("b622");
          var Iterators = __webpack_require__("3f8c");
          var IteratorsCore = __webpack_require__("ae93");

          var PROPER_FUNCTION_NAME = FunctionName.PROPER;
          var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
          var IteratorPrototype = IteratorsCore.IteratorPrototype;
          var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
          var ITERATOR = wellKnownSymbol("iterator");
          var KEYS = "keys";
          var VALUES = "values";
          var ENTRIES = "entries";

          var returnThis = function () {
            return this;
          };

          module.exports = function (
            Iterable,
            NAME,
            IteratorConstructor,
            next,
            DEFAULT,
            IS_SET,
            FORCED
          ) {
            createIteratorConstructor(IteratorConstructor, NAME, next);

            var getIterationMethod = function (KIND) {
              if (KIND === DEFAULT && defaultIterator) return defaultIterator;
              if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
                return IterablePrototype[KIND];
              switch (KIND) {
                case KEYS:
                  return function keys() {
                    return new IteratorConstructor(this, KIND);
                  };
                case VALUES:
                  return function values() {
                    return new IteratorConstructor(this, KIND);
                  };
                case ENTRIES:
                  return function entries() {
                    return new IteratorConstructor(this, KIND);
                  };
              }
              return function () {
                return new IteratorConstructor(this);
              };
            };

            var TO_STRING_TAG = NAME + " Iterator";
            var INCORRECT_VALUES_NAME = false;
            var IterablePrototype = Iterable.prototype;
            var nativeIterator =
              IterablePrototype[ITERATOR] ||
              IterablePrototype["@@iterator"] ||
              (DEFAULT && IterablePrototype[DEFAULT]);
            var defaultIterator =
              (!BUGGY_SAFARI_ITERATORS && nativeIterator) ||
              getIterationMethod(DEFAULT);
            var anyNativeIterator =
              NAME == "Array"
                ? IterablePrototype.entries || nativeIterator
                : nativeIterator;
            var CurrentIteratorPrototype, methods, KEY;

            // fix native
            if (anyNativeIterator) {
              CurrentIteratorPrototype = getPrototypeOf(
                anyNativeIterator.call(new Iterable())
              );
              if (
                CurrentIteratorPrototype !== Object.prototype &&
                CurrentIteratorPrototype.next
              ) {
                if (
                  !IS_PURE &&
                  getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype
                ) {
                  if (setPrototypeOf) {
                    setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                  } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                    redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
                  }
                }
                // Set @@toStringTag to native iterators
                setToStringTag(
                  CurrentIteratorPrototype,
                  TO_STRING_TAG,
                  true,
                  true
                );
                if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
              }
            }

            // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
            if (
              PROPER_FUNCTION_NAME &&
              DEFAULT == VALUES &&
              nativeIterator &&
              nativeIterator.name !== VALUES
            ) {
              if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
                createNonEnumerableProperty(IterablePrototype, "name", VALUES);
              } else {
                INCORRECT_VALUES_NAME = true;
                defaultIterator = function values() {
                  return nativeIterator.call(this);
                };
              }
            }

            // export additional methods
            if (DEFAULT) {
              methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES),
              };
              if (FORCED)
                for (KEY in methods) {
                  if (
                    BUGGY_SAFARI_ITERATORS ||
                    INCORRECT_VALUES_NAME ||
                    !(KEY in IterablePrototype)
                  ) {
                    redefine(IterablePrototype, KEY, methods[KEY]);
                  }
                }
              else
                $(
                  {
                    target: NAME,
                    proto: true,
                    forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME,
                  },
                  methods
                );
            }

            // define iterator
            if (
              (!IS_PURE || FORCED) &&
              IterablePrototype[ITERATOR] !== defaultIterator
            ) {
              redefine(IterablePrototype, ITERATOR, defaultIterator, {
                name: DEFAULT,
              });
            }
            Iterators[NAME] = defaultIterator;

            return methods;
          };

          /***/
        },

        /***/ "7e06": /***/ function (module, exports, __webpack_require__) {
          // extracted by mini-css-extract-plugin
          /***/
        },

        /***/ "7e24": /***/ function (module, exports, __webpack_require__) {
          // extracted by mini-css-extract-plugin
          /***/
        },

        /***/ "7e64": /***/ function (module, exports, __webpack_require__) {
          var ListCache = __webpack_require__("5e2e"),
            stackClear = __webpack_require__("efb6"),
            stackDelete = __webpack_require__("2fcc"),
            stackGet = __webpack_require__("802a"),
            stackHas = __webpack_require__("55a3"),
            stackSet = __webpack_require__("d02c");

          /**
           * Creates a stack cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Stack(entries) {
            var data = (this.__data__ = new ListCache(entries));
            this.size = data.size;
          }

          // Add methods to `Stack`.
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;

          module.exports = Stack;

          /***/
        },

        /***/ "7ed2": /***/ function (module, exports) {
          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          /**
           * Adds `value` to the array cache.
           *
           * @private
           * @name add
           * @memberOf SetCache
           * @alias push
           * @param {*} value The value to cache.
           * @returns {Object} Returns the cache instance.
           */
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }

          module.exports = setCacheAdd;

          /***/
        },

        /***/ "7f9a": /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var isCallable = __webpack_require__("1626");
          var inspectSource = __webpack_require__("8925");

          var WeakMap = global.WeakMap;

          module.exports =
            isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));

          /***/
        },

        /***/ "802a": /***/ function (module, exports) {
          /**
           * Gets the stack value for `key`.
           *
           * @private
           * @name get
           * @memberOf Stack
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function stackGet(key) {
            return this.__data__.get(key);
          }

          module.exports = stackGet;

          /***/
        },

        /***/ "825a": /***/ function (module, exports, __webpack_require__) {
          var isObject = __webpack_require__("861d");

          // `Assert: Type(argument) is Object`
          module.exports = function (argument) {
            if (isObject(argument)) return argument;
            throw TypeError(String(argument) + " is not an object");
          };

          /***/
        },

        /***/ 8282: /***/ function (module, exports, __webpack_require__) {
          // extracted by mini-css-extract-plugin
          /***/
        },

        /***/ "83ab": /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");

          // Detect IE8's incomplete defineProperty implementation
          module.exports = !fails(function () {
            // eslint-disable-next-line es/no-object-defineproperty -- required for testing
            return (
              Object.defineProperty({}, 1, {
                get: function () {
                  return 7;
                },
              })[1] != 7
            );
          });

          /***/
        },

        /***/ 8418: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var toPropertyKey = __webpack_require__("a04b");
          var definePropertyModule = __webpack_require__("9bf2");
          var createPropertyDescriptor = __webpack_require__("5c6c");

          module.exports = function (object, key, value) {
            var propertyKey = toPropertyKey(key);
            if (propertyKey in object)
              definePropertyModule.f(
                object,
                propertyKey,
                createPropertyDescriptor(0, value)
              );
            else object[propertyKey] = value;
          };

          /***/
        },

        /***/ "841c": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
          var anObject = __webpack_require__("825a");
          var requireObjectCoercible = __webpack_require__("1d80");
          var sameValue = __webpack_require__("129f");
          var toString = __webpack_require__("577e");
          var getMethod = __webpack_require__("dc4a");
          var regExpExec = __webpack_require__("14c3");

          // @@search logic
          fixRegExpWellKnownSymbolLogic(
            "search",
            function (SEARCH, nativeSearch, maybeCallNative) {
              return [
                // `String.prototype.search` method
                // https://tc39.es/ecma262/#sec-string.prototype.search
                function search(regexp) {
                  var O = requireObjectCoercible(this);
                  var searcher =
                    regexp == undefined ? undefined : getMethod(regexp, SEARCH);
                  return searcher
                    ? searcher.call(regexp, O)
                    : new RegExp(regexp)[SEARCH](toString(O));
                },
                // `RegExp.prototype[@@search]` method
                // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
                function (string) {
                  var rx = anObject(this);
                  var S = toString(string);
                  var res = maybeCallNative(nativeSearch, rx, S);

                  if (res.done) return res.value;

                  var previousLastIndex = rx.lastIndex;
                  if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
                  var result = regExpExec(rx, S);
                  if (!sameValue(rx.lastIndex, previousLastIndex))
                    rx.lastIndex = previousLastIndex;
                  return result === null ? -1 : result.index;
                },
              ];
            }
          );

          /***/
        },

        /***/ 8604: /***/ function (module, exports, __webpack_require__) {
          var baseHasIn = __webpack_require__("26e8"),
            hasPath = __webpack_require__("e2c0");

          /**
           * Checks if `path` is a direct or inherited property of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           * @example
           *
           * var object = _.create({ 'a': _.create({ 'b': 2 }) });
           *
           * _.hasIn(object, 'a');
           * // => true
           *
           * _.hasIn(object, 'a.b');
           * // => true
           *
           * _.hasIn(object, ['a', 'b']);
           * // => true
           *
           * _.hasIn(object, 'b');
           * // => false
           */
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }

          module.exports = hasIn;

          /***/
        },

        /***/ "861d": /***/ function (module, exports, __webpack_require__) {
          var isCallable = __webpack_require__("1626");

          module.exports = function (it) {
            return typeof it === "object" ? it !== null : isCallable(it);
          };

          /***/
        },

        /***/ "872a": /***/ function (module, exports, __webpack_require__) {
          var defineProperty = __webpack_require__("3b4a");

          /**
           * The base implementation of `assignValue` and `assignMergeValue` without
           * value checks.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true,
              });
            } else {
              object[key] = value;
            }
          }

          module.exports = baseAssignValue;

          /***/
        },

        /***/ 8875: /***/ function (module, exports, __webpack_require__) {
          var __WEBPACK_AMD_DEFINE_FACTORY__,
            __WEBPACK_AMD_DEFINE_ARRAY__,
            __WEBPACK_AMD_DEFINE_RESULT__; // addapted from the document.currentScript polyfill by Adam Miller
          // MIT license
          // source: https://github.com/amiller-gh/currentScript-polyfill

          // added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505

          (function (root, factory) {
            if (true) {
              !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
              (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
              (__WEBPACK_AMD_DEFINE_RESULT__ =
                typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
                  ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                      exports,
                      __WEBPACK_AMD_DEFINE_ARRAY__
                    )
                  : __WEBPACK_AMD_DEFINE_FACTORY__),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else {
            }
          })(typeof self !== "undefined" ? self : this, function () {
            function getCurrentScript() {
              var descriptor = Object.getOwnPropertyDescriptor(
                document,
                "currentScript"
              );
              // for chrome
              if (
                !descriptor &&
                "currentScript" in document &&
                document.currentScript
              ) {
                return document.currentScript;
              }

              // for other browsers with native support for currentScript
              if (
                descriptor &&
                descriptor.get !== getCurrentScript &&
                document.currentScript
              ) {
                return document.currentScript;
              }

              // IE 8-10 support script readyState
              // IE 11+ & Firefox support stack trace
              try {
                throw new Error();
              } catch (err) {
                // Find the second match for the "at" string to get file src url from stack.
                var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/gi,
                  ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/gi,
                  stackDetails =
                    ieStackRegExp.exec(err.stack) ||
                    ffStackRegExp.exec(err.stack),
                  scriptLocation = (stackDetails && stackDetails[1]) || false,
                  line = (stackDetails && stackDetails[2]) || false,
                  currentLocation = document.location.href.replace(
                    document.location.hash,
                    ""
                  ),
                  pageSource,
                  inlineScriptSourceRegExp,
                  inlineScriptSource,
                  scripts = document.getElementsByTagName("script"); // Live NodeList collection

                if (scriptLocation === currentLocation) {
                  pageSource = document.documentElement.outerHTML;
                  inlineScriptSourceRegExp = new RegExp(
                    "(?:[^\\n]+?\\n){0," +
                      (line - 2) +
                      "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*",
                    "i"
                  );
                  inlineScriptSource = pageSource
                    .replace(inlineScriptSourceRegExp, "$1")
                    .trim();
                }

                for (var i = 0; i < scripts.length; i++) {
                  // If ready state is interactive, return the script tag
                  if (scripts[i].readyState === "interactive") {
                    return scripts[i];
                  }

                  // If src matches, return the script tag
                  if (scripts[i].src === scriptLocation) {
                    return scripts[i];
                  }

                  // If inline source matches, return the script tag
                  if (
                    scriptLocation === currentLocation &&
                    scripts[i].innerHTML &&
                    scripts[i].innerHTML.trim() === inlineScriptSource
                  ) {
                    return scripts[i];
                  }
                }

                // If no match, return null
                return null;
              }
            }

            return getCurrentScript;
          });

          /***/
        },

        /***/ 8925: /***/ function (module, exports, __webpack_require__) {
          var isCallable = __webpack_require__("1626");
          var store = __webpack_require__("c6cd");

          var functionToString = Function.toString;

          // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
          if (!isCallable(store.inspectSource)) {
            store.inspectSource = function (it) {
              return functionToString.call(it);
            };
          }

          module.exports = store.inspectSource;

          /***/
        },

        /***/ "8aa5": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var charAt = __webpack_require__("6547").charAt;

          // `AdvanceStringIndex` abstract operation
          // https://tc39.es/ecma262/#sec-advancestringindex
          module.exports = function (S, index, unicode) {
            return index + (unicode ? charAt(S, index).length : 1);
          };

          /***/
        },

        /***/ "8bbf": /***/ function (module, exports) {
          module.exports = __WEBPACK_EXTERNAL_MODULE__8bbf__;

          /***/
        },

        /***/ "90e3": /***/ function (module, exports) {
          var id = 0;
          var postfix = Math.random();

          module.exports = function (key) {
            return (
              "Symbol(" +
              String(key === undefined ? "" : key) +
              ")_" +
              (++id + postfix).toString(36)
            );
          };

          /***/
        },

        /***/ 9112: /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var definePropertyModule = __webpack_require__("9bf2");
          var createPropertyDescriptor = __webpack_require__("5c6c");

          module.exports = DESCRIPTORS
            ? function (object, key, value) {
                return definePropertyModule.f(
                  object,
                  key,
                  createPropertyDescriptor(1, value)
                );
              }
            : function (object, key, value) {
                object[key] = value;
                return object;
              };

          /***/
        },

        /***/ "91e9": /***/ function (module, exports) {
          /**
           * Creates a unary function that invokes `func` with its argument transformed.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {Function} transform The argument transform.
           * @returns {Function} Returns the new function.
           */
          function overArg(func, transform) {
            return function (arg) {
              return func(transform(arg));
            };
          }

          module.exports = overArg;

          /***/
        },

        /***/ 9263: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          /* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
          /* eslint-disable regexp/no-useless-quantifier -- testing */
          var toString = __webpack_require__("577e");
          var regexpFlags = __webpack_require__("ad6d");
          var stickyHelpers = __webpack_require__("9f7f");
          var shared = __webpack_require__("5692");
          var create = __webpack_require__("7c73");
          var getInternalState = __webpack_require__("69f3").get;
          var UNSUPPORTED_DOT_ALL = __webpack_require__("fce3");
          var UNSUPPORTED_NCG = __webpack_require__("107c");

          var nativeExec = RegExp.prototype.exec;
          var nativeReplace = shared(
            "native-string-replace",
            String.prototype.replace
          );

          var patchedExec = nativeExec;

          var UPDATES_LAST_INDEX_WRONG = (function () {
            var re1 = /a/;
            var re2 = /b*/g;
            nativeExec.call(re1, "a");
            nativeExec.call(re2, "a");
            return re1.lastIndex !== 0 || re2.lastIndex !== 0;
          })();

          var UNSUPPORTED_Y =
            stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

          // nonparticipating capturing group, copied from es5-shim's String#split patch.
          var NPCG_INCLUDED = /()??/.exec("")[1] !== undefined;

          var PATCH =
            UPDATES_LAST_INDEX_WRONG ||
            NPCG_INCLUDED ||
            UNSUPPORTED_Y ||
            UNSUPPORTED_DOT_ALL ||
            UNSUPPORTED_NCG;

          if (PATCH) {
            // eslint-disable-next-line max-statements -- TODO
            patchedExec = function exec(string) {
              var re = this;
              var state = getInternalState(re);
              var str = toString(string);
              var raw = state.raw;
              var result, reCopy, lastIndex, match, i, object, group;

              if (raw) {
                raw.lastIndex = re.lastIndex;
                result = patchedExec.call(raw, str);
                re.lastIndex = raw.lastIndex;
                return result;
              }

              var groups = state.groups;
              var sticky = UNSUPPORTED_Y && re.sticky;
              var flags = regexpFlags.call(re);
              var source = re.source;
              var charsAdded = 0;
              var strCopy = str;

              if (sticky) {
                flags = flags.replace("y", "");
                if (flags.indexOf("g") === -1) {
                  flags += "g";
                }

                strCopy = str.slice(re.lastIndex);
                // Support anchored sticky behavior.
                if (
                  re.lastIndex > 0 &&
                  (!re.multiline ||
                    (re.multiline && str.charAt(re.lastIndex - 1) !== "\n"))
                ) {
                  source = "(?: " + source + ")";
                  strCopy = " " + strCopy;
                  charsAdded++;
                }
                // ^(? + rx + ) is needed, in combination with some str slicing, to
                // simulate the 'y' flag.
                reCopy = new RegExp("^(?:" + source + ")", flags);
              }

              if (NPCG_INCLUDED) {
                reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
              }
              if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

              match = nativeExec.call(sticky ? reCopy : re, strCopy);

              if (sticky) {
                if (match) {
                  match.input = match.input.slice(charsAdded);
                  match[0] = match[0].slice(charsAdded);
                  match.index = re.lastIndex;
                  re.lastIndex += match[0].length;
                } else re.lastIndex = 0;
              } else if (UPDATES_LAST_INDEX_WRONG && match) {
                re.lastIndex = re.global
                  ? match.index + match[0].length
                  : lastIndex;
              }
              if (NPCG_INCLUDED && match && match.length > 1) {
                // Fix browsers whose `exec` methods don't consistently return `undefined`
                // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
                nativeReplace.call(match[0], reCopy, function () {
                  for (i = 1; i < arguments.length - 2; i++) {
                    if (arguments[i] === undefined) match[i] = undefined;
                  }
                });
              }

              if (match && groups) {
                match.groups = object = create(null);
                for (i = 0; i < groups.length; i++) {
                  group = groups[i];
                  object[group[0]] = match[group[1]];
                }
              }

              return match;
            };
          }

          module.exports = patchedExec;

          /***/
        },

        /***/ "93ed": /***/ function (module, exports, __webpack_require__) {
          var getMapData = __webpack_require__("4245");

          /**
           * Removes `key` and its value from the map.
           *
           * @private
           * @name delete
           * @memberOf MapCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function mapCacheDelete(key) {
            var result = getMapData(this, key)["delete"](key);
            this.size -= result ? 1 : 0;
            return result;
          }

          module.exports = mapCacheDelete;

          /***/
        },

        /***/ "94ca": /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");
          var isCallable = __webpack_require__("1626");

          var replacement = /#|\.prototype\./;

          var isForced = function (feature, detection) {
            var value = data[normalize(feature)];
            return value == POLYFILL
              ? true
              : value == NATIVE
              ? false
              : isCallable(detection)
              ? fails(detection)
              : !!detection;
          };

          var normalize = (isForced.normalize = function (string) {
            return String(string).replace(replacement, ".").toLowerCase();
          });

          var data = (isForced.data = {});
          var NATIVE = (isForced.NATIVE = "N");
          var POLYFILL = (isForced.POLYFILL = "P");

          module.exports = isForced;

          /***/
        },

        /***/ 9520: /***/ function (module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__("3729"),
            isObject = __webpack_require__("1a8c");

          /** `Object#toString` result references. */
          var asyncTag = "[object AsyncFunction]",
            funcTag = "[object Function]",
            genTag = "[object GeneratorFunction]",
            proxyTag = "[object Proxy]";

          /**
           * Checks if `value` is classified as a `Function` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a function, else `false`.
           * @example
           *
           * _.isFunction(_);
           * // => true
           *
           * _.isFunction(/abc/);
           * // => false
           */
          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            }
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return (
              tag == funcTag ||
              tag == genTag ||
              tag == asyncTag ||
              tag == proxyTag
            );
          }

          module.exports = isFunction;

          /***/
        },

        /***/ 9638: /***/ function (module, exports) {
          /**
           * Performs a
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * comparison between two values to determine if they are equivalent.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.eq(object, object);
           * // => true
           *
           * _.eq(object, other);
           * // => false
           *
           * _.eq('a', 'a');
           * // => true
           *
           * _.eq('a', Object('a'));
           * // => false
           *
           * _.eq(NaN, NaN);
           * // => true
           */
          function eq(value, other) {
            return value === other || (value !== value && other !== other);
          }

          module.exports = eq;

          /***/
        },

        /***/ "966f": /***/ function (module, exports, __webpack_require__) {
          var Stack = __webpack_require__("7e64"),
            baseIsEqual = __webpack_require__("c05f");

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /**
           * The base implementation of `_.isMatch` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @param {Array} matchData The property names, values, and compare flags to match.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           */
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length,
              length = index,
              noCustomizer = !customizer;

            if (object == null) {
              return !length;
            }
            object = Object(object);
            while (index--) {
              var data = matchData[index];
              if (
                noCustomizer && data[2]
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
              ) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0],
                objValue = object[key],
                srcValue = data[1];

              if (noCustomizer && data[2]) {
                if (objValue === undefined && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result = customizer(
                    objValue,
                    srcValue,
                    key,
                    object,
                    source,
                    stack
                  );
                }
                if (
                  !(result === undefined
                    ? baseIsEqual(
                        srcValue,
                        objValue,
                        COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                        customizer,
                        stack
                      )
                    : result)
                ) {
                  return false;
                }
              }
            }
            return true;
          }

          module.exports = baseIsMatch;

          /***/
        },

        /***/ "96cf": /***/ function (module, exports, __webpack_require__) {
          /**
           * Copyright (c) 2014-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */

          var runtime = (function (exports) {
            "use strict";

            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var undefined; // More compressible than void 0.
            var $Symbol = typeof Symbol === "function" ? Symbol : {};
            var iteratorSymbol = $Symbol.iterator || "@@iterator";
            var asyncIteratorSymbol =
              $Symbol.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

            function define(obj, key, value) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
              return obj[key];
            }
            try {
              // IE 8 has a broken Object.defineProperty that only works on DOM objects.
              define({}, "");
            } catch (err) {
              define = function (obj, key, value) {
                return (obj[key] = value);
              };
            }

            function wrap(innerFn, outerFn, self, tryLocsList) {
              // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
              var protoGenerator =
                outerFn && outerFn.prototype instanceof Generator
                  ? outerFn
                  : Generator;
              var generator = Object.create(protoGenerator.prototype);
              var context = new Context(tryLocsList || []);

              // The ._invoke method unifies the implementations of the .next,
              // .throw, and .return methods.
              generator._invoke = makeInvokeMethod(innerFn, self, context);

              return generator;
            }
            exports.wrap = wrap;

            // Try/catch helper to minimize deoptimizations. Returns a completion
            // record like context.tryEntries[i].completion. This interface could
            // have been (and was previously) designed to take a closure to be
            // invoked without arguments, but in all the cases we care about we
            // already have an existing method we want to call, so there's no need
            // to create a new function object. We can even get away with assuming
            // the method takes exactly one argument, since that happens to be true
            // in every case, so we don't have to touch the arguments object. The
            // only additional allocation required is the completion record, which
            // has a stable shape and so hopefully should be cheap to allocate.
            function tryCatch(fn, obj, arg) {
              try {
                return { type: "normal", arg: fn.call(obj, arg) };
              } catch (err) {
                return { type: "throw", arg: err };
              }
            }

            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed";

            // Returning this object from the innerFn has the same effect as
            // breaking out of the dispatch switch statement.
            var ContinueSentinel = {};

            // Dummy constructor functions that we use as the .constructor and
            // .constructor.prototype properties for functions that return Generator
            // objects. For full spec compliance, you may wish to configure your
            // minifier not to mangle the names of these two functions.
            function Generator() {}
            function GeneratorFunction() {}
            function GeneratorFunctionPrototype() {}

            // This is a polyfill for %IteratorPrototype% for environments that
            // don't natively support it.
            var IteratorPrototype = {};
            define(IteratorPrototype, iteratorSymbol, function () {
              return this;
            });

            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype =
              getProto && getProto(getProto(values([])));
            if (
              NativeIteratorPrototype &&
              NativeIteratorPrototype !== Op &&
              hasOwn.call(NativeIteratorPrototype, iteratorSymbol)
            ) {
              // This environment has a native %IteratorPrototype%; use it instead
              // of the polyfill.
              IteratorPrototype = NativeIteratorPrototype;
            }

            var Gp =
              (GeneratorFunctionPrototype.prototype =
              Generator.prototype =
                Object.create(IteratorPrototype));
            GeneratorFunction.prototype = GeneratorFunctionPrototype;
            define(Gp, "constructor", GeneratorFunctionPrototype);
            define(
              GeneratorFunctionPrototype,
              "constructor",
              GeneratorFunction
            );
            GeneratorFunction.displayName = define(
              GeneratorFunctionPrototype,
              toStringTagSymbol,
              "GeneratorFunction"
            );

            // Helper for defining the .next, .throw, and .return methods of the
            // Iterator interface in terms of a single ._invoke method.
            function defineIteratorMethods(prototype) {
              ["next", "throw", "return"].forEach(function (method) {
                define(prototype, method, function (arg) {
                  return this._invoke(method, arg);
                });
              });
            }

            exports.isGeneratorFunction = function (genFun) {
              var ctor = typeof genFun === "function" && genFun.constructor;
              return ctor
                ? ctor === GeneratorFunction ||
                    // For the native GeneratorFunction constructor, the best we can
                    // do is to check its .name property.
                    (ctor.displayName || ctor.name) === "GeneratorFunction"
                : false;
            };

            exports.mark = function (genFun) {
              if (Object.setPrototypeOf) {
                Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
              } else {
                genFun.__proto__ = GeneratorFunctionPrototype;
                define(genFun, toStringTagSymbol, "GeneratorFunction");
              }
              genFun.prototype = Object.create(Gp);
              return genFun;
            };

            // Within the body of any async function, `await x` is transformed to
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
            // `hasOwn.call(value, "__await")` to determine if the yielded value is
            // meant to be awaited.
            exports.awrap = function (arg) {
              return { __await: arg };
            };

            function AsyncIterator(generator, PromiseImpl) {
              function invoke(method, arg, resolve, reject) {
                var record = tryCatch(generator[method], generator, arg);
                if (record.type === "throw") {
                  reject(record.arg);
                } else {
                  var result = record.arg;
                  var value = result.value;
                  if (
                    value &&
                    typeof value === "object" &&
                    hasOwn.call(value, "__await")
                  ) {
                    return PromiseImpl.resolve(value.__await).then(
                      function (value) {
                        invoke("next", value, resolve, reject);
                      },
                      function (err) {
                        invoke("throw", err, resolve, reject);
                      }
                    );
                  }

                  return PromiseImpl.resolve(value).then(
                    function (unwrapped) {
                      // When a yielded Promise is resolved, its final value becomes
                      // the .value of the Promise<{value,done}> result for the
                      // current iteration.
                      result.value = unwrapped;
                      resolve(result);
                    },
                    function (error) {
                      // If a rejected Promise was yielded, throw the rejection back
                      // into the async generator function so it can be handled there.
                      return invoke("throw", error, resolve, reject);
                    }
                  );
                }
              }

              var previousPromise;

              function enqueue(method, arg) {
                function callInvokeWithMethodAndArg() {
                  return new PromiseImpl(function (resolve, reject) {
                    invoke(method, arg, resolve, reject);
                  });
                }

                return (previousPromise =
                  // If enqueue has been called before, then we want to wait until
                  // all previous Promises have been resolved before calling invoke,
                  // so that results are always delivered in the correct order. If
                  // enqueue has not been called before, then it is important to
                  // call invoke immediately, without waiting on a callback to fire,
                  // so that the async generator function has the opportunity to do
                  // any necessary setup in a predictable way. This predictability
                  // is why the Promise constructor synchronously invokes its
                  // executor callback, and why async functions synchronously
                  // execute code before the first await. Since we implement simple
                  // async functions in terms of async generators, it is especially
                  // important to get this right, even though it requires care.
                  previousPromise
                    ? previousPromise.then(
                        callInvokeWithMethodAndArg,
                        // Avoid propagating failures to Promises returned by later
                        // invocations of the iterator.
                        callInvokeWithMethodAndArg
                      )
                    : callInvokeWithMethodAndArg());
              }

              // Define the unified helper method that is used to implement .next,
              // .throw, and .return (see defineIteratorMethods).
              this._invoke = enqueue;
            }

            defineIteratorMethods(AsyncIterator.prototype);
            define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
              return this;
            });
            exports.AsyncIterator = AsyncIterator;

            // Note that simple async functions are implemented on top of
            // AsyncIterator objects; they just return a Promise for the value of
            // the final result produced by the iterator.
            exports.async = function (
              innerFn,
              outerFn,
              self,
              tryLocsList,
              PromiseImpl
            ) {
              if (PromiseImpl === void 0) PromiseImpl = Promise;

              var iter = new AsyncIterator(
                wrap(innerFn, outerFn, self, tryLocsList),
                PromiseImpl
              );

              return exports.isGeneratorFunction(outerFn)
                ? iter // If outerFn is a generator, return the full iterator.
                : iter.next().then(function (result) {
                    return result.done ? result.value : iter.next();
                  });
            };

            function makeInvokeMethod(innerFn, self, context) {
              var state = GenStateSuspendedStart;

              return function invoke(method, arg) {
                if (state === GenStateExecuting) {
                  throw new Error("Generator is already running");
                }

                if (state === GenStateCompleted) {
                  if (method === "throw") {
                    throw arg;
                  }

                  // Be forgiving, per 25.3.3.3.3 of the spec:
                  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                  return doneResult();
                }

                context.method = method;
                context.arg = arg;

                while (true) {
                  var delegate = context.delegate;
                  if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                      if (delegateResult === ContinueSentinel) continue;
                      return delegateResult;
                    }
                  }

                  if (context.method === "next") {
                    // Setting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    context.sent = context._sent = context.arg;
                  } else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                      state = GenStateCompleted;
                      throw context.arg;
                    }

                    context.dispatchException(context.arg);
                  } else if (context.method === "return") {
                    context.abrupt("return", context.arg);
                  }

                  state = GenStateExecuting;

                  var record = tryCatch(innerFn, self, context);
                  if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done
                      ? GenStateCompleted
                      : GenStateSuspendedYield;

                    if (record.arg === ContinueSentinel) {
                      continue;
                    }

                    return {
                      value: record.arg,
                      done: context.done,
                    };
                  } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                  }
                }
              };
            }

            // Call delegate.iterator[context.method](context.arg) and handle the
            // result, either by returning a { value, done } result from the
            // delegate iterator, or by modifying context.method and context.arg,
            // setting context.delegate to null, and returning the ContinueSentinel.
            function maybeInvokeDelegate(delegate, context) {
              var method = delegate.iterator[context.method];
              if (method === undefined) {
                // A .throw or .return when the delegate iterator has no .throw
                // method always terminates the yield* loop.
                context.delegate = null;

                if (context.method === "throw") {
                  // Note: ["return"] must be used for ES3 parsing compatibility.
                  if (delegate.iterator["return"]) {
                    // If the delegate iterator has a return method, give it a
                    // chance to clean up.
                    context.method = "return";
                    context.arg = undefined;
                    maybeInvokeDelegate(delegate, context);

                    if (context.method === "throw") {
                      // If maybeInvokeDelegate(context) changed context.method from
                      // "return" to "throw", let that override the TypeError below.
                      return ContinueSentinel;
                    }
                  }

                  context.method = "throw";
                  context.arg = new TypeError(
                    "The iterator does not provide a 'throw' method"
                  );
                }

                return ContinueSentinel;
              }

              var record = tryCatch(method, delegate.iterator, context.arg);

              if (record.type === "throw") {
                context.method = "throw";
                context.arg = record.arg;
                context.delegate = null;
                return ContinueSentinel;
              }

              var info = record.arg;

              if (!info) {
                context.method = "throw";
                context.arg = new TypeError("iterator result is not an object");
                context.delegate = null;
                return ContinueSentinel;
              }

              if (info.done) {
                // Assign the result of the finished delegate to the temporary
                // variable specified by delegate.resultName (see delegateYield).
                context[delegate.resultName] = info.value;

                // Resume execution at the desired location (see delegateYield).
                context.next = delegate.nextLoc;

                // If context.method was "throw" but the delegate handled the
                // exception, let the outer generator proceed normally. If
                // context.method was "next", forget context.arg since it has been
                // "consumed" by the delegate iterator. If context.method was
                // "return", allow the original .return call to continue in the
                // outer generator.
                if (context.method !== "return") {
                  context.method = "next";
                  context.arg = undefined;
                }
              } else {
                // Re-yield the result returned by the delegate method.
                return info;
              }

              // The delegate iterator is finished, so forget it and continue with
              // the outer generator.
              context.delegate = null;
              return ContinueSentinel;
            }

            // Define Generator.prototype.{next,throw,return} in terms of the
            // unified ._invoke helper method.
            defineIteratorMethods(Gp);

            define(Gp, toStringTagSymbol, "Generator");

            // A Generator should always return itself as the iterator object when the
            // @@iterator function is called on it. Some browsers' implementations of the
            // iterator prototype chain incorrectly implement this, causing the Generator
            // object to not be returned from this call. This ensures that doesn't happen.
            // See https://github.com/facebook/regenerator/issues/274 for more details.
            define(Gp, iteratorSymbol, function () {
              return this;
            });

            define(Gp, "toString", function () {
              return "[object Generator]";
            });

            function pushTryEntry(locs) {
              var entry = { tryLoc: locs[0] };

              if (1 in locs) {
                entry.catchLoc = locs[1];
              }

              if (2 in locs) {
                entry.finallyLoc = locs[2];
                entry.afterLoc = locs[3];
              }

              this.tryEntries.push(entry);
            }

            function resetTryEntry(entry) {
              var record = entry.completion || {};
              record.type = "normal";
              delete record.arg;
              entry.completion = record;
            }

            function Context(tryLocsList) {
              // The root entry object (effectively a try statement without a catch
              // or a finally block) gives us a place to store values thrown from
              // locations where there is no enclosing try statement.
              this.tryEntries = [{ tryLoc: "root" }];
              tryLocsList.forEach(pushTryEntry, this);
              this.reset(true);
            }

            exports.keys = function (object) {
              var keys = [];
              for (var key in object) {
                keys.push(key);
              }
              keys.reverse();

              // Rather than returning an object with a next method, we keep
              // things simple and return the next function itself.
              return function next() {
                while (keys.length) {
                  var key = keys.pop();
                  if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                  }
                }

                // To avoid creating an additional object, we just hang the .value
                // and .done properties off the next function object itself. This
                // also ensures that the minifier will not anonymize the function.
                next.done = true;
                return next;
              };
            };

            function values(iterable) {
              if (iterable) {
                var iteratorMethod = iterable[iteratorSymbol];
                if (iteratorMethod) {
                  return iteratorMethod.call(iterable);
                }

                if (typeof iterable.next === "function") {
                  return iterable;
                }

                if (!isNaN(iterable.length)) {
                  var i = -1,
                    next = function next() {
                      while (++i < iterable.length) {
                        if (hasOwn.call(iterable, i)) {
                          next.value = iterable[i];
                          next.done = false;
                          return next;
                        }
                      }

                      next.value = undefined;
                      next.done = true;

                      return next;
                    };

                  return (next.next = next);
                }
              }

              // Return an iterator with no values.
              return { next: doneResult };
            }
            exports.values = values;

            function doneResult() {
              return { value: undefined, done: true };
            }

            Context.prototype = {
              constructor: Context,

              reset: function (skipTempReset) {
                this.prev = 0;
                this.next = 0;
                // Resetting context._sent for legacy support of Babel's
                // function.sent implementation.
                this.sent = this._sent = undefined;
                this.done = false;
                this.delegate = null;

                this.method = "next";
                this.arg = undefined;

                this.tryEntries.forEach(resetTryEntry);

                if (!skipTempReset) {
                  for (var name in this) {
                    // Not sure about the optimal order of these conditions:
                    if (
                      name.charAt(0) === "t" &&
                      hasOwn.call(this, name) &&
                      !isNaN(+name.slice(1))
                    ) {
                      this[name] = undefined;
                    }
                  }
                }
              },

              stop: function () {
                this.done = true;

                var rootEntry = this.tryEntries[0];
                var rootRecord = rootEntry.completion;
                if (rootRecord.type === "throw") {
                  throw rootRecord.arg;
                }

                return this.rval;
              },

              dispatchException: function (exception) {
                if (this.done) {
                  throw exception;
                }

                var context = this;
                function handle(loc, caught) {
                  record.type = "throw";
                  record.arg = exception;
                  context.next = loc;

                  if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                  }

                  return !!caught;
                }

                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  var entry = this.tryEntries[i];
                  var record = entry.completion;

                  if (entry.tryLoc === "root") {
                    // Exception thrown outside of any try block that could handle
                    // it, so set the completion value of the entire function to
                    // throw the exception.
                    return handle("end");
                  }

                  if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");

                    if (hasCatch && hasFinally) {
                      if (this.prev < entry.catchLoc) {
                        return handle(entry.catchLoc, true);
                      } else if (this.prev < entry.finallyLoc) {
                        return handle(entry.finallyLoc);
                      }
                    } else if (hasCatch) {
                      if (this.prev < entry.catchLoc) {
                        return handle(entry.catchLoc, true);
                      }
                    } else if (hasFinally) {
                      if (this.prev < entry.finallyLoc) {
                        return handle(entry.finallyLoc);
                      }
                    } else {
                      throw new Error("try statement without catch or finally");
                    }
                  }
                }
              },

              abrupt: function (type, arg) {
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  var entry = this.tryEntries[i];
                  if (
                    entry.tryLoc <= this.prev &&
                    hasOwn.call(entry, "finallyLoc") &&
                    this.prev < entry.finallyLoc
                  ) {
                    var finallyEntry = entry;
                    break;
                  }
                }

                if (
                  finallyEntry &&
                  (type === "break" || type === "continue") &&
                  finallyEntry.tryLoc <= arg &&
                  arg <= finallyEntry.finallyLoc
                ) {
                  // Ignore the finally entry if control is not jumping to a
                  // location outside the try/catch block.
                  finallyEntry = null;
                }

                var record = finallyEntry ? finallyEntry.completion : {};
                record.type = type;
                record.arg = arg;

                if (finallyEntry) {
                  this.method = "next";
                  this.next = finallyEntry.finallyLoc;
                  return ContinueSentinel;
                }

                return this.complete(record);
              },

              complete: function (record, afterLoc) {
                if (record.type === "throw") {
                  throw record.arg;
                }

                if (record.type === "break" || record.type === "continue") {
                  this.next = record.arg;
                } else if (record.type === "return") {
                  this.rval = this.arg = record.arg;
                  this.method = "return";
                  this.next = "end";
                } else if (record.type === "normal" && afterLoc) {
                  this.next = afterLoc;
                }

                return ContinueSentinel;
              },

              finish: function (finallyLoc) {
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  var entry = this.tryEntries[i];
                  if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                  }
                }
              },

              catch: function (tryLoc) {
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  var entry = this.tryEntries[i];
                  if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                      var thrown = record.arg;
                      resetTryEntry(entry);
                    }
                    return thrown;
                  }
                }

                // The context.catch method must only be called with a location
                // argument that corresponds to a known catch block.
                throw new Error("illegal catch attempt");
              },

              delegateYield: function (iterable, resultName, nextLoc) {
                this.delegate = {
                  iterator: values(iterable),
                  resultName: resultName,
                  nextLoc: nextLoc,
                };

                if (this.method === "next") {
                  // Deliberately forget the last sent value so that we don't
                  // accidentally pass it on to the delegate.
                  this.arg = undefined;
                }

                return ContinueSentinel;
              },
            };

            // Regardless of whether this script is executing as a CommonJS module
            // or not, return the runtime object so that we can declare the variable
            // regeneratorRuntime in the outer scope, which allows this module to be
            // injected easily by `bin/regenerator --include-runtime script.js`.
            return exports;
          })(
            // If this script is executing as a CommonJS module, use module.exports
            // as the regeneratorRuntime namespace. Otherwise create a new empty
            // object. Either way, the resulting object will be used to initialize
            // the regeneratorRuntime variable at the top of this file.
            true ? module.exports : undefined
          );

          try {
            regeneratorRuntime = runtime;
          } catch (accidentalStrictMode) {
            // This module should not be running in strict mode, so the above
            // assignment should always work unless something is misconfigured. Just
            // in case runtime.js accidentally runs in strict mode, in modern engines
            // we can explicitly access globalThis. In older engines we can escape
            // strict mode using a global Function call. This could conceivably fail
            // if a Content Security Policy forbids using Function, but in that case
            // the proper solution is to fix the accidental strict mode problem. If
            // you've misconfigured your bundler to force strict mode and applied a
            // CSP to forbid Function, and you're not willing to fix either of those
            // problems, please detail your unique predicament in a GitHub issue.
            if (typeof globalThis === "object") {
              globalThis.regeneratorRuntime = runtime;
            } else {
              Function("r", "regeneratorRuntime = r")(runtime);
            }
          }

          /***/
        },

        /***/ 9861: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
          __webpack_require__("e260");
          var $ = __webpack_require__("23e7");
          var getBuiltIn = __webpack_require__("d066");
          var USE_NATIVE_URL = __webpack_require__("0d3b");
          var redefine = __webpack_require__("6eeb");
          var redefineAll = __webpack_require__("e2cc");
          var setToStringTag = __webpack_require__("d44e");
          var createIteratorConstructor = __webpack_require__("9ed3");
          var InternalStateModule = __webpack_require__("69f3");
          var anInstance = __webpack_require__("19aa");
          var isCallable = __webpack_require__("1626");
          var hasOwn = __webpack_require__("1a2d");
          var bind = __webpack_require__("0366");
          var classof = __webpack_require__("f5df");
          var anObject = __webpack_require__("825a");
          var isObject = __webpack_require__("861d");
          var $toString = __webpack_require__("577e");
          var create = __webpack_require__("7c73");
          var createPropertyDescriptor = __webpack_require__("5c6c");
          var getIterator = __webpack_require__("9a1f");
          var getIteratorMethod = __webpack_require__("35a1");
          var wellKnownSymbol = __webpack_require__("b622");

          var nativeFetch = getBuiltIn("fetch");
          var NativeRequest = getBuiltIn("Request");
          var RequestPrototype = NativeRequest && NativeRequest.prototype;
          var Headers = getBuiltIn("Headers");
          var ITERATOR = wellKnownSymbol("iterator");
          var URL_SEARCH_PARAMS = "URLSearchParams";
          var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
          var setInternalState = InternalStateModule.set;
          var getInternalParamsState =
            InternalStateModule.getterFor(URL_SEARCH_PARAMS);
          var getInternalIteratorState = InternalStateModule.getterFor(
            URL_SEARCH_PARAMS_ITERATOR
          );

          var plus = /\+/g;
          var sequences = Array(4);

          var percentSequence = function (bytes) {
            return (
              sequences[bytes - 1] ||
              (sequences[bytes - 1] = RegExp(
                "((?:%[\\da-f]{2}){" + bytes + "})",
                "gi"
              ))
            );
          };

          var percentDecode = function (sequence) {
            try {
              return decodeURIComponent(sequence);
            } catch (error) {
              return sequence;
            }
          };

          var deserialize = function (it) {
            var result = it.replace(plus, " ");
            var bytes = 4;
            try {
              return decodeURIComponent(result);
            } catch (error) {
              while (bytes) {
                result = result.replace(
                  percentSequence(bytes--),
                  percentDecode
                );
              }
              return result;
            }
          };

          var find = /[!'()~]|%20/g;

          var replace = {
            "!": "%21",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "~": "%7E",
            "%20": "+",
          };

          var replacer = function (match) {
            return replace[match];
          };

          var serialize = function (it) {
            return encodeURIComponent(it).replace(find, replacer);
          };

          var parseSearchParams = function (result, query) {
            if (query) {
              var attributes = query.split("&");
              var index = 0;
              var attribute, entry;
              while (index < attributes.length) {
                attribute = attributes[index++];
                if (attribute.length) {
                  entry = attribute.split("=");
                  result.push({
                    key: deserialize(entry.shift()),
                    value: deserialize(entry.join("=")),
                  });
                }
              }
            }
          };

          var updateSearchParams = function (query) {
            this.entries.length = 0;
            parseSearchParams(this.entries, query);
          };

          var validateArgumentsLength = function (passed, required) {
            if (passed < required) throw TypeError("Not enough arguments");
          };

          var URLSearchParamsIterator = createIteratorConstructor(
            function Iterator(params, kind) {
              setInternalState(this, {
                type: URL_SEARCH_PARAMS_ITERATOR,
                iterator: getIterator(getInternalParamsState(params).entries),
                kind: kind,
              });
            },
            "Iterator",
            function next() {
              var state = getInternalIteratorState(this);
              var kind = state.kind;
              var step = state.iterator.next();
              var entry = step.value;
              if (!step.done) {
                step.value =
                  kind === "keys"
                    ? entry.key
                    : kind === "values"
                    ? entry.value
                    : [entry.key, entry.value];
              }
              return step;
            }
          );

          // `URLSearchParams` constructor
          // https://url.spec.whatwg.org/#interface-urlsearchparams
          var URLSearchParamsConstructor =
            function URLSearchParams(/* init */) {
              anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
              var init = arguments.length > 0 ? arguments[0] : undefined;
              var that = this;
              var entries = [];
              var iteratorMethod,
                iterator,
                next,
                step,
                entryIterator,
                entryNext,
                first,
                second,
                key;

              setInternalState(that, {
                type: URL_SEARCH_PARAMS,
                entries: entries,
                updateURL: function () {
                  /* empty */
                },
                updateSearchParams: updateSearchParams,
              });

              if (init !== undefined) {
                if (isObject(init)) {
                  iteratorMethod = getIteratorMethod(init);
                  if (iteratorMethod) {
                    iterator = getIterator(init, iteratorMethod);
                    next = iterator.next;
                    while (!(step = next.call(iterator)).done) {
                      entryIterator = getIterator(anObject(step.value));
                      entryNext = entryIterator.next;
                      if (
                        (first = entryNext.call(entryIterator)).done ||
                        (second = entryNext.call(entryIterator)).done ||
                        !entryNext.call(entryIterator).done
                      )
                        throw TypeError("Expected sequence with length 2");
                      entries.push({
                        key: $toString(first.value),
                        value: $toString(second.value),
                      });
                    }
                  } else
                    for (key in init)
                      if (hasOwn(init, key))
                        entries.push({ key: key, value: $toString(init[key]) });
                } else {
                  parseSearchParams(
                    entries,
                    typeof init === "string"
                      ? init.charAt(0) === "?"
                        ? init.slice(1)
                        : init
                      : $toString(init)
                  );
                }
              }
            };

          var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

          redefineAll(
            URLSearchParamsPrototype,
            {
              // `URLSearchParams.prototype.append` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-append
              append: function append(name, value) {
                validateArgumentsLength(arguments.length, 2);
                var state = getInternalParamsState(this);
                state.entries.push({
                  key: $toString(name),
                  value: $toString(value),
                });
                state.updateURL();
              },
              // `URLSearchParams.prototype.delete` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
              delete: function (name) {
                validateArgumentsLength(arguments.length, 1);
                var state = getInternalParamsState(this);
                var entries = state.entries;
                var key = $toString(name);
                var index = 0;
                while (index < entries.length) {
                  if (entries[index].key === key) entries.splice(index, 1);
                  else index++;
                }
                state.updateURL();
              },
              // `URLSearchParams.prototype.get` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-get
              get: function get(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key = $toString(name);
                var index = 0;
                for (; index < entries.length; index++) {
                  if (entries[index].key === key) return entries[index].value;
                }
                return null;
              },
              // `URLSearchParams.prototype.getAll` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
              getAll: function getAll(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key = $toString(name);
                var result = [];
                var index = 0;
                for (; index < entries.length; index++) {
                  if (entries[index].key === key)
                    result.push(entries[index].value);
                }
                return result;
              },
              // `URLSearchParams.prototype.has` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-has
              has: function has(name) {
                validateArgumentsLength(arguments.length, 1);
                var entries = getInternalParamsState(this).entries;
                var key = $toString(name);
                var index = 0;
                while (index < entries.length) {
                  if (entries[index++].key === key) return true;
                }
                return false;
              },
              // `URLSearchParams.prototype.set` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-set
              set: function set(name, value) {
                validateArgumentsLength(arguments.length, 1);
                var state = getInternalParamsState(this);
                var entries = state.entries;
                var found = false;
                var key = $toString(name);
                var val = $toString(value);
                var index = 0;
                var entry;
                for (; index < entries.length; index++) {
                  entry = entries[index];
                  if (entry.key === key) {
                    if (found) entries.splice(index--, 1);
                    else {
                      found = true;
                      entry.value = val;
                    }
                  }
                }
                if (!found) entries.push({ key: key, value: val });
                state.updateURL();
              },
              // `URLSearchParams.prototype.sort` method
              // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
              sort: function sort() {
                var state = getInternalParamsState(this);
                var entries = state.entries;
                // Array#sort is not stable in some engines
                var slice = entries.slice();
                var entry, entriesIndex, sliceIndex;
                entries.length = 0;
                for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
                  entry = slice[sliceIndex];
                  for (
                    entriesIndex = 0;
                    entriesIndex < sliceIndex;
                    entriesIndex++
                  ) {
                    if (entries[entriesIndex].key > entry.key) {
                      entries.splice(entriesIndex, 0, entry);
                      break;
                    }
                  }
                  if (entriesIndex === sliceIndex) entries.push(entry);
                }
                state.updateURL();
              },
              // `URLSearchParams.prototype.forEach` method
              forEach: function forEach(callback /* , thisArg */) {
                var entries = getInternalParamsState(this).entries;
                var boundFunction = bind(
                  callback,
                  arguments.length > 1 ? arguments[1] : undefined,
                  3
                );
                var index = 0;
                var entry;
                while (index < entries.length) {
                  entry = entries[index++];
                  boundFunction(entry.value, entry.key, this);
                }
              },
              // `URLSearchParams.prototype.keys` method
              keys: function keys() {
                return new URLSearchParamsIterator(this, "keys");
              },
              // `URLSearchParams.prototype.values` method
              values: function values() {
                return new URLSearchParamsIterator(this, "values");
              },
              // `URLSearchParams.prototype.entries` method
              entries: function entries() {
                return new URLSearchParamsIterator(this, "entries");
              },
            },
            { enumerable: true }
          );

          // `URLSearchParams.prototype[@@iterator]` method
          redefine(
            URLSearchParamsPrototype,
            ITERATOR,
            URLSearchParamsPrototype.entries,
            { name: "entries" }
          );

          // `URLSearchParams.prototype.toString` method
          // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
          redefine(
            URLSearchParamsPrototype,
            "toString",
            function toString() {
              var entries = getInternalParamsState(this).entries;
              var result = [];
              var index = 0;
              var entry;
              while (index < entries.length) {
                entry = entries[index++];
                result.push(
                  serialize(entry.key) + "=" + serialize(entry.value)
                );
              }
              return result.join("&");
            },
            { enumerable: true }
          );

          setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

          $(
            { global: true, forced: !USE_NATIVE_URL },
            {
              URLSearchParams: URLSearchParamsConstructor,
            }
          );

          // Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
          if (!USE_NATIVE_URL && isCallable(Headers)) {
            var wrapRequestOptions = function (init) {
              if (isObject(init)) {
                var body = init.body;
                var headers;
                if (classof(body) === URL_SEARCH_PARAMS) {
                  headers = init.headers
                    ? new Headers(init.headers)
                    : new Headers();
                  if (!headers.has("content-type")) {
                    headers.set(
                      "content-type",
                      "application/x-www-form-urlencoded;charset=UTF-8"
                    );
                  }
                  return create(init, {
                    body: createPropertyDescriptor(0, String(body)),
                    headers: createPropertyDescriptor(0, headers),
                  });
                }
              }
              return init;
            };

            if (isCallable(nativeFetch)) {
              $(
                { global: true, enumerable: true, forced: true },
                {
                  fetch: function fetch(input /* , init */) {
                    return nativeFetch(
                      input,
                      arguments.length > 1
                        ? wrapRequestOptions(arguments[1])
                        : {}
                    );
                  },
                }
              );
            }

            if (isCallable(NativeRequest)) {
              var RequestConstructor = function Request(input /* , init */) {
                anInstance(this, RequestConstructor, "Request");
                return new NativeRequest(
                  input,
                  arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {}
                );
              };

              RequestPrototype.constructor = RequestConstructor;
              RequestConstructor.prototype = RequestPrototype;

              $(
                { global: true, forced: true },
                {
                  Request: RequestConstructor,
                }
              );
            }
          }

          module.exports = {
            URLSearchParams: URLSearchParamsConstructor,
            getState: getInternalParamsState,
          };

          /***/
        },

        /***/ "99af": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var fails = __webpack_require__("d039");
          var isArray = __webpack_require__("e8b5");
          var isObject = __webpack_require__("861d");
          var toObject = __webpack_require__("7b0b");
          var lengthOfArrayLike = __webpack_require__("07fa");
          var createProperty = __webpack_require__("8418");
          var arraySpeciesCreate = __webpack_require__("65f0");
          var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
          var wellKnownSymbol = __webpack_require__("b622");
          var V8_VERSION = __webpack_require__("2d00");

          var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
          var MAX_SAFE_INTEGER = 0x1fffffffffffff;
          var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";

          // We can't use this feature detection in V8 since it causes
          // deoptimization and serious performance degradation
          // https://github.com/zloirock/core-js/issues/679
          var IS_CONCAT_SPREADABLE_SUPPORT =
            V8_VERSION >= 51 ||
            !fails(function () {
              var array = [];
              array[IS_CONCAT_SPREADABLE] = false;
              return array.concat()[0] !== array;
            });

          var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");

          var isConcatSpreadable = function (O) {
            if (!isObject(O)) return false;
            var spreadable = O[IS_CONCAT_SPREADABLE];
            return spreadable !== undefined ? !!spreadable : isArray(O);
          };

          var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

          // `Array.prototype.concat` method
          // https://tc39.es/ecma262/#sec-array.prototype.concat
          // with adding support of @@isConcatSpreadable and @@species
          $(
            { target: "Array", proto: true, forced: FORCED },
            {
              // eslint-disable-next-line no-unused-vars -- required for `.length`
              concat: function concat(arg) {
                var O = toObject(this);
                var A = arraySpeciesCreate(O, 0);
                var n = 0;
                var i, k, length, len, E;
                for (i = -1, length = arguments.length; i < length; i++) {
                  E = i === -1 ? O : arguments[i];
                  if (isConcatSpreadable(E)) {
                    len = lengthOfArrayLike(E);
                    if (n + len > MAX_SAFE_INTEGER)
                      throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    for (k = 0; k < len; k++, n++)
                      if (k in E) createProperty(A, n, E[k]);
                  } else {
                    if (n >= MAX_SAFE_INTEGER)
                      throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    createProperty(A, n++, E);
                  }
                }
                A.length = n;
                return A;
              },
            }
          );

          /***/
        },

        /***/ "99cd": /***/ function (module, exports) {
          /**
           * Creates a base function for methods like `_.forIn` and `_.forOwn`.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new base function.
           */
          function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
              var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;

              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }

          module.exports = createBaseFor;

          /***/
        },

        /***/ "99d3": /***/ function (module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function (module) {
            var freeGlobal = __webpack_require__("585a");

            /** Detect free variable `exports`. */
            var freeExports = true && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule =
              freeExports &&
              typeof module == "object" &&
              module &&
              !module.nodeType &&
              module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports =
              freeModule && freeModule.exports === freeExports;

            /** Detect free variable `process` from Node.js. */
            var freeProcess = moduleExports && freeGlobal.process;

            /** Used to access faster Node.js helpers. */
            var nodeUtil = (function () {
              try {
                // Use `util.types` for Node.js 10+.
                var types =
                  freeModule &&
                  freeModule.require &&
                  freeModule.require("util").types;

                if (types) {
                  return types;
                }

                // Legacy `process.binding('util')` for Node.js < 10.
                return (
                  freeProcess &&
                  freeProcess.binding &&
                  freeProcess.binding("util")
                );
              } catch (e) {}
            })();

            module.exports = nodeUtil;

            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__("62e4")(module)));

          /***/
        },

        /***/ "9a1f": /***/ function (module, exports, __webpack_require__) {
          var aCallable = __webpack_require__("59ed");
          var anObject = __webpack_require__("825a");
          var getIteratorMethod = __webpack_require__("35a1");

          module.exports = function (argument, usingIterator) {
            var iteratorMethod =
              arguments.length < 2
                ? getIteratorMethod(argument)
                : usingIterator;
            if (aCallable(iteratorMethod))
              return anObject(iteratorMethod.call(argument));
            throw TypeError(String(argument) + " is not iterable");
          };

          /***/
        },

        /***/ "9b02": /***/ function (module, exports, __webpack_require__) {
          var baseGet = __webpack_require__("656b");

          /**
           * Gets the value at `path` of `object`. If the resolved value is
           * `undefined`, the `defaultValue` is returned in its place.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to get.
           * @param {*} [defaultValue] The value returned for `undefined` resolved values.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.get(object, 'a[0].b.c');
           * // => 3
           *
           * _.get(object, ['a', '0', 'b', 'c']);
           * // => 3
           *
           * _.get(object, 'a.b.c', 'default');
           * // => 'default'
           */
          function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
          }

          module.exports = get;

          /***/
        },

        /***/ "9ba5": /***/ function (module, exports, __webpack_require__) {
          // extracted by mini-css-extract-plugin
          /***/
        },

        /***/ "9bdd": /***/ function (module, exports, __webpack_require__) {
          var anObject = __webpack_require__("825a");
          var iteratorClose = __webpack_require__("2a62");

          // call something on iterator step with safe closing on error
          module.exports = function (iterator, fn, value, ENTRIES) {
            try {
              return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
            } catch (error) {
              iteratorClose(iterator, "throw", error);
            }
          };

          /***/
        },

        /***/ "9bf2": /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var IE8_DOM_DEFINE = __webpack_require__("0cfb");
          var anObject = __webpack_require__("825a");
          var toPropertyKey = __webpack_require__("a04b");

          // eslint-disable-next-line es/no-object-defineproperty -- safe
          var $defineProperty = Object.defineProperty;

          // `Object.defineProperty` method
          // https://tc39.es/ecma262/#sec-object.defineproperty
          exports.f = DESCRIPTORS
            ? $defineProperty
            : function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPropertyKey(P);
                anObject(Attributes);
                if (IE8_DOM_DEFINE)
                  try {
                    return $defineProperty(O, P, Attributes);
                  } catch (error) {
                    /* empty */
                  }
                if ("get" in Attributes || "set" in Attributes)
                  throw TypeError("Accessors not supported");
                if ("value" in Attributes) O[P] = Attributes.value;
                return O;
              };

          /***/
        },

        /***/ "9cc9": /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_index_vue_vue_type_style_index_0_id_1f6e38c2_lang_less__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__("9ba5");
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_index_vue_vue_type_style_index_0_id_1f6e38c2_lang_less__WEBPACK_IMPORTED_MODULE_0___default =
            /*#__PURE__*/ __webpack_require__.n(
              _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_index_vue_vue_type_style_index_0_id_1f6e38c2_lang_less__WEBPACK_IMPORTED_MODULE_0__
            );
          /* unused harmony reexport * */

          /***/
        },

        /***/ "9e69": /***/ function (module, exports, __webpack_require__) {
          var root = __webpack_require__("2b3e");

          /** Built-in value references. */
          var Symbol = root.Symbol;

          module.exports = Symbol;

          /***/
        },

        /***/ "9e86": /***/ function (module, exports, __webpack_require__) {
          var baseAssignValue = __webpack_require__("872a"),
            baseForOwn = __webpack_require__("242e"),
            baseIteratee = __webpack_require__("badf");

          /**
           * Creates an object with the same keys as `object` and values generated
           * by running each own enumerable string keyed property of `object` thru
           * `iteratee`. The iteratee is invoked with three arguments:
           * (value, key, object).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns the new mapped object.
           * @see _.mapKeys
           * @example
           *
           * var users = {
           *   'fred':    { 'user': 'fred',    'age': 40 },
           *   'pebbles': { 'user': 'pebbles', 'age': 1 }
           * };
           *
           * _.mapValues(users, function(o) { return o.age; });
           * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
           *
           * // The `_.property` iteratee shorthand.
           * _.mapValues(users, 'age');
           * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
           */
          function mapValues(object, iteratee) {
            var result = {};
            iteratee = baseIteratee(iteratee, 3);

            baseForOwn(object, function (value, key, object) {
              baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
          }

          module.exports = mapValues;

          /***/
        },

        /***/ "9ed3": /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var IteratorPrototype = __webpack_require__("ae93").IteratorPrototype;
          var create = __webpack_require__("7c73");
          var createPropertyDescriptor = __webpack_require__("5c6c");
          var setToStringTag = __webpack_require__("d44e");
          var Iterators = __webpack_require__("3f8c");

          var returnThis = function () {
            return this;
          };

          module.exports = function (IteratorConstructor, NAME, next) {
            var TO_STRING_TAG = NAME + " Iterator";
            IteratorConstructor.prototype = create(IteratorPrototype, {
              next: createPropertyDescriptor(1, next),
            });
            setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
            Iterators[TO_STRING_TAG] = returnThis;
            return IteratorConstructor;
          };

          /***/
        },

        /***/ "9f7f": /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");
          var global = __webpack_require__("da84");

          // babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
          var $RegExp = global.RegExp;

          exports.UNSUPPORTED_Y = fails(function () {
            var re = $RegExp("a", "y");
            re.lastIndex = 2;
            return re.exec("abcd") != null;
          });

          exports.BROKEN_CARET = fails(function () {
            // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
            var re = $RegExp("^r", "gy");
            re.lastIndex = 2;
            return re.exec("str") != null;
          });

          /***/
        },

        /***/ "9ff4": /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function (global) {
            /* unused harmony export EMPTY_ARR */
            /* unused harmony export EMPTY_OBJ */
            /* unused harmony export NO */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "a",
              function () {
                return NOOP;
              }
            );
            /* unused harmony export PatchFlagNames */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "b",
              function () {
                return camelize;
              }
            );
            /* unused harmony export capitalize */
            /* unused harmony export def */
            /* unused harmony export escapeHtml */
            /* unused harmony export escapeHtmlComment */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "c",
              function () {
                return extend;
              }
            );
            /* unused harmony export generateCodeFrame */
            /* unused harmony export getGlobalThis */
            /* unused harmony export hasChanged */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "d",
              function () {
                return hasOwn;
              }
            );
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "e",
              function () {
                return hyphenate;
              }
            );
            /* unused harmony export includeBooleanAttr */
            /* unused harmony export invokeArrayFns */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "f",
              function () {
                return isArray;
              }
            );
            /* unused harmony export isBooleanAttr */
            /* unused harmony export isDate */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "g",
              function () {
                return isFunction;
              }
            );
            /* unused harmony export isGloballyWhitelisted */
            /* unused harmony export isHTMLTag */
            /* unused harmony export isIntegerKey */
            /* unused harmony export isKnownHtmlAttr */
            /* unused harmony export isKnownSvgAttr */
            /* unused harmony export isMap */
            /* unused harmony export isModelListener */
            /* unused harmony export isNoUnitNumericStyleProp */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "h",
              function () {
                return isObject;
              }
            );
            /* unused harmony export isOn */
            /* unused harmony export isPlainObject */
            /* unused harmony export isPromise */
            /* unused harmony export isReservedProp */
            /* unused harmony export isSSRSafeAttrName */
            /* unused harmony export isSVGTag */
            /* unused harmony export isSet */
            /* unused harmony export isSpecialBooleanAttr */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "i",
              function () {
                return isString;
              }
            );
            /* unused harmony export isSymbol */
            /* unused harmony export isVoidTag */
            /* unused harmony export looseEqual */
            /* unused harmony export looseIndexOf */
            /* unused harmony export makeMap */
            /* unused harmony export normalizeClass */
            /* unused harmony export normalizeProps */
            /* unused harmony export normalizeStyle */
            /* unused harmony export objectToString */
            /* unused harmony export parseStringStyle */
            /* unused harmony export propsToAttrMap */
            /* unused harmony export remove */
            /* unused harmony export slotFlagsText */
            /* unused harmony export stringifyStyle */
            /* unused harmony export toDisplayString */
            /* unused harmony export toHandlerKey */
            /* unused harmony export toNumber */
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "j",
              function () {
                return toRawType;
              }
            );
            /* unused harmony export toTypeString */
            /**
             * Make a map and return a function for checking if a key
             * is in that map.
             * IMPORTANT: all calls of this function must be prefixed with
             * \/\*#\_\_PURE\_\_\*\/
             * So that rollup can tree-shake them if necessary.
             */
            function makeMap(str, expectsLowerCase) {
              const map = Object.create(null);
              const list = str.split(",");
              for (let i = 0; i < list.length; i++) {
                map[list[i]] = true;
              }
              return expectsLowerCase
                ? (val) => !!map[val.toLowerCase()]
                : (val) => !!map[val];
            }

            /**
             * dev only flag -> name mapping
             */
            const PatchFlagNames = {
              [1 /* TEXT */]: `TEXT`,
              [2 /* CLASS */]: `CLASS`,
              [4 /* STYLE */]: `STYLE`,
              [8 /* PROPS */]: `PROPS`,
              [16 /* FULL_PROPS */]: `FULL_PROPS`,
              [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,
              [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,
              [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,
              [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,
              [512 /* NEED_PATCH */]: `NEED_PATCH`,
              [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,
              [2048 /* DEV_ROOT_FRAGMENT */]: `DEV_ROOT_FRAGMENT`,
              [-1 /* HOISTED */]: `HOISTED`,
              [-2 /* BAIL */]: `BAIL`,
            };

            /**
             * Dev only
             */
            const slotFlagsText = {
              [1 /* STABLE */]: "STABLE",
              [2 /* DYNAMIC */]: "DYNAMIC",
              [3 /* FORWARDED */]: "FORWARDED",
            };

            const GLOBALS_WHITE_LISTED =
              "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI," +
              "decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array," +
              "Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
            const isGloballyWhitelisted =
              /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);

            const range = 2;
            function generateCodeFrame(source, start = 0, end = source.length) {
              // Split the content into individual lines but capture the newline sequence
              // that separated each line. This is important because the actual sequence is
              // needed to properly take into account the full line length for offset
              // comparison
              let lines = source.split(/(\r?\n)/);
              // Separate the lines and newline sequences into separate arrays for easier referencing
              const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
              lines = lines.filter((_, idx) => idx % 2 === 0);
              let count = 0;
              const res = [];
              for (let i = 0; i < lines.length; i++) {
                count +=
                  lines[i].length +
                  ((newlineSequences[i] && newlineSequences[i].length) || 0);
                if (count >= start) {
                  for (let j = i - range; j <= i + range || end > count; j++) {
                    if (j < 0 || j >= lines.length) continue;
                    const line = j + 1;
                    res.push(
                      `${line}${" ".repeat(
                        Math.max(3 - String(line).length, 0)
                      )}|  ${lines[j]}`
                    );
                    const lineLength = lines[j].length;
                    const newLineSeqLength =
                      (newlineSequences[j] && newlineSequences[j].length) || 0;
                    if (j === i) {
                      // push underline
                      const pad =
                        start - (count - (lineLength + newLineSeqLength));
                      const length = Math.max(
                        1,
                        end > count ? lineLength - pad : end - start
                      );
                      res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                    } else if (j > i) {
                      if (end > count) {
                        const length = Math.max(
                          Math.min(end - count, lineLength),
                          1
                        );
                        res.push(`   |  ` + "^".repeat(length));
                      }
                      count += lineLength + newLineSeqLength;
                    }
                  }
                  break;
                }
              }
              return res.join("\n");
            }

            /**
             * On the client we only need to offer special cases for boolean attributes that
             * have different names from their corresponding dom properties:
             * - itemscope -> N/A
             * - allowfullscreen -> allowFullscreen
             * - formnovalidate -> formNoValidate
             * - ismap -> isMap
             * - nomodule -> noModule
             * - novalidate -> noValidate
             * - readonly -> readOnly
             */
            const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
            const isSpecialBooleanAttr =
              /*#__PURE__*/ makeMap(specialBooleanAttrs);
            /**
             * The full list is needed during SSR to produce the correct initial markup.
             */
            const isBooleanAttr = /*#__PURE__*/ makeMap(
              specialBooleanAttrs +
                `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +
                `loop,open,required,reversed,scoped,seamless,` +
                `checked,muted,multiple,selected`
            );
            /**
             * Boolean attributes should be included if the value is truthy or ''.
             * e.g. <select multiple> compiles to { multiple: '' }
             */
            function includeBooleanAttr(value) {
              return !!value || value === "";
            }
            const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
            const attrValidationCache = {};
            function isSSRSafeAttrName(name) {
              if (attrValidationCache.hasOwnProperty(name)) {
                return attrValidationCache[name];
              }
              const isUnsafe = unsafeAttrCharRE.test(name);
              if (isUnsafe) {
                console.error(`unsafe attribute name: ${name}`);
              }
              return (attrValidationCache[name] = !isUnsafe);
            }
            const propsToAttrMap = {
              acceptCharset: "accept-charset",
              className: "class",
              htmlFor: "for",
              httpEquiv: "http-equiv",
            };
            /**
             * CSS properties that accept plain numbers
             */
            const isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(
              `animation-iteration-count,border-image-outset,border-image-slice,` +
                `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +
                `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +
                `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +
                `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +
                `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +
                // SVG
                `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +
                `stroke-miterlimit,stroke-opacity,stroke-width`
            );
            /**
             * Known attributes, this is used for stringification of runtime static nodes
             * so that we don't stringify bindings that cannot be set from HTML.
             * Don't also forget to allow `data-*` and `aria-*`!
             * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
             */
            const isKnownHtmlAttr = /*#__PURE__*/ makeMap(
              `accept,accept-charset,accesskey,action,align,allow,alt,async,` +
                `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +
                `border,buffered,capture,challenge,charset,checked,cite,class,code,` +
                `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +
                `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +
                `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +
                `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +
                `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +
                `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +
                `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +
                `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +
                `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +
                `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +
                `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +
                `value,width,wrap`
            );
            /**
             * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
             */
            const isKnownSvgAttr = /*#__PURE__*/ makeMap(
              `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` +
                `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` +
                `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` +
                `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` +
                `color-interpolation-filters,color-profile,color-rendering,` +
                `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` +
                `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` +
                `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` +
                `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` +
                `font-family,font-size,font-size-adjust,font-stretch,font-style,` +
                `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` +
                `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` +
                `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` +
                `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` +
                `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` +
                `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` +
                `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` +
                `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` +
                `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` +
                `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` +
                `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` +
                `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` +
                `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` +
                `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` +
                `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` +
                `specularConstant,specularExponent,speed,spreadMethod,startOffset,` +
                `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` +
                `strikethrough-position,strikethrough-thickness,string,stroke,` +
                `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` +
                `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` +
                `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` +
                `text-decoration,text-rendering,textLength,to,transform,transform-origin,` +
                `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` +
                `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` +
                `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` +
                `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` +
                `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` +
                `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` +
                `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`
            );

            function normalizeStyle(value) {
              if (isArray(value)) {
                const res = {};
                for (let i = 0; i < value.length; i++) {
                  const item = value[i];
                  const normalized = isString(item)
                    ? parseStringStyle(item)
                    : normalizeStyle(item);
                  if (normalized) {
                    for (const key in normalized) {
                      res[key] = normalized[key];
                    }
                  }
                }
                return res;
              } else if (isString(value)) {
                return value;
              } else if (isObject(value)) {
                return value;
              }
            }
            const listDelimiterRE = /;(?![^(]*\))/g;
            const propertyDelimiterRE = /:(.+)/;
            function parseStringStyle(cssText) {
              const ret = {};
              cssText.split(listDelimiterRE).forEach((item) => {
                if (item) {
                  const tmp = item.split(propertyDelimiterRE);
                  tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
                }
              });
              return ret;
            }
            function stringifyStyle(styles) {
              let ret = "";
              if (!styles || isString(styles)) {
                return ret;
              }
              for (const key in styles) {
                const value = styles[key];
                const normalizedKey = key.startsWith(`--`)
                  ? key
                  : hyphenate(key);
                if (
                  isString(value) ||
                  (typeof value === "number" &&
                    isNoUnitNumericStyleProp(normalizedKey))
                ) {
                  // only render valid values
                  ret += `${normalizedKey}:${value};`;
                }
              }
              return ret;
            }
            function normalizeClass(value) {
              let res = "";
              if (isString(value)) {
                res = value;
              } else if (isArray(value)) {
                for (let i = 0; i < value.length; i++) {
                  const normalized = normalizeClass(value[i]);
                  if (normalized) {
                    res += normalized + " ";
                  }
                }
              } else if (isObject(value)) {
                for (const name in value) {
                  if (value[name]) {
                    res += name + " ";
                  }
                }
              }
              return res.trim();
            }
            function normalizeProps(props) {
              if (!props) return null;
              let { class: klass, style } = props;
              if (klass && !isString(klass)) {
                props.class = normalizeClass(klass);
              }
              if (style) {
                props.style = normalizeStyle(style);
              }
              return props;
            }

            // These tag configs are shared between compiler-dom and runtime-dom, so they
            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element
            const HTML_TAGS =
              "html,body,base,head,link,meta,style,title,address,article,aside,footer," +
              "header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption," +
              "figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code," +
              "data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup," +
              "time,u,var,wbr,area,audio,map,track,video,embed,object,param,source," +
              "canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td," +
              "th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup," +
              "option,output,progress,select,textarea,details,dialog,menu," +
              "summary,template,blockquote,iframe,tfoot";
            // https://developer.mozilla.org/en-US/docs/Web/SVG/Element
            const SVG_TAGS =
              "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile," +
              "defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer," +
              "feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap," +
              "feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR," +
              "feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset," +
              "fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter," +
              "foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask," +
              "mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern," +
              "polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol," +
              "text,textPath,title,tspan,unknown,use,view";
            const VOID_TAGS =
              "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
            const isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);
            const isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);
            const isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);

            const escapeRE = /["'&<>]/;
            function escapeHtml(string) {
              const str = "" + string;
              const match = escapeRE.exec(str);
              if (!match) {
                return str;
              }
              let html = "";
              let escaped;
              let index;
              let lastIndex = 0;
              for (index = match.index; index < str.length; index++) {
                switch (str.charCodeAt(index)) {
                  case 34: // "
                    escaped = "&quot;";
                    break;
                  case 38: // &
                    escaped = "&amp;";
                    break;
                  case 39: // '
                    escaped = "&#39;";
                    break;
                  case 60: // <
                    escaped = "&lt;";
                    break;
                  case 62: // >
                    escaped = "&gt;";
                    break;
                  default:
                    continue;
                }
                if (lastIndex !== index) {
                  html += str.slice(lastIndex, index);
                }
                lastIndex = index + 1;
                html += escaped;
              }
              return lastIndex !== index
                ? html + str.slice(lastIndex, index)
                : html;
            }
            // https://www.w3.org/TR/html52/syntax.html#comments
            const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
            function escapeHtmlComment(src) {
              return src.replace(commentStripRE, "");
            }

            function looseCompareArrays(a, b) {
              if (a.length !== b.length) return false;
              let equal = true;
              for (let i = 0; equal && i < a.length; i++) {
                equal = looseEqual(a[i], b[i]);
              }
              return equal;
            }
            function looseEqual(a, b) {
              if (a === b) return true;
              let aValidType = isDate(a);
              let bValidType = isDate(b);
              if (aValidType || bValidType) {
                return aValidType && bValidType
                  ? a.getTime() === b.getTime()
                  : false;
              }
              aValidType = isArray(a);
              bValidType = isArray(b);
              if (aValidType || bValidType) {
                return aValidType && bValidType
                  ? looseCompareArrays(a, b)
                  : false;
              }
              aValidType = isObject(a);
              bValidType = isObject(b);
              if (aValidType || bValidType) {
                /* istanbul ignore if: this if will probably never be called */
                if (!aValidType || !bValidType) {
                  return false;
                }
                const aKeysCount = Object.keys(a).length;
                const bKeysCount = Object.keys(b).length;
                if (aKeysCount !== bKeysCount) {
                  return false;
                }
                for (const key in a) {
                  const aHasKey = a.hasOwnProperty(key);
                  const bHasKey = b.hasOwnProperty(key);
                  if (
                    (aHasKey && !bHasKey) ||
                    (!aHasKey && bHasKey) ||
                    !looseEqual(a[key], b[key])
                  ) {
                    return false;
                  }
                }
              }
              return String(a) === String(b);
            }
            function looseIndexOf(arr, val) {
              return arr.findIndex((item) => looseEqual(item, val));
            }

            /**
             * For converting {{ interpolation }} values to displayed strings.
             * @private
             */
            const toDisplayString = (val) => {
              return val == null
                ? ""
                : isArray(val) ||
                  (isObject(val) &&
                    (val.toString === objectToString ||
                      !isFunction(val.toString)))
                ? JSON.stringify(val, replacer, 2)
                : String(val);
            };
            const replacer = (_key, val) => {
              // can't use isRef here since @vue/shared has no deps
              if (val && val.__v_isRef) {
                return replacer(_key, val.value);
              } else if (isMap(val)) {
                return {
                  [`Map(${val.size})`]: [...val.entries()].reduce(
                    (entries, [key, val]) => {
                      entries[`${key} =>`] = val;
                      return entries;
                    },
                    {}
                  ),
                };
              } else if (isSet(val)) {
                return {
                  [`Set(${val.size})`]: [...val.values()],
                };
              } else if (
                isObject(val) &&
                !isArray(val) &&
                !isPlainObject(val)
              ) {
                return String(val);
              }
              return val;
            };

            const EMPTY_OBJ = false ? undefined : {};
            const EMPTY_ARR = false ? undefined : [];
            const NOOP = () => {};
            /**
             * Always return false.
             */
            const NO = () => false;
            const onRE = /^on[^a-z]/;
            const isOn = (key) => onRE.test(key);
            const isModelListener = (key) => key.startsWith("onUpdate:");
            const extend = Object.assign;
            const remove = (arr, el) => {
              const i = arr.indexOf(el);
              if (i > -1) {
                arr.splice(i, 1);
              }
            };
            const hasOwnProperty = Object.prototype.hasOwnProperty;
            const hasOwn = (val, key) => hasOwnProperty.call(val, key);
            const isArray = Array.isArray;
            const isMap = (val) => toTypeString(val) === "[object Map]";
            const isSet = (val) => toTypeString(val) === "[object Set]";
            const isDate = (val) => val instanceof Date;
            const isFunction = (val) => typeof val === "function";
            const isString = (val) => typeof val === "string";
            const isSymbol = (val) => typeof val === "symbol";
            const isObject = (val) => val !== null && typeof val === "object";
            const isPromise = (val) => {
              return (
                isObject(val) && isFunction(val.then) && isFunction(val.catch)
              );
            };
            const objectToString = Object.prototype.toString;
            const toTypeString = (value) => objectToString.call(value);
            const toRawType = (value) => {
              // extract "RawType" from strings like "[object RawType]"
              return toTypeString(value).slice(8, -1);
            };
            const isPlainObject = (val) =>
              toTypeString(val) === "[object Object]";
            const isIntegerKey = (key) =>
              isString(key) &&
              key !== "NaN" &&
              key[0] !== "-" &&
              "" + parseInt(key, 10) === key;
            const isReservedProp = /*#__PURE__*/ makeMap(
              // the leading comma is intentional so empty string "" is also included
              ",key,ref," +
                "onVnodeBeforeMount,onVnodeMounted," +
                "onVnodeBeforeUpdate,onVnodeUpdated," +
                "onVnodeBeforeUnmount,onVnodeUnmounted"
            );
            const cacheStringFunction = (fn) => {
              const cache = Object.create(null);
              return (str) => {
                const hit = cache[str];
                return hit || (cache[str] = fn(str));
              };
            };
            const camelizeRE = /-(\w)/g;
            /**
             * @private
             */
            const camelize = cacheStringFunction((str) => {
              return str.replace(camelizeRE, (_, c) =>
                c ? c.toUpperCase() : ""
              );
            });
            const hyphenateRE = /\B([A-Z])/g;
            /**
             * @private
             */
            const hyphenate = cacheStringFunction((str) =>
              str.replace(hyphenateRE, "-$1").toLowerCase()
            );
            /**
             * @private
             */
            const capitalize = cacheStringFunction(
              (str) => str.charAt(0).toUpperCase() + str.slice(1)
            );
            /**
             * @private
             */
            const toHandlerKey = cacheStringFunction((str) =>
              str ? `on${capitalize(str)}` : ``
            );
            // compare whether a value has changed, accounting for NaN.
            const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
            const invokeArrayFns = (fns, arg) => {
              for (let i = 0; i < fns.length; i++) {
                fns[i](arg);
              }
            };
            const def = (obj, key, value) => {
              Object.defineProperty(obj, key, {
                configurable: true,
                enumerable: false,
                value,
              });
            };
            const toNumber = (val) => {
              const n = parseFloat(val);
              return isNaN(n) ? val : n;
            };
            let _globalThis;
            const getGlobalThis = () => {
              return (
                _globalThis ||
                (_globalThis =
                  typeof globalThis !== "undefined"
                    ? globalThis
                    : typeof self !== "undefined"
                    ? self
                    : typeof window !== "undefined"
                    ? window
                    : typeof global !== "undefined"
                    ? global
                    : {})
              );
            };

            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__("c8ba")));

          /***/
        },

        /***/ a04b: /***/ function (module, exports, __webpack_require__) {
          var toPrimitive = __webpack_require__("c04e");
          var isSymbol = __webpack_require__("d9b5");

          // `ToPropertyKey` abstract operation
          // https://tc39.es/ecma262/#sec-topropertykey
          module.exports = function (argument) {
            var key = toPrimitive(argument, "string");
            return isSymbol(key) ? key : String(key);
          };

          /***/
        },

        /***/ a2be: /***/ function (module, exports, __webpack_require__) {
          var SetCache = __webpack_require__("d612"),
            arraySome = __webpack_require__("4284"),
            cacheHas = __webpack_require__("c584");

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

          /**
           * A specialized version of `baseIsEqualDeep` for arrays with support for
           * partial deep comparisons.
           *
           * @private
           * @param {Array} array The array to compare.
           * @param {Array} other The other array to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `array` and `other` objects.
           * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
           */
          function equalArrays(
            array,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length;

            if (
              arrLength != othLength &&
              !(isPartial && othLength > arrLength)
            ) {
              return false;
            }
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1,
              result = true,
              seen =
                bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

            stack.set(array, other);
            stack.set(other, array);

            // Ignore non-index properties.
            while (++index < arrLength) {
              var arrValue = array[index],
                othValue = other[index];

              if (customizer) {
                var compared = isPartial
                  ? customizer(othValue, arrValue, index, other, array, stack)
                  : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined) {
                if (compared) {
                  continue;
                }
                result = false;
                break;
              }
              // Recursively compare arrays (susceptible to call stack limits).
              if (seen) {
                if (
                  !arraySome(other, function (othValue, othIndex) {
                    if (
                      !cacheHas(seen, othIndex) &&
                      (arrValue === othValue ||
                        equalFunc(
                          arrValue,
                          othValue,
                          bitmask,
                          customizer,
                          stack
                        ))
                    ) {
                      return seen.push(othIndex);
                    }
                  })
                ) {
                  result = false;
                  break;
                }
              } else if (
                !(
                  arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )
              ) {
                result = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result;
          }

          module.exports = equalArrays;

          /***/
        },

        /***/ a434: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var toAbsoluteIndex = __webpack_require__("23cb");
          var toIntegerOrInfinity = __webpack_require__("5926");
          var lengthOfArrayLike = __webpack_require__("07fa");
          var toObject = __webpack_require__("7b0b");
          var arraySpeciesCreate = __webpack_require__("65f0");
          var createProperty = __webpack_require__("8418");
          var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

          var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");

          var max = Math.max;
          var min = Math.min;
          var MAX_SAFE_INTEGER = 0x1fffffffffffff;
          var MAXIMUM_ALLOWED_LENGTH_EXCEEDED =
            "Maximum allowed length exceeded";

          // `Array.prototype.splice` method
          // https://tc39.es/ecma262/#sec-array.prototype.splice
          // with adding support of @@species
          $(
            { target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT },
            {
              splice: function splice(start, deleteCount /* , ...items */) {
                var O = toObject(this);
                var len = lengthOfArrayLike(O);
                var actualStart = toAbsoluteIndex(start, len);
                var argumentsLength = arguments.length;
                var insertCount, actualDeleteCount, A, k, from, to;
                if (argumentsLength === 0) {
                  insertCount = actualDeleteCount = 0;
                } else if (argumentsLength === 1) {
                  insertCount = 0;
                  actualDeleteCount = len - actualStart;
                } else {
                  insertCount = argumentsLength - 2;
                  actualDeleteCount = min(
                    max(toIntegerOrInfinity(deleteCount), 0),
                    len - actualStart
                  );
                }
                if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
                  throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
                }
                A = arraySpeciesCreate(O, actualDeleteCount);
                for (k = 0; k < actualDeleteCount; k++) {
                  from = actualStart + k;
                  if (from in O) createProperty(A, k, O[from]);
                }
                A.length = actualDeleteCount;
                if (insertCount < actualDeleteCount) {
                  for (k = actualStart; k < len - actualDeleteCount; k++) {
                    from = k + actualDeleteCount;
                    to = k + insertCount;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                  }
                  for (k = len; k > len - actualDeleteCount + insertCount; k--)
                    delete O[k - 1];
                } else if (insertCount > actualDeleteCount) {
                  for (k = len - actualDeleteCount; k > actualStart; k--) {
                    from = k + actualDeleteCount - 1;
                    to = k + insertCount - 1;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                  }
                }
                for (k = 0; k < insertCount; k++) {
                  O[k + actualStart] = arguments[k + 2];
                }
                O.length = len - actualDeleteCount + insertCount;
                return A;
              },
            }
          );

          /***/
        },

        /***/ a4b4: /***/ function (module, exports, __webpack_require__) {
          var userAgent = __webpack_require__("342f");

          module.exports = /web0s(?!.*chrome)/i.test(userAgent);

          /***/
        },

        /***/ a4d3: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var global = __webpack_require__("da84");
          var getBuiltIn = __webpack_require__("d066");
          var IS_PURE = __webpack_require__("c430");
          var DESCRIPTORS = __webpack_require__("83ab");
          var NATIVE_SYMBOL = __webpack_require__("4930");
          var fails = __webpack_require__("d039");
          var hasOwn = __webpack_require__("1a2d");
          var isArray = __webpack_require__("e8b5");
          var isCallable = __webpack_require__("1626");
          var isObject = __webpack_require__("861d");
          var isSymbol = __webpack_require__("d9b5");
          var anObject = __webpack_require__("825a");
          var toObject = __webpack_require__("7b0b");
          var toIndexedObject = __webpack_require__("fc6a");
          var toPropertyKey = __webpack_require__("a04b");
          var $toString = __webpack_require__("577e");
          var createPropertyDescriptor = __webpack_require__("5c6c");
          var nativeObjectCreate = __webpack_require__("7c73");
          var objectKeys = __webpack_require__("df75");
          var getOwnPropertyNamesModule = __webpack_require__("241c");
          var getOwnPropertyNamesExternal = __webpack_require__("057f");
          var getOwnPropertySymbolsModule = __webpack_require__("7418");
          var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
          var definePropertyModule = __webpack_require__("9bf2");
          var propertyIsEnumerableModule = __webpack_require__("d1e7");
          var redefine = __webpack_require__("6eeb");
          var shared = __webpack_require__("5692");
          var sharedKey = __webpack_require__("f772");
          var hiddenKeys = __webpack_require__("d012");
          var uid = __webpack_require__("90e3");
          var wellKnownSymbol = __webpack_require__("b622");
          var wrappedWellKnownSymbolModule = __webpack_require__("e538");
          var defineWellKnownSymbol = __webpack_require__("746f");
          var setToStringTag = __webpack_require__("d44e");
          var InternalStateModule = __webpack_require__("69f3");
          var $forEach = __webpack_require__("b727").forEach;

          var HIDDEN = sharedKey("hidden");
          var SYMBOL = "Symbol";
          var PROTOTYPE = "prototype";
          var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
          var setInternalState = InternalStateModule.set;
          var getInternalState = InternalStateModule.getterFor(SYMBOL);
          var ObjectPrototype = Object[PROTOTYPE];
          var $Symbol = global.Symbol;
          var $stringify = getBuiltIn("JSON", "stringify");
          var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var nativeDefineProperty = definePropertyModule.f;
          var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
          var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
          var AllSymbols = shared("symbols");
          var ObjectPrototypeSymbols = shared("op-symbols");
          var StringToSymbolRegistry = shared("string-to-symbol-registry");
          var SymbolToStringRegistry = shared("symbol-to-string-registry");
          var WellKnownSymbolsStore = shared("wks");
          var QObject = global.QObject;
          // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
          var USE_SETTER =
            !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

          // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
          var setSymbolDescriptor =
            DESCRIPTORS &&
            fails(function () {
              return (
                nativeObjectCreate(
                  nativeDefineProperty({}, "a", {
                    get: function () {
                      return nativeDefineProperty(this, "a", { value: 7 }).a;
                    },
                  })
                ).a != 7
              );
            })
              ? function (O, P, Attributes) {
                  var ObjectPrototypeDescriptor =
                    nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
                  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
                  nativeDefineProperty(O, P, Attributes);
                  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
                    nativeDefineProperty(
                      ObjectPrototype,
                      P,
                      ObjectPrototypeDescriptor
                    );
                  }
                }
              : nativeDefineProperty;

          var wrap = function (tag, description) {
            var symbol = (AllSymbols[tag] = nativeObjectCreate(
              $Symbol[PROTOTYPE]
            ));
            setInternalState(symbol, {
              type: SYMBOL,
              tag: tag,
              description: description,
            });
            if (!DESCRIPTORS) symbol.description = description;
            return symbol;
          };

          var $defineProperty = function defineProperty(O, P, Attributes) {
            if (O === ObjectPrototype)
              $defineProperty(ObjectPrototypeSymbols, P, Attributes);
            anObject(O);
            var key = toPropertyKey(P);
            anObject(Attributes);
            if (hasOwn(AllSymbols, key)) {
              if (!Attributes.enumerable) {
                if (!hasOwn(O, HIDDEN))
                  nativeDefineProperty(
                    O,
                    HIDDEN,
                    createPropertyDescriptor(1, {})
                  );
                O[HIDDEN][key] = true;
              } else {
                if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                Attributes = nativeObjectCreate(Attributes, {
                  enumerable: createPropertyDescriptor(0, false),
                });
              }
              return setSymbolDescriptor(O, key, Attributes);
            }
            return nativeDefineProperty(O, key, Attributes);
          };

          var $defineProperties = function defineProperties(O, Properties) {
            anObject(O);
            var properties = toIndexedObject(Properties);
            var keys = objectKeys(properties).concat(
              $getOwnPropertySymbols(properties)
            );
            $forEach(keys, function (key) {
              if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key))
                $defineProperty(O, key, properties[key]);
            });
            return O;
          };

          var $create = function create(O, Properties) {
            return Properties === undefined
              ? nativeObjectCreate(O)
              : $defineProperties(nativeObjectCreate(O), Properties);
          };

          var $propertyIsEnumerable = function propertyIsEnumerable(V) {
            var P = toPropertyKey(V);
            var enumerable = nativePropertyIsEnumerable.call(this, P);
            if (
              this === ObjectPrototype &&
              hasOwn(AllSymbols, P) &&
              !hasOwn(ObjectPrototypeSymbols, P)
            )
              return false;
            return enumerable ||
              !hasOwn(this, P) ||
              !hasOwn(AllSymbols, P) ||
              (hasOwn(this, HIDDEN) && this[HIDDEN][P])
              ? enumerable
              : true;
          };

          var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(
            O,
            P
          ) {
            var it = toIndexedObject(O);
            var key = toPropertyKey(P);
            if (
              it === ObjectPrototype &&
              hasOwn(AllSymbols, key) &&
              !hasOwn(ObjectPrototypeSymbols, key)
            )
              return;
            var descriptor = nativeGetOwnPropertyDescriptor(it, key);
            if (
              descriptor &&
              hasOwn(AllSymbols, key) &&
              !(hasOwn(it, HIDDEN) && it[HIDDEN][key])
            ) {
              descriptor.enumerable = true;
            }
            return descriptor;
          };

          var $getOwnPropertyNames = function getOwnPropertyNames(O) {
            var names = nativeGetOwnPropertyNames(toIndexedObject(O));
            var result = [];
            $forEach(names, function (key) {
              if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key))
                result.push(key);
            });
            return result;
          };

          var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
            var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
            var names = nativeGetOwnPropertyNames(
              IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O)
            );
            var result = [];
            $forEach(names, function (key) {
              if (
                hasOwn(AllSymbols, key) &&
                (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))
              ) {
                result.push(AllSymbols[key]);
              }
            });
            return result;
          };

          // `Symbol` constructor
          // https://tc39.es/ecma262/#sec-symbol-constructor
          if (!NATIVE_SYMBOL) {
            $Symbol = function Symbol() {
              if (this instanceof $Symbol)
                throw TypeError("Symbol is not a constructor");
              var description =
                !arguments.length || arguments[0] === undefined
                  ? undefined
                  : $toString(arguments[0]);
              var tag = uid(description);
              var setter = function (value) {
                if (this === ObjectPrototype)
                  setter.call(ObjectPrototypeSymbols, value);
                if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
                  this[HIDDEN][tag] = false;
                setSymbolDescriptor(
                  this,
                  tag,
                  createPropertyDescriptor(1, value)
                );
              };
              if (DESCRIPTORS && USE_SETTER)
                setSymbolDescriptor(ObjectPrototype, tag, {
                  configurable: true,
                  set: setter,
                });
              return wrap(tag, description);
            };

            redefine($Symbol[PROTOTYPE], "toString", function toString() {
              return getInternalState(this).tag;
            });

            redefine($Symbol, "withoutSetter", function (description) {
              return wrap(uid(description), description);
            });

            propertyIsEnumerableModule.f = $propertyIsEnumerable;
            definePropertyModule.f = $defineProperty;
            getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
            getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f =
              $getOwnPropertyNames;
            getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

            wrappedWellKnownSymbolModule.f = function (name) {
              return wrap(wellKnownSymbol(name), name);
            };

            if (DESCRIPTORS) {
              // https://github.com/tc39/proposal-Symbol-description
              nativeDefineProperty($Symbol[PROTOTYPE], "description", {
                configurable: true,
                get: function description() {
                  return getInternalState(this).description;
                },
              });
              if (!IS_PURE) {
                redefine(
                  ObjectPrototype,
                  "propertyIsEnumerable",
                  $propertyIsEnumerable,
                  { unsafe: true }
                );
              }
            }
          }

          $(
            {
              global: true,
              wrap: true,
              forced: !NATIVE_SYMBOL,
              sham: !NATIVE_SYMBOL,
            },
            {
              Symbol: $Symbol,
            }
          );

          $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
            defineWellKnownSymbol(name);
          });

          $(
            { target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL },
            {
              // `Symbol.for` method
              // https://tc39.es/ecma262/#sec-symbol.for
              for: function (key) {
                var string = $toString(key);
                if (hasOwn(StringToSymbolRegistry, string))
                  return StringToSymbolRegistry[string];
                var symbol = $Symbol(string);
                StringToSymbolRegistry[string] = symbol;
                SymbolToStringRegistry[symbol] = string;
                return symbol;
              },
              // `Symbol.keyFor` method
              // https://tc39.es/ecma262/#sec-symbol.keyfor
              keyFor: function keyFor(sym) {
                if (!isSymbol(sym)) throw TypeError(sym + " is not a symbol");
                if (hasOwn(SymbolToStringRegistry, sym))
                  return SymbolToStringRegistry[sym];
              },
              useSetter: function () {
                USE_SETTER = true;
              },
              useSimple: function () {
                USE_SETTER = false;
              },
            }
          );

          $(
            {
              target: "Object",
              stat: true,
              forced: !NATIVE_SYMBOL,
              sham: !DESCRIPTORS,
            },
            {
              // `Object.create` method
              // https://tc39.es/ecma262/#sec-object.create
              create: $create,
              // `Object.defineProperty` method
              // https://tc39.es/ecma262/#sec-object.defineproperty
              defineProperty: $defineProperty,
              // `Object.defineProperties` method
              // https://tc39.es/ecma262/#sec-object.defineproperties
              defineProperties: $defineProperties,
              // `Object.getOwnPropertyDescriptor` method
              // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
              getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
            }
          );

          $(
            { target: "Object", stat: true, forced: !NATIVE_SYMBOL },
            {
              // `Object.getOwnPropertyNames` method
              // https://tc39.es/ecma262/#sec-object.getownpropertynames
              getOwnPropertyNames: $getOwnPropertyNames,
              // `Object.getOwnPropertySymbols` method
              // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
              getOwnPropertySymbols: $getOwnPropertySymbols,
            }
          );

          // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
          // https://bugs.chromium.org/p/v8/issues/detail?id=3443
          $(
            {
              target: "Object",
              stat: true,
              forced: fails(function () {
                getOwnPropertySymbolsModule.f(1);
              }),
            },
            {
              getOwnPropertySymbols: function getOwnPropertySymbols(it) {
                return getOwnPropertySymbolsModule.f(toObject(it));
              },
            }
          );

          // `JSON.stringify` method behavior with symbols
          // https://tc39.es/ecma262/#sec-json.stringify
          if ($stringify) {
            var FORCED_JSON_STRINGIFY =
              !NATIVE_SYMBOL ||
              fails(function () {
                var symbol = $Symbol();
                // MS Edge converts symbol values to JSON as {}
                return (
                  $stringify([symbol]) != "[null]" ||
                  // WebKit converts symbol values to JSON as null
                  $stringify({ a: symbol }) != "{}" ||
                  // V8 throws on boxed symbols
                  $stringify(Object(symbol)) != "{}"
                );
              });

            $(
              { target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY },
              {
                // eslint-disable-next-line no-unused-vars -- required for `.length`
                stringify: function stringify(it, replacer, space) {
                  var args = [it];
                  var index = 1;
                  var $replacer;
                  while (arguments.length > index)
                    args.push(arguments[index++]);
                  $replacer = replacer;
                  if ((!isObject(replacer) && it === undefined) || isSymbol(it))
                    return; // IE8 returns string on undefined
                  if (!isArray(replacer))
                    replacer = function (key, value) {
                      if (isCallable($replacer))
                        value = $replacer.call(this, key, value);
                      if (!isSymbol(value)) return value;
                    };
                  args[1] = replacer;
                  return $stringify.apply(null, args);
                },
              }
            );
          }

          // `Symbol.prototype[@@toPrimitive]` method
          // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
          if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
            var valueOf = $Symbol[PROTOTYPE].valueOf;
            redefine($Symbol[PROTOTYPE], TO_PRIMITIVE, function () {
              return valueOf.apply(this, arguments);
            });
          }
          // `Symbol.prototype[@@toStringTag]` property
          // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
          setToStringTag($Symbol, SYMBOL);

          hiddenKeys[HIDDEN] = true;

          /***/
        },

        /***/ a524: /***/ function (module, exports, __webpack_require__) {
          var getMapData = __webpack_require__("4245");

          /**
           * Checks if a map value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf MapCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }

          module.exports = mapCacheHas;

          /***/
        },

        /***/ a630: /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var from = __webpack_require__("4df4");
          var checkCorrectnessOfIteration = __webpack_require__("1c7e");

          var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (
            iterable
          ) {
            // eslint-disable-next-line es/no-array-from -- required for testing
            Array.from(iterable);
          });

          // `Array.from` method
          // https://tc39.es/ecma262/#sec-array.from
          $(
            { target: "Array", stat: true, forced: INCORRECT_ITERATION },
            {
              from: from,
            }
          );

          /***/
        },

        /***/ a640: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var fails = __webpack_require__("d039");

          module.exports = function (METHOD_NAME, argument) {
            var method = [][METHOD_NAME];
            return (
              !!method &&
              fails(function () {
                // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
                method.call(
                  null,
                  argument ||
                    function () {
                      throw 1;
                    },
                  1
                );
              })
            );
          };

          /***/
        },

        /***/ a994: /***/ function (module, exports, __webpack_require__) {
          var baseGetAllKeys = __webpack_require__("7d1f"),
            getSymbols = __webpack_require__("32f4"),
            keys = __webpack_require__("ec69");

          /**
           * Creates an array of own enumerable property names and symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }

          module.exports = getAllKeys;

          /***/
        },

        /***/ a9e3: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var DESCRIPTORS = __webpack_require__("83ab");
          var global = __webpack_require__("da84");
          var isForced = __webpack_require__("94ca");
          var redefine = __webpack_require__("6eeb");
          var hasOwn = __webpack_require__("1a2d");
          var inheritIfRequired = __webpack_require__("7156");
          var isSymbol = __webpack_require__("d9b5");
          var toPrimitive = __webpack_require__("c04e");
          var fails = __webpack_require__("d039");
          var getOwnPropertyNames = __webpack_require__("241c").f;
          var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
          var defineProperty = __webpack_require__("9bf2").f;
          var thisNumberValue = __webpack_require__("408a");
          var trim = __webpack_require__("58a8").trim;

          var NUMBER = "Number";
          var NativeNumber = global[NUMBER];
          var NumberPrototype = NativeNumber.prototype;

          // `ToNumeric` abstract operation
          // https://tc39.es/ecma262/#sec-tonumeric
          var toNumeric = function (value) {
            var primValue = toPrimitive(value, "number");
            return typeof primValue === "bigint"
              ? primValue
              : toNumber(primValue);
          };

          // `ToNumber` abstract operation
          // https://tc39.es/ecma262/#sec-tonumber
          var toNumber = function (argument) {
            var it = toPrimitive(argument, "number");
            var first, third, radix, maxCode, digits, length, index, code;
            if (isSymbol(it))
              throw TypeError("Cannot convert a Symbol value to a number");
            if (typeof it == "string" && it.length > 2) {
              it = trim(it);
              first = it.charCodeAt(0);
              if (first === 43 || first === 45) {
                third = it.charCodeAt(2);
                if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
              } else if (first === 48) {
                switch (it.charCodeAt(1)) {
                  case 66:
                  case 98:
                    radix = 2;
                    maxCode = 49;
                    break; // fast equal of /^0b[01]+$/i
                  case 79:
                  case 111:
                    radix = 8;
                    maxCode = 55;
                    break; // fast equal of /^0o[0-7]+$/i
                  default:
                    return +it;
                }
                digits = it.slice(2);
                length = digits.length;
                for (index = 0; index < length; index++) {
                  code = digits.charCodeAt(index);
                  // parseInt parses a string to a first unavailable symbol
                  // but ToNumber should return NaN if a string contains unavailable symbols
                  if (code < 48 || code > maxCode) return NaN;
                }
                return parseInt(digits, radix);
              }
            }
            return +it;
          };

          // `Number` constructor
          // https://tc39.es/ecma262/#sec-number-constructor
          if (
            isForced(
              NUMBER,
              !NativeNumber(" 0o1") ||
                !NativeNumber("0b1") ||
                NativeNumber("+0x1")
            )
          ) {
            var NumberWrapper = function Number(value) {
              var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
              var dummy = this;
              // check on 1..constructor(foo) case
              return dummy instanceof NumberWrapper &&
                fails(function () {
                  thisNumberValue(dummy);
                })
                ? inheritIfRequired(Object(n), dummy, NumberWrapper)
                : n;
            };
            for (
              var keys = DESCRIPTORS
                  ? getOwnPropertyNames(NativeNumber)
                  : // ES3:
                    (
                      "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY," +
                      // ES2015 (in case, if modules with ES2015 Number statics required before):
                      "EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt," +
                      // ESNext
                      "fromString,range"
                    ).split(","),
                j = 0,
                key;
              keys.length > j;
              j++
            ) {
              if (
                hasOwn(NativeNumber, (key = keys[j])) &&
                !hasOwn(NumberWrapper, key)
              ) {
                defineProperty(
                  NumberWrapper,
                  key,
                  getOwnPropertyDescriptor(NativeNumber, key)
                );
              }
            }
            NumberWrapper.prototype = NumberPrototype;
            NumberPrototype.constructor = NumberWrapper;
            redefine(global, NUMBER, NumberWrapper);
          }

          /***/
        },

        /***/ ab13: /***/ function (module, exports, __webpack_require__) {
          var wellKnownSymbol = __webpack_require__("b622");

          var MATCH = wellKnownSymbol("match");

          module.exports = function (METHOD_NAME) {
            var regexp = /./;
            try {
              "/./"[METHOD_NAME](regexp);
            } catch (error1) {
              try {
                regexp[MATCH] = false;
                return "/./"[METHOD_NAME](regexp);
              } catch (error2) {
                /* empty */
              }
            }
            return false;
          };

          /***/
        },

        /***/ abc5: /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* WEBPACK VAR INJECTION */ (function (global) {
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "a",
              function () {
                return getDevtoolsGlobalHook;
              }
            );
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "b",
              function () {
                return getTarget;
              }
            );
            /* harmony export (binding) */ __webpack_require__.d(
              __webpack_exports__,
              "c",
              function () {
                return isProxyAvailable;
              }
            );
            function getDevtoolsGlobalHook() {
              return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
            }
            function getTarget() {
              // @ts-ignore
              return typeof navigator !== "undefined" &&
                typeof window !== "undefined"
                ? window
                : typeof global !== "undefined"
                ? global
                : {};
            }
            const isProxyAvailable = typeof Proxy === "function";

            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__("c8ba")));

          /***/
        },

        /***/ ac1f: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var exec = __webpack_require__("9263");

          // `RegExp.prototype.exec` method
          // https://tc39.es/ecma262/#sec-regexp.prototype.exec
          $(
            { target: "RegExp", proto: true, forced: /./.exec !== exec },
            {
              exec: exec,
            }
          );

          /***/
        },

        /***/ ac41: /***/ function (module, exports) {
          /**
           * Converts `set` to an array of its values.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the values.
           */
          function setToArray(set) {
            var index = -1,
              result = Array(set.size);

            set.forEach(function (value) {
              result[++index] = value;
            });
            return result;
          }

          module.exports = setToArray;

          /***/
        },

        /***/ ad6d: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var anObject = __webpack_require__("825a");

          // `RegExp.prototype.flags` getter implementation
          // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
          module.exports = function () {
            var that = anObject(this);
            var result = "";
            if (that.global) result += "g";
            if (that.ignoreCase) result += "i";
            if (that.multiline) result += "m";
            if (that.dotAll) result += "s";
            if (that.unicode) result += "u";
            if (that.sticky) result += "y";
            return result;
          };

          /***/
        },

        /***/ ae93: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var fails = __webpack_require__("d039");
          var isCallable = __webpack_require__("1626");
          var create = __webpack_require__("7c73");
          var getPrototypeOf = __webpack_require__("e163");
          var redefine = __webpack_require__("6eeb");
          var wellKnownSymbol = __webpack_require__("b622");
          var IS_PURE = __webpack_require__("c430");

          var ITERATOR = wellKnownSymbol("iterator");
          var BUGGY_SAFARI_ITERATORS = false;

          // `%IteratorPrototype%` object
          // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
          var IteratorPrototype,
            PrototypeOfArrayIteratorPrototype,
            arrayIterator;

          /* eslint-disable es/no-array-prototype-keys -- safe */
          if ([].keys) {
            arrayIterator = [].keys();
            // Safari 8 has buggy iterators w/o `next`
            if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
            else {
              PrototypeOfArrayIteratorPrototype = getPrototypeOf(
                getPrototypeOf(arrayIterator)
              );
              if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
                IteratorPrototype = PrototypeOfArrayIteratorPrototype;
            }
          }

          var NEW_ITERATOR_PROTOTYPE =
            IteratorPrototype == undefined ||
            fails(function () {
              var test = {};
              // FF44- legacy iterators case
              return IteratorPrototype[ITERATOR].call(test) !== test;
            });

          if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
          else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

          // `%IteratorPrototype%[@@iterator]()` method
          // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
          if (!isCallable(IteratorPrototype[ITERATOR])) {
            redefine(IteratorPrototype, ITERATOR, function () {
              return this;
            });
          }

          module.exports = {
            IteratorPrototype: IteratorPrototype,
            BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS,
          };

          /***/
        },

        /***/ b041: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
          var classof = __webpack_require__("f5df");

          // `Object.prototype.toString` method implementation
          // https://tc39.es/ecma262/#sec-object.prototype.tostring
          module.exports = TO_STRING_TAG_SUPPORT
            ? {}.toString
            : function toString() {
                return "[object " + classof(this) + "]";
              };

          /***/
        },

        /***/ b047: /***/ function (module, exports) {
          /**
           * The base implementation of `_.unary` without support for storing metadata.
           *
           * @private
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           */
          function baseUnary(func) {
            return function (value) {
              return func(value);
            };
          }

          module.exports = baseUnary;

          /***/
        },

        /***/ b0c0: /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var FUNCTION_NAME_EXISTS = __webpack_require__("5e77").EXISTS;
          var defineProperty = __webpack_require__("9bf2").f;

          var FunctionPrototype = Function.prototype;
          var FunctionPrototypeToString = FunctionPrototype.toString;
          var nameRE = /^\s*function ([^ (]*)/;
          var NAME = "name";

          // Function instances `.name` property
          // https://tc39.es/ecma262/#sec-function-instances-name
          if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
            defineProperty(FunctionPrototype, NAME, {
              configurable: true,
              get: function () {
                try {
                  return FunctionPrototypeToString.call(this).match(nameRE)[1];
                } catch (error) {
                  return "";
                }
              },
            });
          }

          /***/
        },

        /***/ b1e5: /***/ function (module, exports, __webpack_require__) {
          var getAllKeys = __webpack_require__("a994");

          /** Used to compose bitmasks for value comparisons. */
          var COMPARE_PARTIAL_FLAG = 1;

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * A specialized version of `baseIsEqualDeep` for objects with support for
           * partial deep comparisons.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function equalObjects(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length;

            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (
                !(isPartial ? key in other : hasOwnProperty.call(other, key))
              ) {
                return false;
              }
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result = true;
            stack.set(object, other);
            stack.set(other, object);

            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key],
                othValue = other[key];

              if (customizer) {
                var compared = isPartial
                  ? customizer(othValue, objValue, key, other, object, stack)
                  : customizer(objValue, othValue, key, object, other, stack);
              }
              // Recursively compare objects (susceptible to call stack limits).
              if (
                !(compared === undefined
                  ? objValue === othValue ||
                    equalFunc(objValue, othValue, bitmask, customizer, stack)
                  : compared)
              ) {
                result = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result && !skipCtor) {
              var objCtor = object.constructor,
                othCtor = other.constructor;

              // Non `Object` object instances with different constructors are not equal.
              if (
                objCtor != othCtor &&
                "constructor" in object &&
                "constructor" in other &&
                !(
                  typeof objCtor == "function" &&
                  objCtor instanceof objCtor &&
                  typeof othCtor == "function" &&
                  othCtor instanceof othCtor
                )
              ) {
                result = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result;
          }

          module.exports = equalObjects;

          /***/
        },

        /***/ b218: /***/ function (module, exports) {
          /** Used as references for various `Number` constants. */
          var MAX_SAFE_INTEGER = 9007199254740991;

          /**
           * Checks if `value` is a valid array-like length.
           *
           * **Note:** This method is loosely based on
           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
           * @example
           *
           * _.isLength(3);
           * // => true
           *
           * _.isLength(Number.MIN_VALUE);
           * // => false
           *
           * _.isLength(Infinity);
           * // => false
           *
           * _.isLength('3');
           * // => false
           */
          function isLength(value) {
            return (
              typeof value == "number" &&
              value > -1 &&
              value % 1 == 0 &&
              value <= MAX_SAFE_INTEGER
            );
          }

          module.exports = isLength;

          /***/
        },

        /***/ b4c0: /***/ function (module, exports, __webpack_require__) {
          var assocIndexOf = __webpack_require__("cb5a");

          /**
           * Gets the list cache value for `key`.
           *
           * @private
           * @name get
           * @memberOf ListCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function listCacheGet(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key);

            return index < 0 ? undefined : data[index][1];
          }

          module.exports = listCacheGet;

          /***/
        },

        /***/ b575: /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
          var macrotask = __webpack_require__("2cf4").set;
          var IS_IOS = __webpack_require__("1cdc");
          var IS_IOS_PEBBLE = __webpack_require__("d4c3");
          var IS_WEBOS_WEBKIT = __webpack_require__("a4b4");
          var IS_NODE = __webpack_require__("605d");

          var MutationObserver =
            global.MutationObserver || global.WebKitMutationObserver;
          var document = global.document;
          var process = global.process;
          var Promise = global.Promise;
          // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
          var queueMicrotaskDescriptor = getOwnPropertyDescriptor(
            global,
            "queueMicrotask"
          );
          var queueMicrotask =
            queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

          var flush, head, last, notify, toggle, node, promise, then;

          // modern engines have queueMicrotask method
          if (!queueMicrotask) {
            flush = function () {
              var parent, fn;
              if (IS_NODE && (parent = process.domain)) parent.exit();
              while (head) {
                fn = head.fn;
                head = head.next;
                try {
                  fn();
                } catch (error) {
                  if (head) notify();
                  else last = undefined;
                  throw error;
                }
              }
              last = undefined;
              if (parent) parent.enter();
            };

            // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
            // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
            if (
              !IS_IOS &&
              !IS_NODE &&
              !IS_WEBOS_WEBKIT &&
              MutationObserver &&
              document
            ) {
              toggle = true;
              node = document.createTextNode("");
              new MutationObserver(flush).observe(node, {
                characterData: true,
              });
              notify = function () {
                node.data = toggle = !toggle;
              };
              // environments with maybe non-completely correct, but existent Promise
            } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
              // Promise.resolve without an argument throws an error in LG WebOS 2
              promise = Promise.resolve(undefined);
              // workaround of WebKit ~ iOS Safari 10.1 bug
              promise.constructor = Promise;
              then = promise.then;
              notify = function () {
                then.call(promise, flush);
              };
              // Node.js without promises
            } else if (IS_NODE) {
              notify = function () {
                process.nextTick(flush);
              };
              // for other environments - macrotask based on:
              // - setImmediate
              // - MessageChannel
              // - window.postMessag
              // - onreadystatechange
              // - setTimeout
            } else {
              notify = function () {
                // strange IE + webpack dev server bug - use .call(global)
                macrotask.call(global, flush);
              };
            }
          }

          module.exports =
            queueMicrotask ||
            function (fn) {
              var task = { fn: fn, next: undefined };
              if (last) last.next = task;
              if (!head) {
                head = task;
                notify();
              }
              last = task;
            };

          /***/
        },

        /***/ b5a7: /***/ function (module, exports, __webpack_require__) {
          var getNative = __webpack_require__("0b07"),
            root = __webpack_require__("2b3e");

          /* Built-in method references that are verified to be native. */
          var DataView = getNative(root, "DataView");

          module.exports = DataView;

          /***/
        },

        /***/ b622: /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var shared = __webpack_require__("5692");
          var hasOwn = __webpack_require__("1a2d");
          var uid = __webpack_require__("90e3");
          var NATIVE_SYMBOL = __webpack_require__("4930");
          var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

          var WellKnownSymbolsStore = shared("wks");
          var Symbol = global.Symbol;
          var createWellKnownSymbol = USE_SYMBOL_AS_UID
            ? Symbol
            : (Symbol && Symbol.withoutSetter) || uid;

          module.exports = function (name) {
            if (
              !hasOwn(WellKnownSymbolsStore, name) ||
              !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")
            ) {
              if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
                WellKnownSymbolsStore[name] = Symbol[name];
              } else {
                WellKnownSymbolsStore[name] = createWellKnownSymbol(
                  "Symbol." + name
                );
              }
            }
            return WellKnownSymbolsStore[name];
          };

          /***/
        },

        /***/ b64b: /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var toObject = __webpack_require__("7b0b");
          var nativeKeys = __webpack_require__("df75");
          var fails = __webpack_require__("d039");

          var FAILS_ON_PRIMITIVES = fails(function () {
            nativeKeys(1);
          });

          // `Object.keys` method
          // https://tc39.es/ecma262/#sec-object.keys
          $(
            { target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES },
            {
              keys: function keys(it) {
                return nativeKeys(toObject(it));
              },
            }
          );

          /***/
        },

        /***/ b6ad: /***/ function (module, exports, __webpack_require__) {
          var baseIsEqual = __webpack_require__("c05f");

          /**
           * This method is like `_.isEqual` except that it accepts `customizer` which
           * is invoked to compare values. If `customizer` returns `undefined`, comparisons
           * are handled by the method instead. The `customizer` is invoked with up to
           * six arguments: (objValue, othValue [, index|key, object, other, stack]).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * function isGreeting(value) {
           *   return /^h(?:i|ello)$/.test(value);
           * }
           *
           * function customizer(objValue, othValue) {
           *   if (isGreeting(objValue) && isGreeting(othValue)) {
           *     return true;
           *   }
           * }
           *
           * var array = ['hello', 'goodbye'];
           * var other = ['hi', 'goodbye'];
           *
           * _.isEqualWith(array, other, customizer);
           * // => true
           */
          function isEqualWith(value, other, customizer) {
            customizer =
              typeof customizer == "function" ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined
              ? baseIsEqual(value, other, undefined, customizer)
              : !!result;
          }

          module.exports = isEqualWith;

          /***/
        },

        /***/ b727: /***/ function (module, exports, __webpack_require__) {
          var bind = __webpack_require__("0366");
          var IndexedObject = __webpack_require__("44ad");
          var toObject = __webpack_require__("7b0b");
          var lengthOfArrayLike = __webpack_require__("07fa");
          var arraySpeciesCreate = __webpack_require__("65f0");

          var push = [].push;

          // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
          var createMethod = function (TYPE) {
            var IS_MAP = TYPE == 1;
            var IS_FILTER = TYPE == 2;
            var IS_SOME = TYPE == 3;
            var IS_EVERY = TYPE == 4;
            var IS_FIND_INDEX = TYPE == 6;
            var IS_FILTER_REJECT = TYPE == 7;
            var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
            return function ($this, callbackfn, that, specificCreate) {
              var O = toObject($this);
              var self = IndexedObject(O);
              var boundFunction = bind(callbackfn, that, 3);
              var length = lengthOfArrayLike(self);
              var index = 0;
              var create = specificCreate || arraySpeciesCreate;
              var target = IS_MAP
                ? create($this, length)
                : IS_FILTER || IS_FILTER_REJECT
                ? create($this, 0)
                : undefined;
              var value, result;
              for (; length > index; index++)
                if (NO_HOLES || index in self) {
                  value = self[index];
                  result = boundFunction(value, index, O);
                  if (TYPE) {
                    if (IS_MAP) target[index] = result;
                    // map
                    else if (result)
                      switch (TYPE) {
                        case 3:
                          return true; // some
                        case 5:
                          return value; // find
                        case 6:
                          return index; // findIndex
                        case 2:
                          push.call(target, value); // filter
                      }
                    else
                      switch (TYPE) {
                        case 4:
                          return false; // every
                        case 7:
                          push.call(target, value); // filterReject
                      }
                  }
                }
              return IS_FIND_INDEX
                ? -1
                : IS_SOME || IS_EVERY
                ? IS_EVERY
                : target;
            };
          };

          module.exports = {
            // `Array.prototype.forEach` method
            // https://tc39.es/ecma262/#sec-array.prototype.foreach
            forEach: createMethod(0),
            // `Array.prototype.map` method
            // https://tc39.es/ecma262/#sec-array.prototype.map
            map: createMethod(1),
            // `Array.prototype.filter` method
            // https://tc39.es/ecma262/#sec-array.prototype.filter
            filter: createMethod(2),
            // `Array.prototype.some` method
            // https://tc39.es/ecma262/#sec-array.prototype.some
            some: createMethod(3),
            // `Array.prototype.every` method
            // https://tc39.es/ecma262/#sec-array.prototype.every
            every: createMethod(4),
            // `Array.prototype.find` method
            // https://tc39.es/ecma262/#sec-array.prototype.find
            find: createMethod(5),
            // `Array.prototype.findIndex` method
            // https://tc39.es/ecma262/#sec-array.prototype.findIndex
            findIndex: createMethod(6),
            // `Array.prototype.filterReject` method
            // https://github.com/tc39/proposal-array-filtering
            filterReject: createMethod(7),
          };

          /***/
        },

        /***/ b774: /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "b",
            function () {
              return HOOK_SETUP;
            }
          );
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "a",
            function () {
              return HOOK_PLUGIN_SETTINGS_SET;
            }
          );
          const HOOK_SETUP = "devtools-plugin:setup";
          const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";

          /***/
        },

        /***/ badf: /***/ function (module, exports, __webpack_require__) {
          var baseMatches = __webpack_require__("642a"),
            baseMatchesProperty = __webpack_require__("1838"),
            identity = __webpack_require__("cd9d"),
            isArray = __webpack_require__("6747"),
            property = __webpack_require__("f9ce");

          /**
           * The base implementation of `_.iteratee`.
           *
           * @private
           * @param {*} [value=_.identity] The value to convert to an iteratee.
           * @returns {Function} Returns the iteratee.
           */
          function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value)
                ? baseMatchesProperty(value[0], value[1])
                : baseMatches(value);
            }
            return property(value);
          }

          module.exports = baseIteratee;

          /***/
        },

        /***/ bbc0: /***/ function (module, exports, __webpack_require__) {
          var nativeCreate = __webpack_require__("6044");

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = "__lodash_hash_undefined__";

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * Gets the hash value for `key`.
           *
           * @private
           * @name get
           * @memberOf Hash
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result = data[key];
              return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
          }

          module.exports = hashGet;

          /***/
        },

        /***/ c04e: /***/ function (module, exports, __webpack_require__) {
          var isObject = __webpack_require__("861d");
          var isSymbol = __webpack_require__("d9b5");
          var getMethod = __webpack_require__("dc4a");
          var ordinaryToPrimitive = __webpack_require__("485a");
          var wellKnownSymbol = __webpack_require__("b622");

          var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");

          // `ToPrimitive` abstract operation
          // https://tc39.es/ecma262/#sec-toprimitive
          module.exports = function (input, pref) {
            if (!isObject(input) || isSymbol(input)) return input;
            var exoticToPrim = getMethod(input, TO_PRIMITIVE);
            var result;
            if (exoticToPrim) {
              if (pref === undefined) pref = "default";
              result = exoticToPrim.call(input, pref);
              if (!isObject(result) || isSymbol(result)) return result;
              throw TypeError("Can't convert object to primitive value");
            }
            if (pref === undefined) pref = "number";
            return ordinaryToPrimitive(input, pref);
          };

          /***/
        },

        /***/ c05f: /***/ function (module, exports, __webpack_require__) {
          var baseIsEqualDeep = __webpack_require__("7b97"),
            isObjectLike = __webpack_require__("1310");

          /**
           * The base implementation of `_.isEqual` which supports partial comparisons
           * and tracks traversed objects.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @param {boolean} bitmask The bitmask flags.
           *  1 - Unordered comparison
           *  2 - Partial comparison
           * @param {Function} [customizer] The function to customize comparisons.
           * @param {Object} [stack] Tracks traversed `value` and `other` objects.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           */
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (
              value == null ||
              other == null ||
              (!isObjectLike(value) && !isObjectLike(other))
            ) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(
              value,
              other,
              bitmask,
              customizer,
              baseIsEqual,
              stack
            );
          }

          module.exports = baseIsEqual;

          /***/
        },

        /***/ c098: /***/ function (module, exports) {
          /** Used as references for various `Number` constants. */
          var MAX_SAFE_INTEGER = 9007199254740991;

          /** Used to detect unsigned integer values. */
          var reIsUint = /^(?:0|[1-9]\d*)$/;

          /**
           * Checks if `value` is a valid array-like index.
           *
           * @private
           * @param {*} value The value to check.
           * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
           * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
           */
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;

            return (
              !!length &&
              (type == "number" ||
                (type != "symbol" && reIsUint.test(value))) &&
              value > -1 &&
              value % 1 == 0 &&
              value < length
            );
          }

          module.exports = isIndex;

          /***/
        },

        /***/ c430: /***/ function (module, exports) {
          module.exports = false;

          /***/
        },

        /***/ c584: /***/ function (module, exports) {
          /**
           * Checks if a `cache` value for `key` exists.
           *
           * @private
           * @param {Object} cache The cache to query.
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function cacheHas(cache, key) {
            return cache.has(key);
          }

          module.exports = cacheHas;

          /***/
        },

        /***/ c5ac: /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_index_vue_vue_type_style_index_0_id_7e27f9cc_lang_less__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__("8282");
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_index_vue_vue_type_style_index_0_id_7e27f9cc_lang_less__WEBPACK_IMPORTED_MODULE_0___default =
            /*#__PURE__*/ __webpack_require__.n(
              _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_index_vue_vue_type_style_index_0_id_7e27f9cc_lang_less__WEBPACK_IMPORTED_MODULE_0__
            );
          /* unused harmony reexport * */

          /***/
        },

        /***/ c607: /***/ function (module, exports, __webpack_require__) {
          var DESCRIPTORS = __webpack_require__("83ab");
          var UNSUPPORTED_DOT_ALL = __webpack_require__("fce3");
          var defineProperty = __webpack_require__("9bf2").f;
          var getInternalState = __webpack_require__("69f3").get;
          var RegExpPrototype = RegExp.prototype;

          // `RegExp.prototype.dotAll` getter
          // https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall
          if (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {
            defineProperty(RegExpPrototype, "dotAll", {
              configurable: true,
              get: function () {
                if (this === RegExpPrototype) return undefined;
                // We can't use InternalStateModule.getterFor because
                // we don't add metadata for regexps created by a literal.
                if (this instanceof RegExp) {
                  return !!getInternalState(this).dotAll;
                }
                throw TypeError("Incompatible receiver, RegExp required");
              },
            });
          }

          /***/
        },

        /***/ c6b6: /***/ function (module, exports) {
          var toString = {}.toString;

          module.exports = function (it) {
            return toString.call(it).slice(8, -1);
          };

          /***/
        },

        /***/ c6cd: /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var setGlobal = __webpack_require__("ce4e");

          var SHARED = "__core-js_shared__";
          var store = global[SHARED] || setGlobal(SHARED, {});

          module.exports = store;

          /***/
        },

        /***/ c740: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var $findIndex = __webpack_require__("b727").findIndex;
          var addToUnscopables = __webpack_require__("44d2");

          var FIND_INDEX = "findIndex";
          var SKIPS_HOLES = true;

          // Shouldn't skip holes
          if (FIND_INDEX in [])
            Array(1)[FIND_INDEX](function () {
              SKIPS_HOLES = false;
            });

          // `Array.prototype.findIndex` method
          // https://tc39.es/ecma262/#sec-array.prototype.findindex
          $(
            { target: "Array", proto: true, forced: SKIPS_HOLES },
            {
              findIndex: function findIndex(
                callbackfn /* , that = undefined */
              ) {
                return $findIndex(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              },
            }
          );

          // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
          addToUnscopables(FIND_INDEX);

          /***/
        },

        /***/ c869: /***/ function (module, exports, __webpack_require__) {
          var getNative = __webpack_require__("0b07"),
            root = __webpack_require__("2b3e");

          /* Built-in method references that are verified to be native. */
          var Set = getNative(root, "Set");

          module.exports = Set;

          /***/
        },

        /***/ c8ba: /***/ function (module, exports) {
          var g;

          // This works in non-strict mode
          g = (function () {
            return this;
          })();

          try {
            // This works if eval is allowed (see CSP)
            g = g || new Function("return this")();
          } catch (e) {
            // This works if the window reference is available
            if (typeof window === "object") g = window;
          }

          // g can still be undefined, but nothing to do about it...
          // We return undefined, instead of nothing here, so it's
          // easier to handle this case. if(!global) { ...}

          module.exports = g;

          /***/
        },

        /***/ ca84: /***/ function (module, exports, __webpack_require__) {
          var hasOwn = __webpack_require__("1a2d");
          var toIndexedObject = __webpack_require__("fc6a");
          var indexOf = __webpack_require__("4d64").indexOf;
          var hiddenKeys = __webpack_require__("d012");

          module.exports = function (object, names) {
            var O = toIndexedObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O)
              !hasOwn(hiddenKeys, key) && hasOwn(O, key) && result.push(key);
            // Don't enum bug & hidden keys
            while (names.length > i)
              if (hasOwn(O, (key = names[i++]))) {
                ~indexOf(result, key) || result.push(key);
              }
            return result;
          };

          /***/
        },

        /***/ caad: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var $includes = __webpack_require__("4d64").includes;
          var addToUnscopables = __webpack_require__("44d2");

          // `Array.prototype.includes` method
          // https://tc39.es/ecma262/#sec-array.prototype.includes
          $(
            { target: "Array", proto: true },
            {
              includes: function includes(el /* , fromIndex = 0 */) {
                return $includes(
                  this,
                  el,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              },
            }
          );

          // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
          addToUnscopables("includes");

          /***/
        },

        /***/ cb5a: /***/ function (module, exports, __webpack_require__) {
          var eq = __webpack_require__("9638");

          /**
           * Gets the index at which the `key` is found in `array` of key-value pairs.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} key The key to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }

          module.exports = assocIndexOf;

          /***/
        },

        /***/ cc12: /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var isObject = __webpack_require__("861d");

          var document = global.document;
          // typeof document.createElement is 'object' in old IE
          var EXISTS = isObject(document) && isObject(document.createElement);

          module.exports = function (it) {
            return EXISTS ? document.createElement(it) : {};
          };

          /***/
        },

        /***/ cca6: /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var assign = __webpack_require__("60da");

          // `Object.assign` method
          // https://tc39.es/ecma262/#sec-object.assign
          // eslint-disable-next-line es/no-object-assign -- required for testing
          $(
            { target: "Object", stat: true, forced: Object.assign !== assign },
            {
              assign: assign,
            }
          );

          /***/
        },

        /***/ cd9d: /***/ function (module, exports) {
          /**
           * This method returns the first argument it receives.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {*} value Any value.
           * @returns {*} Returns `value`.
           * @example
           *
           * var object = { 'a': 1 };
           *
           * console.log(_.identity(object) === object);
           * // => true
           */
          function identity(value) {
            return value;
          }

          module.exports = identity;

          /***/
        },

        /***/ cdf9: /***/ function (module, exports, __webpack_require__) {
          var anObject = __webpack_require__("825a");
          var isObject = __webpack_require__("861d");
          var newPromiseCapability = __webpack_require__("f069");

          module.exports = function (C, x) {
            anObject(C);
            if (isObject(x) && x.constructor === C) return x;
            var promiseCapability = newPromiseCapability.f(C);
            var resolve = promiseCapability.resolve;
            resolve(x);
            return promiseCapability.promise;
          };

          /***/
        },

        /***/ ce4e: /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");

          module.exports = function (key, value) {
            try {
              // eslint-disable-next-line es/no-object-defineproperty -- safe
              Object.defineProperty(global, key, {
                value: value,
                configurable: true,
                writable: true,
              });
            } catch (error) {
              global[key] = value;
            }
            return value;
          };

          /***/
        },

        /***/ ce86: /***/ function (module, exports, __webpack_require__) {
          var Symbol = __webpack_require__("9e69"),
            arrayMap = __webpack_require__("7948"),
            isArray = __webpack_require__("6747"),
            isSymbol = __webpack_require__("ffd6");

          /** Used as references for various `Number` constants. */
          var INFINITY = 1 / 0;

          /** Used to convert symbols to primitives and strings. */
          var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined;

          /**
           * The base implementation of `_.toString` which doesn't convert nullish
           * values to empty strings.
           *
           * @private
           * @param {*} value The value to process.
           * @returns {string} Returns the string.
           */
          function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              // Recursively convert values (susceptible to call stack limits).
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
          }

          module.exports = baseToString;

          /***/
        },

        /***/ d012: /***/ function (module, exports) {
          module.exports = {};

          /***/
        },

        /***/ d02c: /***/ function (module, exports, __webpack_require__) {
          var ListCache = __webpack_require__("5e2e"),
            Map = __webpack_require__("79bc"),
            MapCache = __webpack_require__("7b83");

          /** Used as the size to enable large array optimizations. */
          var LARGE_ARRAY_SIZE = 200;

          /**
           * Sets the stack `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Stack
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the stack cache instance.
           */
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }

          module.exports = stackSet;

          /***/
        },

        /***/ d039: /***/ function (module, exports) {
          module.exports = function (exec) {
            try {
              return !!exec();
            } catch (error) {
              return true;
            }
          };

          /***/
        },

        /***/ d066: /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var isCallable = __webpack_require__("1626");

          var aFunction = function (argument) {
            return isCallable(argument) ? argument : undefined;
          };

          module.exports = function (namespace, method) {
            return arguments.length < 2
              ? aFunction(global[namespace])
              : global[namespace] && global[namespace][method];
          };

          /***/
        },

        /***/ d1e7: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $propertyIsEnumerable = {}.propertyIsEnumerable;
          // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
          var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

          // Nashorn ~ JDK8 bug
          var NASHORN_BUG =
            getOwnPropertyDescriptor &&
            !$propertyIsEnumerable.call({ 1: 2 }, 1);

          // `Object.prototype.propertyIsEnumerable` method implementation
          // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
          exports.f = NASHORN_BUG
            ? function propertyIsEnumerable(V) {
                var descriptor = getOwnPropertyDescriptor(this, V);
                return !!descriptor && descriptor.enumerable;
              }
            : $propertyIsEnumerable;

          /***/
        },

        /***/ d28b: /***/ function (module, exports, __webpack_require__) {
          var defineWellKnownSymbol = __webpack_require__("746f");

          // `Symbol.iterator` well-known symbol
          // https://tc39.es/ecma262/#sec-symbol.iterator
          defineWellKnownSymbol("iterator");

          /***/
        },

        /***/ d2bb: /***/ function (module, exports, __webpack_require__) {
          /* eslint-disable no-proto -- safe */
          var anObject = __webpack_require__("825a");
          var aPossiblePrototype = __webpack_require__("3bbe");

          // `Object.setPrototypeOf` method
          // https://tc39.es/ecma262/#sec-object.setprototypeof
          // Works with __proto__ only. Old v8 can't work with null proto objects.
          // eslint-disable-next-line es/no-object-setprototypeof -- safe
          module.exports =
            Object.setPrototypeOf ||
            ("__proto__" in {}
              ? (function () {
                  var CORRECT_SETTER = false;
                  var test = {};
                  var setter;
                  try {
                    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
                    setter = Object.getOwnPropertyDescriptor(
                      Object.prototype,
                      "__proto__"
                    ).set;
                    setter.call(test, []);
                    CORRECT_SETTER = test instanceof Array;
                  } catch (error) {
                    /* empty */
                  }
                  return function setPrototypeOf(O, proto) {
                    anObject(O);
                    aPossiblePrototype(proto);
                    if (CORRECT_SETTER) setter.call(O, proto);
                    else O.__proto__ = proto;
                    return O;
                  };
                })()
              : undefined);

          /***/
        },

        /***/ d327: /***/ function (module, exports) {
          /**
           * This method returns a new empty array.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {Array} Returns the new empty array.
           * @example
           *
           * var arrays = _.times(2, _.stubArray);
           *
           * console.log(arrays);
           * // => [[], []]
           *
           * console.log(arrays[0] === arrays[1]);
           * // => false
           */
          function stubArray() {
            return [];
          }

          module.exports = stubArray;

          /***/
        },

        /***/ d370: /***/ function (module, exports, __webpack_require__) {
          var baseIsArguments = __webpack_require__("253c"),
            isObjectLike = __webpack_require__("1310");

          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /** Built-in value references. */
          var propertyIsEnumerable = objectProto.propertyIsEnumerable;

          /**
           * Checks if `value` is likely an `arguments` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           *  else `false`.
           * @example
           *
           * _.isArguments(function() { return arguments; }());
           * // => true
           *
           * _.isArguments([1, 2, 3]);
           * // => false
           */
          var isArguments = baseIsArguments(
            (function () {
              return arguments;
            })()
          )
            ? baseIsArguments
            : function (value) {
                return (
                  isObjectLike(value) &&
                  hasOwnProperty.call(value, "callee") &&
                  !propertyIsEnumerable.call(value, "callee")
                );
              };

          module.exports = isArguments;

          /***/
        },

        /***/ d3b7: /***/ function (module, exports, __webpack_require__) {
          var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
          var redefine = __webpack_require__("6eeb");
          var toString = __webpack_require__("b041");

          // `Object.prototype.toString` method
          // https://tc39.es/ecma262/#sec-object.prototype.tostring
          if (!TO_STRING_TAG_SUPPORT) {
            redefine(Object.prototype, "toString", toString, { unsafe: true });
          }

          /***/
        },

        /***/ d44e: /***/ function (module, exports, __webpack_require__) {
          var defineProperty = __webpack_require__("9bf2").f;
          var hasOwn = __webpack_require__("1a2d");
          var wellKnownSymbol = __webpack_require__("b622");

          var TO_STRING_TAG = wellKnownSymbol("toStringTag");

          module.exports = function (it, TAG, STATIC) {
            if (
              it &&
              !hasOwn((it = STATIC ? it : it.prototype), TO_STRING_TAG)
            ) {
              defineProperty(it, TO_STRING_TAG, {
                configurable: true,
                value: TAG,
              });
            }
          };

          /***/
        },

        /***/ d4c3: /***/ function (module, exports, __webpack_require__) {
          var userAgent = __webpack_require__("342f");
          var global = __webpack_require__("da84");

          module.exports =
            /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;

          /***/
        },

        /***/ d612: /***/ function (module, exports, __webpack_require__) {
          var MapCache = __webpack_require__("7b83"),
            setCacheAdd = __webpack_require__("7ed2"),
            setCacheHas = __webpack_require__("dc0f");

          /**
           *
           * Creates an array cache object to store unique values.
           *
           * @private
           * @constructor
           * @param {Array} [values] The values to cache.
           */
          function SetCache(values) {
            var index = -1,
              length = values == null ? 0 : values.length;

            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values[index]);
            }
          }

          // Add methods to `SetCache`.
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;

          module.exports = SetCache;

          /***/
        },

        /***/ d784: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          // TODO: Remove from `core-js@4` since it's moved to entry points
          __webpack_require__("ac1f");
          var redefine = __webpack_require__("6eeb");
          var regexpExec = __webpack_require__("9263");
          var fails = __webpack_require__("d039");
          var wellKnownSymbol = __webpack_require__("b622");
          var createNonEnumerableProperty = __webpack_require__("9112");

          var SPECIES = wellKnownSymbol("species");
          var RegExpPrototype = RegExp.prototype;

          module.exports = function (KEY, exec, FORCED, SHAM) {
            var SYMBOL = wellKnownSymbol(KEY);

            var DELEGATES_TO_SYMBOL = !fails(function () {
              // String methods call symbol-named RegEp methods
              var O = {};
              O[SYMBOL] = function () {
                return 7;
              };
              return ""[KEY](O) != 7;
            });

            var DELEGATES_TO_EXEC =
              DELEGATES_TO_SYMBOL &&
              !fails(function () {
                // Symbol-named RegExp methods call .exec
                var execCalled = false;
                var re = /a/;

                if (KEY === "split") {
                  // We can't use real regex here since it causes deoptimization
                  // and serious performance degradation in V8
                  // https://github.com/zloirock/core-js/issues/306
                  re = {};
                  // RegExp[@@split] doesn't call the regex's exec method, but first creates
                  // a new one. We need to return the patched regex when creating the new one.
                  re.constructor = {};
                  re.constructor[SPECIES] = function () {
                    return re;
                  };
                  re.flags = "";
                  re[SYMBOL] = /./[SYMBOL];
                }

                re.exec = function () {
                  execCalled = true;
                  return null;
                };

                re[SYMBOL]("");
                return !execCalled;
              });

            if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
              var nativeRegExpMethod = /./[SYMBOL];
              var methods = exec(
                SYMBOL,
                ""[KEY],
                function (nativeMethod, regexp, str, arg2, forceStringMethod) {
                  var $exec = regexp.exec;
                  if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
                    if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                      // The native String method already delegates to @@method (this
                      // polyfilled function), leasing to infinite recursion.
                      // We avoid it by directly calling the native @@method method.
                      return {
                        done: true,
                        value: nativeRegExpMethod.call(regexp, str, arg2),
                      };
                    }
                    return {
                      done: true,
                      value: nativeMethod.call(str, regexp, arg2),
                    };
                  }
                  return { done: false };
                }
              );

              redefine(String.prototype, KEY, methods[0]);
              redefine(RegExpPrototype, SYMBOL, methods[1]);
            }

            if (SHAM)
              createNonEnumerableProperty(
                RegExpPrototype[SYMBOL],
                "sham",
                true
              );
          };

          /***/
        },

        /***/ d81d: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var $map = __webpack_require__("b727").map;
          var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

          var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");

          // `Array.prototype.map` method
          // https://tc39.es/ecma262/#sec-array.prototype.map
          // with adding support of @@species
          $(
            { target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT },
            {
              map: function map(callbackfn /* , thisArg */) {
                return $map(
                  this,
                  callbackfn,
                  arguments.length > 1 ? arguments[1] : undefined
                );
              },
            }
          );

          /***/
        },

        /***/ d9b5: /***/ function (module, exports, __webpack_require__) {
          var isCallable = __webpack_require__("1626");
          var getBuiltIn = __webpack_require__("d066");
          var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

          module.exports = USE_SYMBOL_AS_UID
            ? function (it) {
                return typeof it == "symbol";
              }
            : function (it) {
                var $Symbol = getBuiltIn("Symbol");
                return isCallable($Symbol) && Object(it) instanceof $Symbol;
              };

          /***/
        },

        /***/ da03: /***/ function (module, exports, __webpack_require__) {
          var root = __webpack_require__("2b3e");

          /** Used to detect overreaching core-js shims. */
          var coreJsData = root["__core-js_shared__"];

          module.exports = coreJsData;

          /***/
        },

        /***/ da84: /***/ function (module, exports, __webpack_require__) {
          /* WEBPACK VAR INJECTION */ (function (global) {
            var check = function (it) {
              return it && it.Math == Math && it;
            };

            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
            module.exports =
              // eslint-disable-next-line es/no-global-this -- safe
              check(typeof globalThis == "object" && globalThis) ||
              check(typeof window == "object" && window) ||
              // eslint-disable-next-line no-restricted-globals -- safe
              check(typeof self == "object" && self) ||
              check(typeof global == "object" && global) ||
              // eslint-disable-next-line no-new-func -- fallback
              (function () {
                return this;
              })() ||
              Function("return this")();

            /* WEBPACK VAR INJECTION */
          }.call(this, __webpack_require__("c8ba")));

          /***/
        },

        /***/ dbb4: /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var DESCRIPTORS = __webpack_require__("83ab");
          var ownKeys = __webpack_require__("56ef");
          var toIndexedObject = __webpack_require__("fc6a");
          var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
          var createProperty = __webpack_require__("8418");

          // `Object.getOwnPropertyDescriptors` method
          // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
          $(
            { target: "Object", stat: true, sham: !DESCRIPTORS },
            {
              getOwnPropertyDescriptors: function getOwnPropertyDescriptors(
                object
              ) {
                var O = toIndexedObject(object);
                var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
                var keys = ownKeys(O);
                var result = {};
                var index = 0;
                var key, descriptor;
                while (keys.length > index) {
                  descriptor = getOwnPropertyDescriptor(
                    O,
                    (key = keys[index++])
                  );
                  if (descriptor !== undefined)
                    createProperty(result, key, descriptor);
                }
                return result;
              },
            }
          );

          /***/
        },

        /***/ dc0f: /***/ function (module, exports) {
          /**
           * Checks if `value` is in the array cache.
           *
           * @private
           * @name has
           * @memberOf SetCache
           * @param {*} value The value to search for.
           * @returns {number} Returns `true` if `value` is found, else `false`.
           */
          function setCacheHas(value) {
            return this.__data__.has(value);
          }

          module.exports = setCacheHas;

          /***/
        },

        /***/ dc4a: /***/ function (module, exports, __webpack_require__) {
          var aCallable = __webpack_require__("59ed");

          // `GetMethod` abstract operation
          // https://tc39.es/ecma262/#sec-getmethod
          module.exports = function (V, P) {
            var func = V[P];
            return func == null ? undefined : aCallable(func);
          };

          /***/
        },

        /***/ dc57: /***/ function (module, exports) {
          /** Used for built-in method references. */
          var funcProto = Function.prototype;

          /** Used to resolve the decompiled source of functions. */
          var funcToString = funcProto.toString;

          /**
           * Converts `func` to its source code.
           *
           * @private
           * @param {Function} func The function to convert.
           * @returns {string} Returns the source code.
           */
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {}
              try {
                return func + "";
              } catch (e) {}
            }
            return "";
          }

          module.exports = toSource;

          /***/
        },

        /***/ ddb0: /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");
          var DOMIterables = __webpack_require__("fdbc");
          var DOMTokenListPrototype = __webpack_require__("785a");
          var ArrayIteratorMethods = __webpack_require__("e260");
          var createNonEnumerableProperty = __webpack_require__("9112");
          var wellKnownSymbol = __webpack_require__("b622");

          var ITERATOR = wellKnownSymbol("iterator");
          var TO_STRING_TAG = wellKnownSymbol("toStringTag");
          var ArrayValues = ArrayIteratorMethods.values;

          var handlePrototype = function (
            CollectionPrototype,
            COLLECTION_NAME
          ) {
            if (CollectionPrototype) {
              // some Chrome versions have non-configurable methods on DOMTokenList
              if (CollectionPrototype[ITERATOR] !== ArrayValues)
                try {
                  createNonEnumerableProperty(
                    CollectionPrototype,
                    ITERATOR,
                    ArrayValues
                  );
                } catch (error) {
                  CollectionPrototype[ITERATOR] = ArrayValues;
                }
              if (!CollectionPrototype[TO_STRING_TAG]) {
                createNonEnumerableProperty(
                  CollectionPrototype,
                  TO_STRING_TAG,
                  COLLECTION_NAME
                );
              }
              if (DOMIterables[COLLECTION_NAME])
                for (var METHOD_NAME in ArrayIteratorMethods) {
                  // some Chrome versions have non-configurable methods on DOMTokenList
                  if (
                    CollectionPrototype[METHOD_NAME] !==
                    ArrayIteratorMethods[METHOD_NAME]
                  )
                    try {
                      createNonEnumerableProperty(
                        CollectionPrototype,
                        METHOD_NAME,
                        ArrayIteratorMethods[METHOD_NAME]
                      );
                    } catch (error) {
                      CollectionPrototype[METHOD_NAME] =
                        ArrayIteratorMethods[METHOD_NAME];
                    }
                }
            }
          };

          for (var COLLECTION_NAME in DOMIterables) {
            handlePrototype(
              global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype,
              COLLECTION_NAME
            );
          }

          handlePrototype(DOMTokenListPrototype, "DOMTokenList");

          /***/
        },

        /***/ df75: /***/ function (module, exports, __webpack_require__) {
          var internalObjectKeys = __webpack_require__("ca84");
          var enumBugKeys = __webpack_require__("7839");

          // `Object.keys` method
          // https://tc39.es/ecma262/#sec-object.keys
          // eslint-disable-next-line es/no-object-keys -- safe
          module.exports =
            Object.keys ||
            function keys(O) {
              return internalObjectKeys(O, enumBugKeys);
            };

          /***/
        },

        /***/ e01a: /***/ function (module, exports, __webpack_require__) {
          "use strict";
          // `Symbol.prototype.description` getter
          // https://tc39.es/ecma262/#sec-symbol.prototype.description

          var $ = __webpack_require__("23e7");
          var DESCRIPTORS = __webpack_require__("83ab");
          var global = __webpack_require__("da84");
          var hasOwn = __webpack_require__("1a2d");
          var isCallable = __webpack_require__("1626");
          var isObject = __webpack_require__("861d");
          var defineProperty = __webpack_require__("9bf2").f;
          var copyConstructorProperties = __webpack_require__("e893");

          var NativeSymbol = global.Symbol;

          if (
            DESCRIPTORS &&
            isCallable(NativeSymbol) &&
            (!("description" in NativeSymbol.prototype) ||
              // Safari 12 bug
              NativeSymbol().description !== undefined)
          ) {
            var EmptyStringDescriptionStore = {};
            // wrap Symbol constructor for correct work with undefined description
            var SymbolWrapper = function Symbol() {
              var description =
                arguments.length < 1 || arguments[0] === undefined
                  ? undefined
                  : String(arguments[0]);
              var result =
                this instanceof SymbolWrapper
                  ? new NativeSymbol(description)
                  : // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
                  description === undefined
                  ? NativeSymbol()
                  : NativeSymbol(description);
              if (description === "")
                EmptyStringDescriptionStore[result] = true;
              return result;
            };
            copyConstructorProperties(SymbolWrapper, NativeSymbol);
            var symbolPrototype = (SymbolWrapper.prototype =
              NativeSymbol.prototype);
            symbolPrototype.constructor = SymbolWrapper;

            var symbolToString = symbolPrototype.toString;
            var nativeSymbol = String(NativeSymbol("test")) == "Symbol(test)";
            var regexp = /^Symbol\((.*)\)[^)]+$/;
            defineProperty(symbolPrototype, "description", {
              configurable: true,
              get: function description() {
                var symbol = isObject(this) ? this.valueOf() : this;
                var string = symbolToString.call(symbol);
                if (hasOwn(EmptyStringDescriptionStore, symbol)) return "";
                var desc = nativeSymbol
                  ? string.slice(7, -1)
                  : string.replace(regexp, "$1");
                return desc === "" ? undefined : desc;
              },
            });

            $(
              { global: true, forced: true },
              {
                Symbol: SymbolWrapper,
              }
            );
          }

          /***/
        },

        /***/ e163: /***/ function (module, exports, __webpack_require__) {
          var hasOwn = __webpack_require__("1a2d");
          var isCallable = __webpack_require__("1626");
          var toObject = __webpack_require__("7b0b");
          var sharedKey = __webpack_require__("f772");
          var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

          var IE_PROTO = sharedKey("IE_PROTO");
          var ObjectPrototype = Object.prototype;

          // `Object.getPrototypeOf` method
          // https://tc39.es/ecma262/#sec-object.getprototypeof
          // eslint-disable-next-line es/no-object-getprototypeof -- safe
          module.exports = CORRECT_PROTOTYPE_GETTER
            ? Object.getPrototypeOf
            : function (O) {
                var object = toObject(O);
                if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
                var constructor = object.constructor;
                if (isCallable(constructor) && object instanceof constructor) {
                  return constructor.prototype;
                }
                return object instanceof Object ? ObjectPrototype : null;
              };

          /***/
        },

        /***/ e177: /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");

          module.exports = !fails(function () {
            function F() {
              /* empty */
            }
            F.prototype.constructor = null;
            // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
            return Object.getPrototypeOf(new F()) !== F.prototype;
          });

          /***/
        },

        /***/ e24b: /***/ function (module, exports, __webpack_require__) {
          var hashClear = __webpack_require__("49f4"),
            hashDelete = __webpack_require__("1efc"),
            hashGet = __webpack_require__("bbc0"),
            hashHas = __webpack_require__("7a48"),
            hashSet = __webpack_require__("2524");

          /**
           * Creates a hash object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Hash(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          // Add methods to `Hash`.
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;

          module.exports = Hash;

          /***/
        },

        /***/ e260: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var toIndexedObject = __webpack_require__("fc6a");
          var addToUnscopables = __webpack_require__("44d2");
          var Iterators = __webpack_require__("3f8c");
          var InternalStateModule = __webpack_require__("69f3");
          var defineIterator = __webpack_require__("7dd0");

          var ARRAY_ITERATOR = "Array Iterator";
          var setInternalState = InternalStateModule.set;
          var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

          // `Array.prototype.entries` method
          // https://tc39.es/ecma262/#sec-array.prototype.entries
          // `Array.prototype.keys` method
          // https://tc39.es/ecma262/#sec-array.prototype.keys
          // `Array.prototype.values` method
          // https://tc39.es/ecma262/#sec-array.prototype.values
          // `Array.prototype[@@iterator]` method
          // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
          // `CreateArrayIterator` internal method
          // https://tc39.es/ecma262/#sec-createarrayiterator
          module.exports = defineIterator(
            Array,
            "Array",
            function (iterated, kind) {
              setInternalState(this, {
                type: ARRAY_ITERATOR,
                target: toIndexedObject(iterated), // target
                index: 0, // next index
                kind: kind, // kind
              });
              // `%ArrayIteratorPrototype%.next` method
              // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
            },
            function () {
              var state = getInternalState(this);
              var target = state.target;
              var kind = state.kind;
              var index = state.index++;
              if (!target || index >= target.length) {
                state.target = undefined;
                return { value: undefined, done: true };
              }
              if (kind == "keys") return { value: index, done: false };
              if (kind == "values")
                return { value: target[index], done: false };
              return { value: [index, target[index]], done: false };
            },
            "values"
          );

          // argumentsList[@@iterator] is %ArrayProto_values%
          // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
          // https://tc39.es/ecma262/#sec-createmappedargumentsobject
          Iterators.Arguments = Iterators.Array;

          // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
          addToUnscopables("keys");
          addToUnscopables("values");
          addToUnscopables("entries");

          /***/
        },

        /***/ e2c0: /***/ function (module, exports, __webpack_require__) {
          var castPath = __webpack_require__("e2e4"),
            isArguments = __webpack_require__("d370"),
            isArray = __webpack_require__("6747"),
            isIndex = __webpack_require__("c098"),
            isLength = __webpack_require__("b218"),
            toKey = __webpack_require__("f4d6");

          /**
           * Checks if `path` exists on `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @param {Function} hasFunc The function to check properties.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           */
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);

            var index = -1,
              length = path.length,
              result = false;

            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result || ++index != length) {
              return result;
            }
            length = object == null ? 0 : object.length;
            return (
              !!length &&
              isLength(length) &&
              isIndex(key, length) &&
              (isArray(object) || isArguments(object))
            );
          }

          module.exports = hasPath;

          /***/
        },

        /***/ e2cc: /***/ function (module, exports, __webpack_require__) {
          var redefine = __webpack_require__("6eeb");

          module.exports = function (target, src, options) {
            for (var key in src) redefine(target, key, src[key], options);
            return target;
          };

          /***/
        },

        /***/ e2e4: /***/ function (module, exports, __webpack_require__) {
          var isArray = __webpack_require__("6747"),
            isKey = __webpack_require__("f608"),
            stringToPath = __webpack_require__("18d8"),
            toString = __webpack_require__("76dd");

          /**
           * Casts `value` to a path array if it's not one.
           *
           * @private
           * @param {*} value The value to inspect.
           * @param {Object} [object] The object to query keys on.
           * @returns {Array} Returns the cast property path array.
           */
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object)
              ? [value]
              : stringToPath(toString(value));
          }

          module.exports = castPath;

          /***/
        },

        /***/ e380: /***/ function (module, exports, __webpack_require__) {
          var MapCache = __webpack_require__("7b83");

          /** Error message constants. */
          var FUNC_ERROR_TEXT = "Expected a function";

          /**
           * Creates a function that memoizes the result of `func`. If `resolver` is
           * provided, it determines the cache key for storing the result based on the
           * arguments provided to the memoized function. By default, the first argument
           * provided to the memoized function is used as the map cache key. The `func`
           * is invoked with the `this` binding of the memoized function.
           *
           * **Note:** The cache is exposed as the `cache` property on the memoized
           * function. Its creation may be customized by replacing the `_.memoize.Cache`
           * constructor with one whose instances implement the
           * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
           * method interface of `clear`, `delete`, `get`, `has`, and `set`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to have its output memoized.
           * @param {Function} [resolver] The function to resolve the cache key.
           * @returns {Function} Returns the new memoized function.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           * var other = { 'c': 3, 'd': 4 };
           *
           * var values = _.memoize(_.values);
           * values(object);
           * // => [1, 2]
           *
           * values(other);
           * // => [3, 4]
           *
           * object.a = 2;
           * values(object);
           * // => [1, 2]
           *
           * // Modify the result cache.
           * values.cache.set(object, ['a', 'b']);
           * values(object);
           * // => ['a', 'b']
           *
           * // Replace `_.memoize.Cache`.
           * _.memoize.Cache = WeakMap;
           */
          function memoize(func, resolver) {
            if (
              typeof func != "function" ||
              (resolver != null && typeof resolver != "function")
            ) {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function () {
              var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;

              if (cache.has(key)) {
                return cache.get(key);
              }
              var result = func.apply(this, args);
              memoized.cache = cache.set(key, result) || cache;
              return result;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }

          // Expose `MapCache`.
          memoize.Cache = MapCache;

          module.exports = memoize;

          /***/
        },

        /***/ e3f8: /***/ function (module, exports, __webpack_require__) {
          var baseGet = __webpack_require__("656b");

          /**
           * A specialized version of `baseProperty` which supports deep paths.
           *
           * @private
           * @param {Array|string} path The path of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function basePropertyDeep(path) {
            return function (object) {
              return baseGet(object, path);
            };
          }

          module.exports = basePropertyDeep;

          /***/
        },

        /***/ e439: /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var fails = __webpack_require__("d039");
          var toIndexedObject = __webpack_require__("fc6a");
          var nativeGetOwnPropertyDescriptor = __webpack_require__("06cf").f;
          var DESCRIPTORS = __webpack_require__("83ab");

          var FAILS_ON_PRIMITIVES = fails(function () {
            nativeGetOwnPropertyDescriptor(1);
          });
          var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

          // `Object.getOwnPropertyDescriptor` method
          // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
          $(
            {
              target: "Object",
              stat: true,
              forced: FORCED,
              sham: !DESCRIPTORS,
            },
            {
              getOwnPropertyDescriptor: function getOwnPropertyDescriptor(
                it,
                key
              ) {
                return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
              },
            }
          );

          /***/
        },

        /***/ e538: /***/ function (module, exports, __webpack_require__) {
          var wellKnownSymbol = __webpack_require__("b622");

          exports.f = wellKnownSymbol;

          /***/
        },

        /***/ e667: /***/ function (module, exports) {
          module.exports = function (exec) {
            try {
              return { error: false, value: exec() };
            } catch (error) {
              return { error: true, value: error };
            }
          };

          /***/
        },

        /***/ e6cf: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var IS_PURE = __webpack_require__("c430");
          var global = __webpack_require__("da84");
          var getBuiltIn = __webpack_require__("d066");
          var NativePromise = __webpack_require__("fea9");
          var redefine = __webpack_require__("6eeb");
          var redefineAll = __webpack_require__("e2cc");
          var setPrototypeOf = __webpack_require__("d2bb");
          var setToStringTag = __webpack_require__("d44e");
          var setSpecies = __webpack_require__("2626");
          var aCallable = __webpack_require__("59ed");
          var isCallable = __webpack_require__("1626");
          var isObject = __webpack_require__("861d");
          var anInstance = __webpack_require__("19aa");
          var inspectSource = __webpack_require__("8925");
          var iterate = __webpack_require__("2266");
          var checkCorrectnessOfIteration = __webpack_require__("1c7e");
          var speciesConstructor = __webpack_require__("4840");
          var task = __webpack_require__("2cf4").set;
          var microtask = __webpack_require__("b575");
          var promiseResolve = __webpack_require__("cdf9");
          var hostReportErrors = __webpack_require__("44de");
          var newPromiseCapabilityModule = __webpack_require__("f069");
          var perform = __webpack_require__("e667");
          var InternalStateModule = __webpack_require__("69f3");
          var isForced = __webpack_require__("94ca");
          var wellKnownSymbol = __webpack_require__("b622");
          var IS_BROWSER = __webpack_require__("6069");
          var IS_NODE = __webpack_require__("605d");
          var V8_VERSION = __webpack_require__("2d00");

          var SPECIES = wellKnownSymbol("species");
          var PROMISE = "Promise";
          var getInternalState = InternalStateModule.get;
          var setInternalState = InternalStateModule.set;
          var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
          var NativePromisePrototype = NativePromise && NativePromise.prototype;
          var PromiseConstructor = NativePromise;
          var PromiseConstructorPrototype = NativePromisePrototype;
          var TypeError = global.TypeError;
          var document = global.document;
          var process = global.process;
          var newPromiseCapability = newPromiseCapabilityModule.f;
          var newGenericPromiseCapability = newPromiseCapability;
          var DISPATCH_EVENT = !!(
            document &&
            document.createEvent &&
            global.dispatchEvent
          );
          var NATIVE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);
          var UNHANDLED_REJECTION = "unhandledrejection";
          var REJECTION_HANDLED = "rejectionhandled";
          var PENDING = 0;
          var FULFILLED = 1;
          var REJECTED = 2;
          var HANDLED = 1;
          var UNHANDLED = 2;
          var SUBCLASSING = false;
          var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

          var FORCED = isForced(PROMISE, function () {
            var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
            var GLOBAL_CORE_JS_PROMISE =
              PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
            // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
            // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
            // We can't detect it synchronously, so just check versions
            if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
            // We need Promise#finally in the pure version for preventing prototype pollution
            if (IS_PURE && !PromiseConstructorPrototype["finally"]) return true;
            // We can't use @@species feature detection in V8 since it causes
            // deoptimization and performance degradation
            // https://github.com/zloirock/core-js/issues/679
            if (
              V8_VERSION >= 51 &&
              /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)
            )
              return false;
            // Detect correctness of subclassing with @@species support
            var promise = new PromiseConstructor(function (resolve) {
              resolve(1);
            });
            var FakePromise = function (exec) {
              exec(
                function () {
                  /* empty */
                },
                function () {
                  /* empty */
                }
              );
            };
            var constructor = (promise.constructor = {});
            constructor[SPECIES] = FakePromise;
            SUBCLASSING =
              promise.then(function () {
                /* empty */
              }) instanceof FakePromise;
            if (!SUBCLASSING) return true;
            // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
            return (
              !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT
            );
          });

          var INCORRECT_ITERATION =
            FORCED ||
            !checkCorrectnessOfIteration(function (iterable) {
              PromiseConstructor.all(iterable)["catch"](function () {
                /* empty */
              });
            });

          // helpers
          var isThenable = function (it) {
            var then;
            return isObject(it) && isCallable((then = it.then)) ? then : false;
          };

          var notify = function (state, isReject) {
            if (state.notified) return;
            state.notified = true;
            var chain = state.reactions;
            microtask(function () {
              var value = state.value;
              var ok = state.state == FULFILLED;
              var index = 0;
              // variable length - can't use forEach
              while (chain.length > index) {
                var reaction = chain[index++];
                var handler = ok ? reaction.ok : reaction.fail;
                var resolve = reaction.resolve;
                var reject = reaction.reject;
                var domain = reaction.domain;
                var result, then, exited;
                try {
                  if (handler) {
                    if (!ok) {
                      if (state.rejection === UNHANDLED)
                        onHandleUnhandled(state);
                      state.rejection = HANDLED;
                    }
                    if (handler === true) result = value;
                    else {
                      if (domain) domain.enter();
                      result = handler(value); // can throw
                      if (domain) {
                        domain.exit();
                        exited = true;
                      }
                    }
                    if (result === reaction.promise) {
                      reject(TypeError("Promise-chain cycle"));
                    } else if ((then = isThenable(result))) {
                      then.call(result, resolve, reject);
                    } else resolve(result);
                  } else reject(value);
                } catch (error) {
                  if (domain && !exited) domain.exit();
                  reject(error);
                }
              }
              state.reactions = [];
              state.notified = false;
              if (isReject && !state.rejection) onUnhandled(state);
            });
          };

          var dispatchEvent = function (name, promise, reason) {
            var event, handler;
            if (DISPATCH_EVENT) {
              event = document.createEvent("Event");
              event.promise = promise;
              event.reason = reason;
              event.initEvent(name, false, true);
              global.dispatchEvent(event);
            } else event = { promise: promise, reason: reason };
            if (!NATIVE_REJECTION_EVENT && (handler = global["on" + name]))
              handler(event);
            else if (name === UNHANDLED_REJECTION)
              hostReportErrors("Unhandled promise rejection", reason);
          };

          var onUnhandled = function (state) {
            task.call(global, function () {
              var promise = state.facade;
              var value = state.value;
              var IS_UNHANDLED = isUnhandled(state);
              var result;
              if (IS_UNHANDLED) {
                result = perform(function () {
                  if (IS_NODE) {
                    process.emit("unhandledRejection", value, promise);
                  } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
                });
                // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                state.rejection =
                  IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
                if (result.error) throw result.value;
              }
            });
          };

          var isUnhandled = function (state) {
            return state.rejection !== HANDLED && !state.parent;
          };

          var onHandleUnhandled = function (state) {
            task.call(global, function () {
              var promise = state.facade;
              if (IS_NODE) {
                process.emit("rejectionHandled", promise);
              } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
            });
          };

          var bind = function (fn, state, unwrap) {
            return function (value) {
              fn(state, value, unwrap);
            };
          };

          var internalReject = function (state, value, unwrap) {
            if (state.done) return;
            state.done = true;
            if (unwrap) state = unwrap;
            state.value = value;
            state.state = REJECTED;
            notify(state, true);
          };

          var internalResolve = function (state, value, unwrap) {
            if (state.done) return;
            state.done = true;
            if (unwrap) state = unwrap;
            try {
              if (state.facade === value)
                throw TypeError("Promise can't be resolved itself");
              var then = isThenable(value);
              if (then) {
                microtask(function () {
                  var wrapper = { done: false };
                  try {
                    then.call(
                      value,
                      bind(internalResolve, wrapper, state),
                      bind(internalReject, wrapper, state)
                    );
                  } catch (error) {
                    internalReject(wrapper, error, state);
                  }
                });
              } else {
                state.value = value;
                state.state = FULFILLED;
                notify(state, false);
              }
            } catch (error) {
              internalReject({ done: false }, error, state);
            }
          };

          // constructor polyfill
          if (FORCED) {
            // 25.4.3.1 Promise(executor)
            PromiseConstructor = function Promise(executor) {
              anInstance(this, PromiseConstructor, PROMISE);
              aCallable(executor);
              Internal.call(this);
              var state = getInternalState(this);
              try {
                executor(
                  bind(internalResolve, state),
                  bind(internalReject, state)
                );
              } catch (error) {
                internalReject(state, error);
              }
            };
            PromiseConstructorPrototype = PromiseConstructor.prototype;
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            Internal = function Promise(executor) {
              setInternalState(this, {
                type: PROMISE,
                done: false,
                notified: false,
                parent: false,
                reactions: [],
                rejection: false,
                state: PENDING,
                value: undefined,
              });
            };
            Internal.prototype = redefineAll(PromiseConstructorPrototype, {
              // `Promise.prototype.then` method
              // https://tc39.es/ecma262/#sec-promise.prototype.then
              then: function then(onFulfilled, onRejected) {
                var state = getInternalPromiseState(this);
                var reaction = newPromiseCapability(
                  speciesConstructor(this, PromiseConstructor)
                );
                reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
                reaction.fail = isCallable(onRejected) && onRejected;
                reaction.domain = IS_NODE ? process.domain : undefined;
                state.parent = true;
                state.reactions.push(reaction);
                if (state.state != PENDING) notify(state, false);
                return reaction.promise;
              },
              // `Promise.prototype.catch` method
              // https://tc39.es/ecma262/#sec-promise.prototype.catch
              catch: function (onRejected) {
                return this.then(undefined, onRejected);
              },
            });
            OwnPromiseCapability = function () {
              var promise = new Internal();
              var state = getInternalState(promise);
              this.promise = promise;
              this.resolve = bind(internalResolve, state);
              this.reject = bind(internalReject, state);
            };
            newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
              return C === PromiseConstructor || C === PromiseWrapper
                ? new OwnPromiseCapability(C)
                : newGenericPromiseCapability(C);
            };

            if (
              !IS_PURE &&
              isCallable(NativePromise) &&
              NativePromisePrototype !== Object.prototype
            ) {
              nativeThen = NativePromisePrototype.then;

              if (!SUBCLASSING) {
                // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
                redefine(
                  NativePromisePrototype,
                  "then",
                  function then(onFulfilled, onRejected) {
                    var that = this;
                    return new PromiseConstructor(function (resolve, reject) {
                      nativeThen.call(that, resolve, reject);
                    }).then(onFulfilled, onRejected);
                    // https://github.com/zloirock/core-js/issues/640
                  },
                  { unsafe: true }
                );

                // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
                redefine(
                  NativePromisePrototype,
                  "catch",
                  PromiseConstructorPrototype["catch"],
                  { unsafe: true }
                );
              }

              // make `.constructor === Promise` work for native promise-based APIs
              try {
                delete NativePromisePrototype.constructor;
              } catch (error) {
                /* empty */
              }

              // make `instanceof Promise` work for native promise-based APIs
              if (setPrototypeOf) {
                setPrototypeOf(
                  NativePromisePrototype,
                  PromiseConstructorPrototype
                );
              }
            }
          }

          $(
            { global: true, wrap: true, forced: FORCED },
            {
              Promise: PromiseConstructor,
            }
          );

          setToStringTag(PromiseConstructor, PROMISE, false, true);
          setSpecies(PROMISE);

          PromiseWrapper = getBuiltIn(PROMISE);

          // statics
          $(
            { target: PROMISE, stat: true, forced: FORCED },
            {
              // `Promise.reject` method
              // https://tc39.es/ecma262/#sec-promise.reject
              reject: function reject(r) {
                var capability = newPromiseCapability(this);
                capability.reject.call(undefined, r);
                return capability.promise;
              },
            }
          );

          $(
            { target: PROMISE, stat: true, forced: IS_PURE || FORCED },
            {
              // `Promise.resolve` method
              // https://tc39.es/ecma262/#sec-promise.resolve
              resolve: function resolve(x) {
                return promiseResolve(
                  IS_PURE && this === PromiseWrapper
                    ? PromiseConstructor
                    : this,
                  x
                );
              },
            }
          );

          $(
            { target: PROMISE, stat: true, forced: INCORRECT_ITERATION },
            {
              // `Promise.all` method
              // https://tc39.es/ecma262/#sec-promise.all
              all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function () {
                  var $promiseResolve = aCallable(C.resolve);
                  var values = [];
                  var counter = 0;
                  var remaining = 1;
                  iterate(iterable, function (promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    values.push(undefined);
                    remaining++;
                    $promiseResolve.call(C, promise).then(function (value) {
                      if (alreadyCalled) return;
                      alreadyCalled = true;
                      values[index] = value;
                      --remaining || resolve(values);
                    }, reject);
                  });
                  --remaining || resolve(values);
                });
                if (result.error) reject(result.value);
                return capability.promise;
              },
              // `Promise.race` method
              // https://tc39.es/ecma262/#sec-promise.race
              race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function () {
                  var $promiseResolve = aCallable(C.resolve);
                  iterate(iterable, function (promise) {
                    $promiseResolve
                      .call(C, promise)
                      .then(capability.resolve, reject);
                  });
                });
                if (result.error) reject(result.value);
                return capability.promise;
              },
            }
          );

          /***/
        },

        /***/ e811: /***/ function (module, exports, __webpack_require__) {
          (function (global, factory) {
            true ? factory(exports, __webpack_require__("55b9")) : undefined;
          })(this, function (exports, chalk) {
            "use strict";

            chalk =
              chalk && chalk.hasOwnProperty("default")
                ? chalk["default"]
                : chalk;

            var _typeof =
              typeof Symbol === "function" &&
              typeof Symbol.iterator === "symbol"
                ? function (obj) {
                    return typeof obj;
                  }
                : function (obj) {
                    return obj &&
                      typeof Symbol === "function" &&
                      obj.constructor === Symbol &&
                      obj !== Symbol.prototype
                      ? "symbol"
                      : typeof obj;
                  };

            var classCallCheck = function (instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            };

            var createClass = (function () {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            })();

            var get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);

              if (desc === undefined) {
                var parent = Object.getPrototypeOf(object);

                if (parent === null) {
                  return undefined;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;

                if (getter === undefined) {
                  return undefined;
                }

                return getter.call(receiver);
              }
            };

            var inherits = function (subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError(
                  "Super expression must either be null or a function, not " +
                    typeof superClass
                );
              }

              subClass.prototype = Object.create(
                superClass && superClass.prototype,
                {
                  constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true,
                  },
                }
              );
              if (superClass)
                Object.setPrototypeOf
                  ? Object.setPrototypeOf(subClass, superClass)
                  : (subClass.__proto__ = superClass);
            };

            var possibleConstructorReturn = function (self, call) {
              if (!self) {
                throw new ReferenceError(
                  "this hasn't been initialised - super() hasn't been called"
                );
              }

              return call &&
                (typeof call === "object" || typeof call === "function")
                ? call
                : self;
            };

            var slicedToArray = (function () {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;

                try {
                  for (
                    var _i = arr[Symbol.iterator](), _s;
                    !(_n = (_s = _i.next()).done);
                    _n = true
                  ) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }

                return _arr;
              }

              return function (arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError(
                    "Invalid attempt to destructure non-iterable instance"
                  );
                }
              };
            })();

            var toConsumableArray = function (arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
                  arr2[i] = arr[i];

                return arr2;
              } else {
                return Array.from(arr);
              }
            };

            var Processor = (function () {
              function Processor(options) {
                classCallCheck(this, Processor);

                this.selfOptions = options || {};
                this.pipes = {};
              }

              createClass(Processor, [
                {
                  key: "options",
                  value: function options(_options) {
                    if (_options) {
                      this.selfOptions = _options;
                    }
                    return this.selfOptions;
                  },
                },
                {
                  key: "pipe",
                  value: function pipe(name, pipeArg) {
                    var pipe = pipeArg;
                    if (typeof name === "string") {
                      if (typeof pipe === "undefined") {
                        return this.pipes[name];
                      } else {
                        this.pipes[name] = pipe;
                      }
                    }
                    if (name && name.name) {
                      pipe = name;
                      if (pipe.processor === this) {
                        return pipe;
                      }
                      this.pipes[pipe.name] = pipe;
                    }
                    pipe.processor = this;
                    return pipe;
                  },
                },
                {
                  key: "process",
                  value: function process(input, pipe) {
                    var context = input;
                    context.options = this.options();
                    var nextPipe = pipe || input.pipe || "default";
                    var lastPipe = void 0;
                    var lastContext = void 0;
                    while (nextPipe) {
                      if (typeof context.nextAfterChildren !== "undefined") {
                        // children processed and coming back to parent
                        context.next = context.nextAfterChildren;
                        context.nextAfterChildren = null;
                      }

                      if (typeof nextPipe === "string") {
                        nextPipe = this.pipe(nextPipe);
                      }
                      nextPipe.process(context);
                      lastContext = context;
                      lastPipe = nextPipe;
                      nextPipe = null;
                      if (context) {
                        if (context.next) {
                          context = context.next;
                          nextPipe =
                            lastContext.nextPipe || context.pipe || lastPipe;
                        }
                      }
                    }
                    return context.hasResult ? context.result : undefined;
                  },
                },
              ]);
              return Processor;
            })();

            var Pipe = (function () {
              function Pipe(name) {
                classCallCheck(this, Pipe);

                this.name = name;
                this.filters = [];
              }

              createClass(Pipe, [
                {
                  key: "process",
                  value: function process(input) {
                    if (!this.processor) {
                      throw new Error(
                        "add this pipe to a processor before using it"
                      );
                    }
                    var debug = this.debug;
                    var length = this.filters.length;
                    var context = input;
                    for (var index = 0; index < length; index++) {
                      var filter = this.filters[index];
                      if (debug) {
                        this.log("filter: " + filter.filterName);
                      }
                      filter(context);
                      if (
                        (typeof context === "undefined"
                          ? "undefined"
                          : _typeof(context)) === "object" &&
                        context.exiting
                      ) {
                        context.exiting = false;
                        break;
                      }
                    }
                    if (!context.next && this.resultCheck) {
                      this.resultCheck(context);
                    }
                  },
                },
                {
                  key: "log",
                  value: function log(msg) {
                    console.log(
                      "[jsondiffpatch] " + this.name + " pipe, " + msg
                    );
                  },
                },
                {
                  key: "append",
                  value: function append() {
                    var _filters;

                    (_filters = this.filters).push.apply(_filters, arguments);
                    return this;
                  },
                },
                {
                  key: "prepend",
                  value: function prepend() {
                    var _filters2;

                    (_filters2 = this.filters).unshift.apply(
                      _filters2,
                      arguments
                    );
                    return this;
                  },
                },
                {
                  key: "indexOf",
                  value: function indexOf(filterName) {
                    if (!filterName) {
                      throw new Error("a filter name is required");
                    }
                    for (var index = 0; index < this.filters.length; index++) {
                      var filter = this.filters[index];
                      if (filter.filterName === filterName) {
                        return index;
                      }
                    }
                    throw new Error("filter not found: " + filterName);
                  },
                },
                {
                  key: "list",
                  value: function list() {
                    return this.filters.map(function (f) {
                      return f.filterName;
                    });
                  },
                },
                {
                  key: "after",
                  value: function after(filterName) {
                    var index = this.indexOf(filterName);
                    var params = Array.prototype.slice.call(arguments, 1);
                    if (!params.length) {
                      throw new Error("a filter is required");
                    }
                    params.unshift(index + 1, 0);
                    Array.prototype.splice.apply(this.filters, params);
                    return this;
                  },
                },
                {
                  key: "before",
                  value: function before(filterName) {
                    var index = this.indexOf(filterName);
                    var params = Array.prototype.slice.call(arguments, 1);
                    if (!params.length) {
                      throw new Error("a filter is required");
                    }
                    params.unshift(index, 0);
                    Array.prototype.splice.apply(this.filters, params);
                    return this;
                  },
                },
                {
                  key: "replace",
                  value: function replace(filterName) {
                    var index = this.indexOf(filterName);
                    var params = Array.prototype.slice.call(arguments, 1);
                    if (!params.length) {
                      throw new Error("a filter is required");
                    }
                    params.unshift(index, 1);
                    Array.prototype.splice.apply(this.filters, params);
                    return this;
                  },
                },
                {
                  key: "remove",
                  value: function remove(filterName) {
                    var index = this.indexOf(filterName);
                    this.filters.splice(index, 1);
                    return this;
                  },
                },
                {
                  key: "clear",
                  value: function clear() {
                    this.filters.length = 0;
                    return this;
                  },
                },
                {
                  key: "shouldHaveResult",
                  value: function shouldHaveResult(should) {
                    if (should === false) {
                      this.resultCheck = null;
                      return;
                    }
                    if (this.resultCheck) {
                      return;
                    }
                    var pipe = this;
                    this.resultCheck = function (context) {
                      if (!context.hasResult) {
                        console.log(context);
                        var error = new Error(pipe.name + " failed");
                        error.noResult = true;
                        throw error;
                      }
                    };
                    return this;
                  },
                },
              ]);
              return Pipe;
            })();

            var Context = (function () {
              function Context() {
                classCallCheck(this, Context);
              }

              createClass(Context, [
                {
                  key: "setResult",
                  value: function setResult(result) {
                    this.result = result;
                    this.hasResult = true;
                    return this;
                  },
                },
                {
                  key: "exit",
                  value: function exit() {
                    this.exiting = true;
                    return this;
                  },
                },
                {
                  key: "switchTo",
                  value: function switchTo(next, pipe) {
                    if (typeof next === "string" || next instanceof Pipe) {
                      this.nextPipe = next;
                    } else {
                      this.next = next;
                      if (pipe) {
                        this.nextPipe = pipe;
                      }
                    }
                    return this;
                  },
                },
                {
                  key: "push",
                  value: function push(child, name) {
                    child.parent = this;
                    if (typeof name !== "undefined") {
                      child.childName = name;
                    }
                    child.root = this.root || this;
                    child.options = child.options || this.options;
                    if (!this.children) {
                      this.children = [child];
                      this.nextAfterChildren = this.next || null;
                      this.next = child;
                    } else {
                      this.children[this.children.length - 1].next = child;
                      this.children.push(child);
                    }
                    child.next = this;
                    return this;
                  },
                },
              ]);
              return Context;
            })();

            var isArray =
              typeof Array.isArray === "function"
                ? Array.isArray
                : function (a) {
                    return a instanceof Array;
                  };

            function cloneRegExp(re) {
              var regexMatch = /^\/(.*)\/([gimyu]*)$/.exec(re.toString());
              return new RegExp(regexMatch[1], regexMatch[2]);
            }

            function clone(arg) {
              if (
                (typeof arg === "undefined" ? "undefined" : _typeof(arg)) !==
                "object"
              ) {
                return arg;
              }
              if (arg === null) {
                return null;
              }
              if (isArray(arg)) {
                return arg.map(clone);
              }
              if (arg instanceof Date) {
                return new Date(arg.getTime());
              }
              if (arg instanceof RegExp) {
                return cloneRegExp(arg);
              }
              var cloned = {};
              for (var name in arg) {
                if (Object.prototype.hasOwnProperty.call(arg, name)) {
                  cloned[name] = clone(arg[name]);
                }
              }
              return cloned;
            }

            var DiffContext = (function (_Context) {
              inherits(DiffContext, _Context);

              function DiffContext(left, right) {
                classCallCheck(this, DiffContext);

                var _this = possibleConstructorReturn(
                  this,
                  (
                    DiffContext.__proto__ || Object.getPrototypeOf(DiffContext)
                  ).call(this)
                );

                _this.left = left;
                _this.right = right;
                _this.pipe = "diff";
                return _this;
              }

              createClass(DiffContext, [
                {
                  key: "setResult",
                  value: function setResult(result) {
                    if (
                      this.options.cloneDiffValues &&
                      (typeof result === "undefined"
                        ? "undefined"
                        : _typeof(result)) === "object"
                    ) {
                      var clone$$1 =
                        typeof this.options.cloneDiffValues === "function"
                          ? this.options.cloneDiffValues
                          : clone;
                      if (_typeof(result[0]) === "object") {
                        result[0] = clone$$1(result[0]);
                      }
                      if (_typeof(result[1]) === "object") {
                        result[1] = clone$$1(result[1]);
                      }
                    }
                    return Context.prototype.setResult.apply(this, arguments);
                  },
                },
              ]);
              return DiffContext;
            })(Context);

            var PatchContext = (function (_Context) {
              inherits(PatchContext, _Context);

              function PatchContext(left, delta) {
                classCallCheck(this, PatchContext);

                var _this = possibleConstructorReturn(
                  this,
                  (
                    PatchContext.__proto__ ||
                    Object.getPrototypeOf(PatchContext)
                  ).call(this)
                );

                _this.left = left;
                _this.delta = delta;
                _this.pipe = "patch";
                return _this;
              }

              return PatchContext;
            })(Context);

            var ReverseContext = (function (_Context) {
              inherits(ReverseContext, _Context);

              function ReverseContext(delta) {
                classCallCheck(this, ReverseContext);

                var _this = possibleConstructorReturn(
                  this,
                  (
                    ReverseContext.__proto__ ||
                    Object.getPrototypeOf(ReverseContext)
                  ).call(this)
                );

                _this.delta = delta;
                _this.pipe = "reverse";
                return _this;
              }

              return ReverseContext;
            })(Context);

            var isArray$1 =
              typeof Array.isArray === "function"
                ? Array.isArray
                : function (a) {
                    return a instanceof Array;
                  };

            var diffFilter = function trivialMatchesDiffFilter(context) {
              if (context.left === context.right) {
                context.setResult(undefined).exit();
                return;
              }
              if (typeof context.left === "undefined") {
                if (typeof context.right === "function") {
                  throw new Error("functions are not supported");
                }
                context.setResult([context.right]).exit();
                return;
              }
              if (typeof context.right === "undefined") {
                context.setResult([context.left, 0, 0]).exit();
                return;
              }
              if (
                typeof context.left === "function" ||
                typeof context.right === "function"
              ) {
                throw new Error("functions are not supported");
              }
              context.leftType =
                context.left === null ? "null" : _typeof(context.left);
              context.rightType =
                context.right === null ? "null" : _typeof(context.right);
              if (context.leftType !== context.rightType) {
                context.setResult([context.left, context.right]).exit();
                return;
              }
              if (
                context.leftType === "boolean" ||
                context.leftType === "number"
              ) {
                context.setResult([context.left, context.right]).exit();
                return;
              }
              if (context.leftType === "object") {
                context.leftIsArray = isArray$1(context.left);
              }
              if (context.rightType === "object") {
                context.rightIsArray = isArray$1(context.right);
              }
              if (context.leftIsArray !== context.rightIsArray) {
                context.setResult([context.left, context.right]).exit();
                return;
              }

              if (context.left instanceof RegExp) {
                if (context.right instanceof RegExp) {
                  context
                    .setResult([
                      context.left.toString(),
                      context.right.toString(),
                    ])
                    .exit();
                } else {
                  context.setResult([context.left, context.right]).exit();
                }
              }
            };
            diffFilter.filterName = "trivial";

            var patchFilter = function trivialMatchesPatchFilter(context) {
              if (typeof context.delta === "undefined") {
                context.setResult(context.left).exit();
                return;
              }
              context.nested = !isArray$1(context.delta);
              if (context.nested) {
                return;
              }
              if (context.delta.length === 1) {
                context.setResult(context.delta[0]).exit();
                return;
              }
              if (context.delta.length === 2) {
                if (context.left instanceof RegExp) {
                  var regexArgs = /^\/(.*)\/([gimyu]+)$/.exec(context.delta[1]);
                  if (regexArgs) {
                    context
                      .setResult(new RegExp(regexArgs[1], regexArgs[2]))
                      .exit();
                    return;
                  }
                }
                context.setResult(context.delta[1]).exit();
                return;
              }
              if (context.delta.length === 3 && context.delta[2] === 0) {
                context.setResult(undefined).exit();
              }
            };
            patchFilter.filterName = "trivial";

            var reverseFilter = function trivialReferseFilter(context) {
              if (typeof context.delta === "undefined") {
                context.setResult(context.delta).exit();
                return;
              }
              context.nested = !isArray$1(context.delta);
              if (context.nested) {
                return;
              }
              if (context.delta.length === 1) {
                context.setResult([context.delta[0], 0, 0]).exit();
                return;
              }
              if (context.delta.length === 2) {
                context.setResult([context.delta[1], context.delta[0]]).exit();
                return;
              }
              if (context.delta.length === 3 && context.delta[2] === 0) {
                context.setResult([context.delta[0]]).exit();
              }
            };
            reverseFilter.filterName = "trivial";

            function collectChildrenDiffFilter(context) {
              if (!context || !context.children) {
                return;
              }
              var length = context.children.length;
              var child = void 0;
              var result = context.result;
              for (var index = 0; index < length; index++) {
                child = context.children[index];
                if (typeof child.result === "undefined") {
                  continue;
                }
                result = result || {};
                result[child.childName] = child.result;
              }
              if (result && context.leftIsArray) {
                result._t = "a";
              }
              context.setResult(result).exit();
            }
            collectChildrenDiffFilter.filterName = "collectChildren";

            function objectsDiffFilter(context) {
              if (context.leftIsArray || context.leftType !== "object") {
                return;
              }

              var name = void 0;
              var child = void 0;
              var propertyFilter = context.options.propertyFilter;
              for (name in context.left) {
                if (!Object.prototype.hasOwnProperty.call(context.left, name)) {
                  continue;
                }
                if (propertyFilter && !propertyFilter(name, context)) {
                  continue;
                }
                child = new DiffContext(
                  context.left[name],
                  context.right[name]
                );
                context.push(child, name);
              }
              for (name in context.right) {
                if (
                  !Object.prototype.hasOwnProperty.call(context.right, name)
                ) {
                  continue;
                }
                if (propertyFilter && !propertyFilter(name, context)) {
                  continue;
                }
                if (typeof context.left[name] === "undefined") {
                  child = new DiffContext(undefined, context.right[name]);
                  context.push(child, name);
                }
              }

              if (!context.children || context.children.length === 0) {
                context.setResult(undefined).exit();
                return;
              }
              context.exit();
            }
            objectsDiffFilter.filterName = "objects";

            var patchFilter$1 = function nestedPatchFilter(context) {
              if (!context.nested) {
                return;
              }
              if (context.delta._t) {
                return;
              }
              var name = void 0;
              var child = void 0;
              for (name in context.delta) {
                child = new PatchContext(
                  context.left[name],
                  context.delta[name]
                );
                context.push(child, name);
              }
              context.exit();
            };
            patchFilter$1.filterName = "objects";

            var collectChildrenPatchFilter =
              function collectChildrenPatchFilter(context) {
                if (!context || !context.children) {
                  return;
                }
                if (context.delta._t) {
                  return;
                }
                var length = context.children.length;
                var child = void 0;
                for (var index = 0; index < length; index++) {
                  child = context.children[index];
                  if (
                    Object.prototype.hasOwnProperty.call(
                      context.left,
                      child.childName
                    ) &&
                    child.result === undefined
                  ) {
                    delete context.left[child.childName];
                  } else if (context.left[child.childName] !== child.result) {
                    context.left[child.childName] = child.result;
                  }
                }
                context.setResult(context.left).exit();
              };
            collectChildrenPatchFilter.filterName = "collectChildren";

            var reverseFilter$1 = function nestedReverseFilter(context) {
              if (!context.nested) {
                return;
              }
              if (context.delta._t) {
                return;
              }
              var name = void 0;
              var child = void 0;
              for (name in context.delta) {
                child = new ReverseContext(context.delta[name]);
                context.push(child, name);
              }
              context.exit();
            };
            reverseFilter$1.filterName = "objects";

            function collectChildrenReverseFilter(context) {
              if (!context || !context.children) {
                return;
              }
              if (context.delta._t) {
                return;
              }
              var length = context.children.length;
              var child = void 0;
              var delta = {};
              for (var index = 0; index < length; index++) {
                child = context.children[index];
                if (delta[child.childName] !== child.result) {
                  delta[child.childName] = child.result;
                }
              }
              context.setResult(delta).exit();
            }
            collectChildrenReverseFilter.filterName = "collectChildren";

            /*

LCS implementation that supports arrays or strings

reference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem

*/

            var defaultMatch = function defaultMatch(
              array1,
              array2,
              index1,
              index2
            ) {
              return array1[index1] === array2[index2];
            };

            var lengthMatrix = function lengthMatrix(
              array1,
              array2,
              match,
              context
            ) {
              var len1 = array1.length;
              var len2 = array2.length;
              var x = void 0,
                y = void 0;

              // initialize empty matrix of len1+1 x len2+1
              var matrix = [len1 + 1];
              for (x = 0; x < len1 + 1; x++) {
                matrix[x] = [len2 + 1];
                for (y = 0; y < len2 + 1; y++) {
                  matrix[x][y] = 0;
                }
              }
              matrix.match = match;
              // save sequence lengths for each coordinate
              for (x = 1; x < len1 + 1; x++) {
                for (y = 1; y < len2 + 1; y++) {
                  if (match(array1, array2, x - 1, y - 1, context)) {
                    matrix[x][y] = matrix[x - 1][y - 1] + 1;
                  } else {
                    matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);
                  }
                }
              }
              return matrix;
            };

            var backtrack = function backtrack(
              matrix,
              array1,
              array2,
              context
            ) {
              var index1 = array1.length;
              var index2 = array2.length;
              var subsequence = {
                sequence: [],
                indices1: [],
                indices2: [],
              };

              while (index1 !== 0 && index2 !== 0) {
                var sameLetter = matrix.match(
                  array1,
                  array2,
                  index1 - 1,
                  index2 - 1,
                  context
                );
                if (sameLetter) {
                  subsequence.sequence.unshift(array1[index1 - 1]);
                  subsequence.indices1.unshift(index1 - 1);
                  subsequence.indices2.unshift(index2 - 1);
                  --index1;
                  --index2;
                } else {
                  var valueAtMatrixAbove = matrix[index1][index2 - 1];
                  var valueAtMatrixLeft = matrix[index1 - 1][index2];
                  if (valueAtMatrixAbove > valueAtMatrixLeft) {
                    --index2;
                  } else {
                    --index1;
                  }
                }
              }
              return subsequence;
            };

            var get$1 = function get(array1, array2, match, context) {
              var innerContext = context || {};
              var matrix = lengthMatrix(
                array1,
                array2,
                match || defaultMatch,
                innerContext
              );
              var result = backtrack(matrix, array1, array2, innerContext);
              if (typeof array1 === "string" && typeof array2 === "string") {
                result.sequence = result.sequence.join("");
              }
              return result;
            };

            var lcs = {
              get: get$1,
            };

            var ARRAY_MOVE = 3;

            var isArray$2 =
              typeof Array.isArray === "function"
                ? Array.isArray
                : function (a) {
                    return a instanceof Array;
                  };

            var arrayIndexOf =
              typeof Array.prototype.indexOf === "function"
                ? function (array, item) {
                    return array.indexOf(item);
                  }
                : function (array, item) {
                    var length = array.length;
                    for (var i = 0; i < length; i++) {
                      if (array[i] === item) {
                        return i;
                      }
                    }
                    return -1;
                  };

            function arraysHaveMatchByRef(array1, array2, len1, len2) {
              for (var index1 = 0; index1 < len1; index1++) {
                var val1 = array1[index1];
                for (var index2 = 0; index2 < len2; index2++) {
                  var val2 = array2[index2];
                  if (index1 !== index2 && val1 === val2) {
                    return true;
                  }
                }
              }
            }

            function matchItems(array1, array2, index1, index2, context) {
              var value1 = array1[index1];
              var value2 = array2[index2];
              if (value1 === value2) {
                return true;
              }
              if (
                (typeof value1 === "undefined"
                  ? "undefined"
                  : _typeof(value1)) !== "object" ||
                (typeof value2 === "undefined"
                  ? "undefined"
                  : _typeof(value2)) !== "object"
              ) {
                return false;
              }
              var objectHash = context.objectHash;
              if (!objectHash) {
                // no way to match objects was provided, try match by position
                return context.matchByPosition && index1 === index2;
              }
              var hash1 = void 0;
              var hash2 = void 0;
              if (typeof index1 === "number") {
                context.hashCache1 = context.hashCache1 || [];
                hash1 = context.hashCache1[index1];
                if (typeof hash1 === "undefined") {
                  context.hashCache1[index1] = hash1 = objectHash(
                    value1,
                    index1
                  );
                }
              } else {
                hash1 = objectHash(value1);
              }
              if (typeof hash1 === "undefined") {
                return false;
              }
              if (typeof index2 === "number") {
                context.hashCache2 = context.hashCache2 || [];
                hash2 = context.hashCache2[index2];
                if (typeof hash2 === "undefined") {
                  context.hashCache2[index2] = hash2 = objectHash(
                    value2,
                    index2
                  );
                }
              } else {
                hash2 = objectHash(value2);
              }
              if (typeof hash2 === "undefined") {
                return false;
              }
              return hash1 === hash2;
            }

            var diffFilter$1 = function arraysDiffFilter(context) {
              if (!context.leftIsArray) {
                return;
              }

              var matchContext = {
                objectHash: context.options && context.options.objectHash,
                matchByPosition:
                  context.options && context.options.matchByPosition,
              };
              var commonHead = 0;
              var commonTail = 0;
              var index = void 0;
              var index1 = void 0;
              var index2 = void 0;
              var array1 = context.left;
              var array2 = context.right;
              var len1 = array1.length;
              var len2 = array2.length;

              var child = void 0;

              if (
                len1 > 0 &&
                len2 > 0 &&
                !matchContext.objectHash &&
                typeof matchContext.matchByPosition !== "boolean"
              ) {
                matchContext.matchByPosition = !arraysHaveMatchByRef(
                  array1,
                  array2,
                  len1,
                  len2
                );
              }

              // separate common head
              while (
                commonHead < len1 &&
                commonHead < len2 &&
                matchItems(array1, array2, commonHead, commonHead, matchContext)
              ) {
                index = commonHead;
                child = new DiffContext(
                  context.left[index],
                  context.right[index]
                );
                context.push(child, index);
                commonHead++;
              }
              // separate common tail
              while (
                commonTail + commonHead < len1 &&
                commonTail + commonHead < len2 &&
                matchItems(
                  array1,
                  array2,
                  len1 - 1 - commonTail,
                  len2 - 1 - commonTail,
                  matchContext
                )
              ) {
                index1 = len1 - 1 - commonTail;
                index2 = len2 - 1 - commonTail;
                child = new DiffContext(
                  context.left[index1],
                  context.right[index2]
                );
                context.push(child, index2);
                commonTail++;
              }
              var result = void 0;
              if (commonHead + commonTail === len1) {
                if (len1 === len2) {
                  // arrays are identical
                  context.setResult(undefined).exit();
                  return;
                }
                // trivial case, a block (1 or more consecutive items) was added
                result = result || {
                  _t: "a",
                };
                for (index = commonHead; index < len2 - commonTail; index++) {
                  result[index] = [array2[index]];
                }
                context.setResult(result).exit();
                return;
              }
              if (commonHead + commonTail === len2) {
                // trivial case, a block (1 or more consecutive items) was removed
                result = result || {
                  _t: "a",
                };
                for (index = commonHead; index < len1 - commonTail; index++) {
                  result["_" + index] = [array1[index], 0, 0];
                }
                context.setResult(result).exit();
                return;
              }
              // reset hash cache
              delete matchContext.hashCache1;
              delete matchContext.hashCache2;

              // diff is not trivial, find the LCS (Longest Common Subsequence)
              var trimmed1 = array1.slice(commonHead, len1 - commonTail);
              var trimmed2 = array2.slice(commonHead, len2 - commonTail);
              var seq = lcs.get(trimmed1, trimmed2, matchItems, matchContext);
              var removedItems = [];
              result = result || {
                _t: "a",
              };
              for (index = commonHead; index < len1 - commonTail; index++) {
                if (arrayIndexOf(seq.indices1, index - commonHead) < 0) {
                  // removed
                  result["_" + index] = [array1[index], 0, 0];
                  removedItems.push(index);
                }
              }

              var detectMove = true;
              if (
                context.options &&
                context.options.arrays &&
                context.options.arrays.detectMove === false
              ) {
                detectMove = false;
              }
              var includeValueOnMove = false;
              if (
                context.options &&
                context.options.arrays &&
                context.options.arrays.includeValueOnMove
              ) {
                includeValueOnMove = true;
              }

              var removedItemsLength = removedItems.length;
              for (index = commonHead; index < len2 - commonTail; index++) {
                var indexOnArray2 = arrayIndexOf(
                  seq.indices2,
                  index - commonHead
                );
                if (indexOnArray2 < 0) {
                  // added, try to match with a removed item and register as position move
                  var isMove = false;
                  if (detectMove && removedItemsLength > 0) {
                    for (
                      var removeItemIndex1 = 0;
                      removeItemIndex1 < removedItemsLength;
                      removeItemIndex1++
                    ) {
                      index1 = removedItems[removeItemIndex1];
                      if (
                        matchItems(
                          trimmed1,
                          trimmed2,
                          index1 - commonHead,
                          index - commonHead,
                          matchContext
                        )
                      ) {
                        // store position move as: [originalValue, newPosition, ARRAY_MOVE]
                        result["_" + index1].splice(1, 2, index, ARRAY_MOVE);
                        if (!includeValueOnMove) {
                          // don't include moved value on diff, to save bytes
                          result["_" + index1][0] = "";
                        }

                        index2 = index;
                        child = new DiffContext(
                          context.left[index1],
                          context.right[index2]
                        );
                        context.push(child, index2);
                        removedItems.splice(removeItemIndex1, 1);
                        isMove = true;
                        break;
                      }
                    }
                  }
                  if (!isMove) {
                    // added
                    result[index] = [array2[index]];
                  }
                } else {
                  // match, do inner diff
                  index1 = seq.indices1[indexOnArray2] + commonHead;
                  index2 = seq.indices2[indexOnArray2] + commonHead;
                  child = new DiffContext(
                    context.left[index1],
                    context.right[index2]
                  );
                  context.push(child, index2);
                }
              }

              context.setResult(result).exit();
            };
            diffFilter$1.filterName = "arrays";

            var compare = {
              numerically: function numerically(a, b) {
                return a - b;
              },
              numericallyBy: function numericallyBy(name) {
                return function (a, b) {
                  return a[name] - b[name];
                };
              },
            };

            var patchFilter$2 = function nestedPatchFilter(context) {
              if (!context.nested) {
                return;
              }
              if (context.delta._t !== "a") {
                return;
              }
              var index = void 0;
              var index1 = void 0;

              var delta = context.delta;
              var array = context.left;

              // first, separate removals, insertions and modifications
              var toRemove = [];
              var toInsert = [];
              var toModify = [];
              for (index in delta) {
                if (index !== "_t") {
                  if (index[0] === "_") {
                    // removed item from original array
                    if (
                      delta[index][2] === 0 ||
                      delta[index][2] === ARRAY_MOVE
                    ) {
                      toRemove.push(parseInt(index.slice(1), 10));
                    } else {
                      throw new Error(
                        "only removal or move can be applied at original array indices," +
                          (" invalid diff type: " + delta[index][2])
                      );
                    }
                  } else {
                    if (delta[index].length === 1) {
                      // added item at new array
                      toInsert.push({
                        index: parseInt(index, 10),
                        value: delta[index][0],
                      });
                    } else {
                      // modified item at new array
                      toModify.push({
                        index: parseInt(index, 10),
                        delta: delta[index],
                      });
                    }
                  }
                }
              }

              // remove items, in reverse order to avoid sawing our own floor
              toRemove = toRemove.sort(compare.numerically);
              for (index = toRemove.length - 1; index >= 0; index--) {
                index1 = toRemove[index];
                var indexDiff = delta["_" + index1];
                var removedValue = array.splice(index1, 1)[0];
                if (indexDiff[2] === ARRAY_MOVE) {
                  // reinsert later
                  toInsert.push({
                    index: indexDiff[1],
                    value: removedValue,
                  });
                }
              }

              // insert items, in reverse order to avoid moving our own floor
              toInsert = toInsert.sort(compare.numericallyBy("index"));
              var toInsertLength = toInsert.length;
              for (index = 0; index < toInsertLength; index++) {
                var insertion = toInsert[index];
                array.splice(insertion.index, 0, insertion.value);
              }

              // apply modifications
              var toModifyLength = toModify.length;
              var child = void 0;
              if (toModifyLength > 0) {
                for (index = 0; index < toModifyLength; index++) {
                  var modification = toModify[index];
                  child = new PatchContext(
                    context.left[modification.index],
                    modification.delta
                  );
                  context.push(child, modification.index);
                }
              }

              if (!context.children) {
                context.setResult(context.left).exit();
                return;
              }
              context.exit();
            };
            patchFilter$2.filterName = "arrays";

            var collectChildrenPatchFilter$1 =
              function collectChildrenPatchFilter(context) {
                if (!context || !context.children) {
                  return;
                }
                if (context.delta._t !== "a") {
                  return;
                }
                var length = context.children.length;
                var child = void 0;
                for (var index = 0; index < length; index++) {
                  child = context.children[index];
                  context.left[child.childName] = child.result;
                }
                context.setResult(context.left).exit();
              };
            collectChildrenPatchFilter$1.filterName = "arraysCollectChildren";

            var reverseFilter$2 = function arraysReverseFilter(context) {
              if (!context.nested) {
                if (context.delta[2] === ARRAY_MOVE) {
                  context.newName = "_" + context.delta[1];
                  context
                    .setResult([
                      context.delta[0],
                      parseInt(context.childName.substr(1), 10),
                      ARRAY_MOVE,
                    ])
                    .exit();
                }
                return;
              }
              if (context.delta._t !== "a") {
                return;
              }
              var name = void 0;
              var child = void 0;
              for (name in context.delta) {
                if (name === "_t") {
                  continue;
                }
                child = new ReverseContext(context.delta[name]);
                context.push(child, name);
              }
              context.exit();
            };
            reverseFilter$2.filterName = "arrays";

            var reverseArrayDeltaIndex = function reverseArrayDeltaIndex(
              delta,
              index,
              itemDelta
            ) {
              if (typeof index === "string" && index[0] === "_") {
                return parseInt(index.substr(1), 10);
              } else if (isArray$2(itemDelta) && itemDelta[2] === 0) {
                return "_" + index;
              }

              var reverseIndex = +index;
              for (var deltaIndex in delta) {
                var deltaItem = delta[deltaIndex];
                if (isArray$2(deltaItem)) {
                  if (deltaItem[2] === ARRAY_MOVE) {
                    var moveFromIndex = parseInt(deltaIndex.substr(1), 10);
                    var moveToIndex = deltaItem[1];
                    if (moveToIndex === +index) {
                      return moveFromIndex;
                    }
                    if (
                      moveFromIndex <= reverseIndex &&
                      moveToIndex > reverseIndex
                    ) {
                      reverseIndex++;
                    } else if (
                      moveFromIndex >= reverseIndex &&
                      moveToIndex < reverseIndex
                    ) {
                      reverseIndex--;
                    }
                  } else if (deltaItem[2] === 0) {
                    var deleteIndex = parseInt(deltaIndex.substr(1), 10);
                    if (deleteIndex <= reverseIndex) {
                      reverseIndex++;
                    }
                  } else if (
                    deltaItem.length === 1 &&
                    deltaIndex <= reverseIndex
                  ) {
                    reverseIndex--;
                  }
                }
              }

              return reverseIndex;
            };

            function collectChildrenReverseFilter$1(context) {
              if (!context || !context.children) {
                return;
              }
              if (context.delta._t !== "a") {
                return;
              }
              var length = context.children.length;
              var child = void 0;
              var delta = {
                _t: "a",
              };

              for (var index = 0; index < length; index++) {
                child = context.children[index];
                var name = child.newName;
                if (typeof name === "undefined") {
                  name = reverseArrayDeltaIndex(
                    context.delta,
                    child.childName,
                    child.result
                  );
                }
                if (delta[name] !== child.result) {
                  delta[name] = child.result;
                }
              }
              context.setResult(delta).exit();
            }
            collectChildrenReverseFilter$1.filterName = "arraysCollectChildren";

            var diffFilter$2 = function datesDiffFilter(context) {
              if (context.left instanceof Date) {
                if (context.right instanceof Date) {
                  if (context.left.getTime() !== context.right.getTime()) {
                    context.setResult([context.left, context.right]);
                  } else {
                    context.setResult(undefined);
                  }
                } else {
                  context.setResult([context.left, context.right]);
                }
                context.exit();
              } else if (context.right instanceof Date) {
                context.setResult([context.left, context.right]).exit();
              }
            };
            diffFilter$2.filterName = "dates";

            function createCommonjsModule(fn, module) {
              return (
                (module = { exports: {} }),
                fn(module, module.exports),
                module.exports
              );
            }

            var diffMatchPatch = createCommonjsModule(function (module) {
              /**
               * Diff Match and Patch
               * Copyright 2018 The diff-match-patch Authors.
               * https://github.com/google/diff-match-patch
               *
               * Licensed under the Apache License, Version 2.0 (the "License");
               * you may not use this file except in compliance with the License.
               * You may obtain a copy of the License at
               *
               *   http://www.apache.org/licenses/LICENSE-2.0
               *
               * Unless required by applicable law or agreed to in writing, software
               * distributed under the License is distributed on an "AS IS" BASIS,
               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               * See the License for the specific language governing permissions and
               * limitations under the License.
               */

              /**
               * @fileoverview Computes the difference between two texts to create a patch.
               * Applies the patch onto another text, allowing for errors.
               * @author fraser@google.com (Neil Fraser)
               */

              /**
               * Class containing the diff, match and patch methods.
               * @constructor
               */
              function diff_match_patch() {
                // Defaults.
                // Redefine these in your program to override the defaults.

                // Number of seconds to map a diff before giving up (0 for infinity).
                this.Diff_Timeout = 1.0;
                // Cost of an empty edit operation in terms of edit characters.
                this.Diff_EditCost = 4;
                // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
                this.Match_Threshold = 0.5;
                // How far to search for a match (0 = exact location, 1000+ = broad match).
                // A match this many characters away from the expected location will add
                // 1.0 to the score (0.0 is a perfect match).
                this.Match_Distance = 1000;
                // When deleting a large block of text (over ~64 characters), how close do
                // the contents have to be to match the expected contents. (0.0 = perfection,
                // 1.0 = very loose).  Note that Match_Threshold controls how closely the
                // end points of a delete need to match.
                this.Patch_DeleteThreshold = 0.5;
                // Chunk size for context length.
                this.Patch_Margin = 4;

                // The number of bits in an int.
                this.Match_MaxBits = 32;
              }

              //  DIFF FUNCTIONS

              /**
               * The data structure representing a diff is an array of tuples:
               * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
               * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
               */
              var DIFF_DELETE = -1;
              var DIFF_INSERT = 1;
              var DIFF_EQUAL = 0;

              /** @typedef {{0: number, 1: string}} */
              diff_match_patch.prototype.diff_main = function (
                text1,
                text2,
                opt_checklines,
                opt_deadline
              ) {
                // Set a deadline by which time the diff must be complete.
                if (typeof opt_deadline == "undefined") {
                  if (this.Diff_Timeout <= 0) {
                    opt_deadline = Number.MAX_VALUE;
                  } else {
                    opt_deadline =
                      new Date().getTime() + this.Diff_Timeout * 1000;
                  }
                }
                var deadline = opt_deadline;

                // Check for null inputs.
                if (text1 == null || text2 == null) {
                  throw new Error("Null input. (diff_main)");
                }

                // Check for equality (speedup).
                if (text1 == text2) {
                  if (text1) {
                    return [[DIFF_EQUAL, text1]];
                  }
                  return [];
                }

                if (typeof opt_checklines == "undefined") {
                  opt_checklines = true;
                }
                var checklines = opt_checklines;

                // Trim off common prefix (speedup).
                var commonlength = this.diff_commonPrefix(text1, text2);
                var commonprefix = text1.substring(0, commonlength);
                text1 = text1.substring(commonlength);
                text2 = text2.substring(commonlength);

                // Trim off common suffix (speedup).
                commonlength = this.diff_commonSuffix(text1, text2);
                var commonsuffix = text1.substring(text1.length - commonlength);
                text1 = text1.substring(0, text1.length - commonlength);
                text2 = text2.substring(0, text2.length - commonlength);

                // Compute the diff on the middle block.
                var diffs = this.diff_compute_(
                  text1,
                  text2,
                  checklines,
                  deadline
                );

                // Restore the prefix and suffix.
                if (commonprefix) {
                  diffs.unshift([DIFF_EQUAL, commonprefix]);
                }
                if (commonsuffix) {
                  diffs.push([DIFF_EQUAL, commonsuffix]);
                }
                this.diff_cleanupMerge(diffs);
                return diffs;
              };

              /**
               * Find the differences between two texts.  Assumes that the texts do not
               * have any common prefix or suffix.
               * @param {string} text1 Old string to be diffed.
               * @param {string} text2 New string to be diffed.
               * @param {boolean} checklines Speedup flag.  If false, then don't run a
               *     line-level diff first to identify the changed areas.
               *     If true, then run a faster, slightly less optimal diff.
               * @param {number} deadline Time when the diff should be complete by.
               * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
               * @private
               */
              diff_match_patch.prototype.diff_compute_ = function (
                text1,
                text2,
                checklines,
                deadline
              ) {
                var diffs;

                if (!text1) {
                  // Just add some text (speedup).
                  return [[DIFF_INSERT, text2]];
                }

                if (!text2) {
                  // Just delete some text (speedup).
                  return [[DIFF_DELETE, text1]];
                }

                var longtext = text1.length > text2.length ? text1 : text2;
                var shorttext = text1.length > text2.length ? text2 : text1;
                var i = longtext.indexOf(shorttext);
                if (i != -1) {
                  // Shorter text is inside the longer text (speedup).
                  diffs = [
                    [DIFF_INSERT, longtext.substring(0, i)],
                    [DIFF_EQUAL, shorttext],
                    [DIFF_INSERT, longtext.substring(i + shorttext.length)],
                  ];
                  // Swap insertions for deletions if diff is reversed.
                  if (text1.length > text2.length) {
                    diffs[0][0] = diffs[2][0] = DIFF_DELETE;
                  }
                  return diffs;
                }

                if (shorttext.length == 1) {
                  // Single character string.
                  // After the previous speedup, the character can't be an equality.
                  return [
                    [DIFF_DELETE, text1],
                    [DIFF_INSERT, text2],
                  ];
                }

                // Check to see if the problem can be split in two.
                var hm = this.diff_halfMatch_(text1, text2);
                if (hm) {
                  // A half-match was found, sort out the return data.
                  var text1_a = hm[0];
                  var text1_b = hm[1];
                  var text2_a = hm[2];
                  var text2_b = hm[3];
                  var mid_common = hm[4];
                  // Send both pairs off for separate processing.
                  var diffs_a = this.diff_main(
                    text1_a,
                    text2_a,
                    checklines,
                    deadline
                  );
                  var diffs_b = this.diff_main(
                    text1_b,
                    text2_b,
                    checklines,
                    deadline
                  );
                  // Merge the results.
                  return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
                }

                if (checklines && text1.length > 100 && text2.length > 100) {
                  return this.diff_lineMode_(text1, text2, deadline);
                }

                return this.diff_bisect_(text1, text2, deadline);
              };

              /**
               * Do a quick line-level diff on both strings, then rediff the parts for
               * greater accuracy.
               * This speedup can produce non-minimal diffs.
               * @param {string} text1 Old string to be diffed.
               * @param {string} text2 New string to be diffed.
               * @param {number} deadline Time when the diff should be complete by.
               * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
               * @private
               */
              diff_match_patch.prototype.diff_lineMode_ = function (
                text1,
                text2,
                deadline
              ) {
                // Scan the text on a line-by-line basis first.
                var a = this.diff_linesToChars_(text1, text2);
                text1 = a.chars1;
                text2 = a.chars2;
                var linearray = a.lineArray;

                var diffs = this.diff_main(text1, text2, false, deadline);

                // Convert the diff back to original text.
                this.diff_charsToLines_(diffs, linearray);
                // Eliminate freak matches (e.g. blank lines)
                this.diff_cleanupSemantic(diffs);

                // Rediff any replacement blocks, this time character-by-character.
                // Add a dummy entry at the end.
                diffs.push([DIFF_EQUAL, ""]);
                var pointer = 0;
                var count_delete = 0;
                var count_insert = 0;
                var text_delete = "";
                var text_insert = "";
                while (pointer < diffs.length) {
                  switch (diffs[pointer][0]) {
                    case DIFF_INSERT:
                      count_insert++;
                      text_insert += diffs[pointer][1];
                      break;
                    case DIFF_DELETE:
                      count_delete++;
                      text_delete += diffs[pointer][1];
                      break;
                    case DIFF_EQUAL:
                      // Upon reaching an equality, check for prior redundancies.
                      if (count_delete >= 1 && count_insert >= 1) {
                        // Delete the offending records and add the merged ones.
                        diffs.splice(
                          pointer - count_delete - count_insert,
                          count_delete + count_insert
                        );
                        pointer = pointer - count_delete - count_insert;
                        var a = this.diff_main(
                          text_delete,
                          text_insert,
                          false,
                          deadline
                        );
                        for (var j = a.length - 1; j >= 0; j--) {
                          diffs.splice(pointer, 0, a[j]);
                        }
                        pointer = pointer + a.length;
                      }
                      count_insert = 0;
                      count_delete = 0;
                      text_delete = "";
                      text_insert = "";
                      break;
                  }
                  pointer++;
                }
                diffs.pop(); // Remove the dummy entry at the end.

                return diffs;
              };

              /**
               * Find the 'middle snake' of a diff, split the problem in two
               * and return the recursively constructed diff.
               * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
               * @param {string} text1 Old string to be diffed.
               * @param {string} text2 New string to be diffed.
               * @param {number} deadline Time at which to bail if not yet complete.
               * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
               * @private
               */
              diff_match_patch.prototype.diff_bisect_ = function (
                text1,
                text2,
                deadline
              ) {
                // Cache the text lengths to prevent multiple calls.
                var text1_length = text1.length;
                var text2_length = text2.length;
                var max_d = Math.ceil((text1_length + text2_length) / 2);
                var v_offset = max_d;
                var v_length = 2 * max_d;
                var v1 = new Array(v_length);
                var v2 = new Array(v_length);
                // Setting all elements to -1 is faster in Chrome & Firefox than mixing
                // integers and undefined.
                for (var x = 0; x < v_length; x++) {
                  v1[x] = -1;
                  v2[x] = -1;
                }
                v1[v_offset + 1] = 0;
                v2[v_offset + 1] = 0;
                var delta = text1_length - text2_length;
                // If the total number of characters is odd, then the front path will collide
                // with the reverse path.
                var front = delta % 2 != 0;
                // Offsets for start and end of k loop.
                // Prevents mapping of space beyond the grid.
                var k1start = 0;
                var k1end = 0;
                var k2start = 0;
                var k2end = 0;
                for (var d = 0; d < max_d; d++) {
                  // Bail out if deadline is reached.
                  if (new Date().getTime() > deadline) {
                    break;
                  }

                  // Walk the front path one step.
                  for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
                    var k1_offset = v_offset + k1;
                    var x1;
                    if (
                      k1 == -d ||
                      (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])
                    ) {
                      x1 = v1[k1_offset + 1];
                    } else {
                      x1 = v1[k1_offset - 1] + 1;
                    }
                    var y1 = x1 - k1;
                    while (
                      x1 < text1_length &&
                      y1 < text2_length &&
                      text1.charAt(x1) == text2.charAt(y1)
                    ) {
                      x1++;
                      y1++;
                    }
                    v1[k1_offset] = x1;
                    if (x1 > text1_length) {
                      // Ran off the right of the graph.
                      k1end += 2;
                    } else if (y1 > text2_length) {
                      // Ran off the bottom of the graph.
                      k1start += 2;
                    } else if (front) {
                      var k2_offset = v_offset + delta - k1;
                      if (
                        k2_offset >= 0 &&
                        k2_offset < v_length &&
                        v2[k2_offset] != -1
                      ) {
                        // Mirror x2 onto top-left coordinate system.
                        var x2 = text1_length - v2[k2_offset];
                        if (x1 >= x2) {
                          // Overlap detected.
                          return this.diff_bisectSplit_(
                            text1,
                            text2,
                            x1,
                            y1,
                            deadline
                          );
                        }
                      }
                    }
                  }

                  // Walk the reverse path one step.
                  for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
                    var k2_offset = v_offset + k2;
                    var x2;
                    if (
                      k2 == -d ||
                      (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])
                    ) {
                      x2 = v2[k2_offset + 1];
                    } else {
                      x2 = v2[k2_offset - 1] + 1;
                    }
                    var y2 = x2 - k2;
                    while (
                      x2 < text1_length &&
                      y2 < text2_length &&
                      text1.charAt(text1_length - x2 - 1) ==
                        text2.charAt(text2_length - y2 - 1)
                    ) {
                      x2++;
                      y2++;
                    }
                    v2[k2_offset] = x2;
                    if (x2 > text1_length) {
                      // Ran off the left of the graph.
                      k2end += 2;
                    } else if (y2 > text2_length) {
                      // Ran off the top of the graph.
                      k2start += 2;
                    } else if (!front) {
                      var k1_offset = v_offset + delta - k2;
                      if (
                        k1_offset >= 0 &&
                        k1_offset < v_length &&
                        v1[k1_offset] != -1
                      ) {
                        var x1 = v1[k1_offset];
                        var y1 = v_offset + x1 - k1_offset;
                        // Mirror x2 onto top-left coordinate system.
                        x2 = text1_length - x2;
                        if (x1 >= x2) {
                          // Overlap detected.
                          return this.diff_bisectSplit_(
                            text1,
                            text2,
                            x1,
                            y1,
                            deadline
                          );
                        }
                      }
                    }
                  }
                }
                // Diff took too long and hit the deadline or
                // number of diffs equals number of characters, no commonality at all.
                return [
                  [DIFF_DELETE, text1],
                  [DIFF_INSERT, text2],
                ];
              };

              /**
               * Given the location of the 'middle snake', split the diff in two parts
               * and recurse.
               * @param {string} text1 Old string to be diffed.
               * @param {string} text2 New string to be diffed.
               * @param {number} x Index of split point in text1.
               * @param {number} y Index of split point in text2.
               * @param {number} deadline Time at which to bail if not yet complete.
               * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
               * @private
               */
              diff_match_patch.prototype.diff_bisectSplit_ = function (
                text1,
                text2,
                x,
                y,
                deadline
              ) {
                var text1a = text1.substring(0, x);
                var text2a = text2.substring(0, y);
                var text1b = text1.substring(x);
                var text2b = text2.substring(y);

                // Compute both diffs serially.
                var diffs = this.diff_main(text1a, text2a, false, deadline);
                var diffsb = this.diff_main(text1b, text2b, false, deadline);

                return diffs.concat(diffsb);
              };

              /**
               * Split two texts into an array of strings.  Reduce the texts to a string of
               * hashes where each Unicode character represents one line.
               * @param {string} text1 First string.
               * @param {string} text2 Second string.
               * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
               *     An object containing the encoded text1, the encoded text2 and
               *     the array of unique strings.
               *     The zeroth element of the array of unique strings is intentionally blank.
               * @private
               */
              diff_match_patch.prototype.diff_linesToChars_ = function (
                text1,
                text2
              ) {
                var lineArray = []; // e.g. lineArray[4] == 'Hello\n'
                var lineHash = {}; // e.g. lineHash['Hello\n'] == 4

                // '\x00' is a valid character, but various debuggers don't like it.
                // So we'll insert a junk entry to avoid generating a null character.
                lineArray[0] = "";

                /**
                 * Split a text into an array of strings.  Reduce the texts to a string of
                 * hashes where each Unicode character represents one line.
                 * Modifies linearray and linehash through being a closure.
                 * @param {string} text String to encode.
                 * @return {string} Encoded string.
                 * @private
                 */
                function diff_linesToCharsMunge_(text) {
                  var chars = "";
                  // Walk the text, pulling out a substring for each line.
                  // text.split('\n') would would temporarily double our memory footprint.
                  // Modifying text would create many large strings to garbage collect.
                  var lineStart = 0;
                  var lineEnd = -1;
                  // Keeping our own length variable is faster than looking it up.
                  var lineArrayLength = lineArray.length;
                  while (lineEnd < text.length - 1) {
                    lineEnd = text.indexOf("\n", lineStart);
                    if (lineEnd == -1) {
                      lineEnd = text.length - 1;
                    }
                    var line = text.substring(lineStart, lineEnd + 1);
                    lineStart = lineEnd + 1;

                    if (
                      lineHash.hasOwnProperty
                        ? lineHash.hasOwnProperty(line)
                        : lineHash[line] !== undefined
                    ) {
                      chars += String.fromCharCode(lineHash[line]);
                    } else {
                      chars += String.fromCharCode(lineArrayLength);
                      lineHash[line] = lineArrayLength;
                      lineArray[lineArrayLength++] = line;
                    }
                  }
                  return chars;
                }

                var chars1 = diff_linesToCharsMunge_(text1);
                var chars2 = diff_linesToCharsMunge_(text2);
                return { chars1: chars1, chars2: chars2, lineArray: lineArray };
              };

              /**
               * Rehydrate the text in a diff from a string of line hashes to real lines of
               * text.
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               * @param {!Array.<string>} lineArray Array of unique strings.
               * @private
               */
              diff_match_patch.prototype.diff_charsToLines_ = function (
                diffs,
                lineArray
              ) {
                for (var x = 0; x < diffs.length; x++) {
                  var chars = diffs[x][1];
                  var text = [];
                  for (var y = 0; y < chars.length; y++) {
                    text[y] = lineArray[chars.charCodeAt(y)];
                  }
                  diffs[x][1] = text.join("");
                }
              };

              /**
               * Determine the common prefix of two strings.
               * @param {string} text1 First string.
               * @param {string} text2 Second string.
               * @return {number} The number of characters common to the start of each
               *     string.
               */
              diff_match_patch.prototype.diff_commonPrefix = function (
                text1,
                text2
              ) {
                // Quick check for common null cases.
                if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
                  return 0;
                }
                // Binary search.
                // Performance analysis: http://neil.fraser.name/news/2007/10/09/
                var pointermin = 0;
                var pointermax = Math.min(text1.length, text2.length);
                var pointermid = pointermax;
                var pointerstart = 0;
                while (pointermin < pointermid) {
                  if (
                    text1.substring(pointerstart, pointermid) ==
                    text2.substring(pointerstart, pointermid)
                  ) {
                    pointermin = pointermid;
                    pointerstart = pointermin;
                  } else {
                    pointermax = pointermid;
                  }
                  pointermid = Math.floor(
                    (pointermax - pointermin) / 2 + pointermin
                  );
                }
                return pointermid;
              };

              /**
               * Determine the common suffix of two strings.
               * @param {string} text1 First string.
               * @param {string} text2 Second string.
               * @return {number} The number of characters common to the end of each string.
               */
              diff_match_patch.prototype.diff_commonSuffix = function (
                text1,
                text2
              ) {
                // Quick check for common null cases.
                if (
                  !text1 ||
                  !text2 ||
                  text1.charAt(text1.length - 1) !=
                    text2.charAt(text2.length - 1)
                ) {
                  return 0;
                }
                // Binary search.
                // Performance analysis: http://neil.fraser.name/news/2007/10/09/
                var pointermin = 0;
                var pointermax = Math.min(text1.length, text2.length);
                var pointermid = pointermax;
                var pointerend = 0;
                while (pointermin < pointermid) {
                  if (
                    text1.substring(
                      text1.length - pointermid,
                      text1.length - pointerend
                    ) ==
                    text2.substring(
                      text2.length - pointermid,
                      text2.length - pointerend
                    )
                  ) {
                    pointermin = pointermid;
                    pointerend = pointermin;
                  } else {
                    pointermax = pointermid;
                  }
                  pointermid = Math.floor(
                    (pointermax - pointermin) / 2 + pointermin
                  );
                }
                return pointermid;
              };

              /**
               * Determine if the suffix of one string is the prefix of another.
               * @param {string} text1 First string.
               * @param {string} text2 Second string.
               * @return {number} The number of characters common to the end of the first
               *     string and the start of the second string.
               * @private
               */
              diff_match_patch.prototype.diff_commonOverlap_ = function (
                text1,
                text2
              ) {
                // Cache the text lengths to prevent multiple calls.
                var text1_length = text1.length;
                var text2_length = text2.length;
                // Eliminate the null case.
                if (text1_length == 0 || text2_length == 0) {
                  return 0;
                }
                // Truncate the longer string.
                if (text1_length > text2_length) {
                  text1 = text1.substring(text1_length - text2_length);
                } else if (text1_length < text2_length) {
                  text2 = text2.substring(0, text1_length);
                }
                var text_length = Math.min(text1_length, text2_length);
                // Quick check for the worst case.
                if (text1 == text2) {
                  return text_length;
                }

                // Start by looking for a single character match
                // and increase length until no match is found.
                // Performance analysis: http://neil.fraser.name/news/2010/11/04/
                var best = 0;
                var length = 1;
                while (true) {
                  var pattern = text1.substring(text_length - length);
                  var found = text2.indexOf(pattern);
                  if (found == -1) {
                    return best;
                  }
                  length += found;
                  if (
                    found == 0 ||
                    text1.substring(text_length - length) ==
                      text2.substring(0, length)
                  ) {
                    best = length;
                    length++;
                  }
                }
              };

              /**
               * Do the two texts share a substring which is at least half the length of the
               * longer text?
               * This speedup can produce non-minimal diffs.
               * @param {string} text1 First string.
               * @param {string} text2 Second string.
               * @return {Array.<string>} Five element Array, containing the prefix of
               *     text1, the suffix of text1, the prefix of text2, the suffix of
               *     text2 and the common middle.  Or null if there was no match.
               * @private
               */
              diff_match_patch.prototype.diff_halfMatch_ = function (
                text1,
                text2
              ) {
                if (this.Diff_Timeout <= 0) {
                  // Don't risk returning a non-optimal diff if we have unlimited time.
                  return null;
                }
                var longtext = text1.length > text2.length ? text1 : text2;
                var shorttext = text1.length > text2.length ? text2 : text1;
                if (
                  longtext.length < 4 ||
                  shorttext.length * 2 < longtext.length
                ) {
                  return null; // Pointless.
                }
                var dmp = this; // 'this' becomes 'window' in a closure.

                /**
                 * Does a substring of shorttext exist within longtext such that the substring
                 * is at least half the length of longtext?
                 * Closure, but does not reference any external variables.
                 * @param {string} longtext Longer string.
                 * @param {string} shorttext Shorter string.
                 * @param {number} i Start index of quarter length substring within longtext.
                 * @return {Array.<string>} Five element Array, containing the prefix of
                 *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
                 *     of shorttext and the common middle.  Or null if there was no match.
                 * @private
                 */
                function diff_halfMatchI_(longtext, shorttext, i) {
                  // Start with a 1/4 length substring at position i as a seed.
                  var seed = longtext.substring(
                    i,
                    i + Math.floor(longtext.length / 4)
                  );
                  var j = -1;
                  var best_common = "";
                  var best_longtext_a,
                    best_longtext_b,
                    best_shorttext_a,
                    best_shorttext_b;
                  while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
                    var prefixLength = dmp.diff_commonPrefix(
                      longtext.substring(i),
                      shorttext.substring(j)
                    );
                    var suffixLength = dmp.diff_commonSuffix(
                      longtext.substring(0, i),
                      shorttext.substring(0, j)
                    );
                    if (best_common.length < suffixLength + prefixLength) {
                      best_common =
                        shorttext.substring(j - suffixLength, j) +
                        shorttext.substring(j, j + prefixLength);
                      best_longtext_a = longtext.substring(0, i - suffixLength);
                      best_longtext_b = longtext.substring(i + prefixLength);
                      best_shorttext_a = shorttext.substring(
                        0,
                        j - suffixLength
                      );
                      best_shorttext_b = shorttext.substring(j + prefixLength);
                    }
                  }
                  if (best_common.length * 2 >= longtext.length) {
                    return [
                      best_longtext_a,
                      best_longtext_b,
                      best_shorttext_a,
                      best_shorttext_b,
                      best_common,
                    ];
                  } else {
                    return null;
                  }
                }

                // First check if the second quarter is the seed for a half-match.
                var hm1 = diff_halfMatchI_(
                  longtext,
                  shorttext,
                  Math.ceil(longtext.length / 4)
                );
                // Check again based on the third quarter.
                var hm2 = diff_halfMatchI_(
                  longtext,
                  shorttext,
                  Math.ceil(longtext.length / 2)
                );
                var hm;
                if (!hm1 && !hm2) {
                  return null;
                } else if (!hm2) {
                  hm = hm1;
                } else if (!hm1) {
                  hm = hm2;
                } else {
                  // Both matched.  Select the longest.
                  hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
                }

                // A half-match was found, sort out the return data.
                var text1_a, text1_b, text2_a, text2_b;
                if (text1.length > text2.length) {
                  text1_a = hm[0];
                  text1_b = hm[1];
                  text2_a = hm[2];
                  text2_b = hm[3];
                } else {
                  text2_a = hm[0];
                  text2_b = hm[1];
                  text1_a = hm[2];
                  text1_b = hm[3];
                }
                var mid_common = hm[4];
                return [text1_a, text1_b, text2_a, text2_b, mid_common];
              };

              /**
               * Reduce the number of edits by eliminating semantically trivial equalities.
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               */
              diff_match_patch.prototype.diff_cleanupSemantic = function (
                diffs
              ) {
                var changes = false;
                var equalities = []; // Stack of indices where equalities are found.
                var equalitiesLength = 0; // Keeping our own length var is faster in JS.
                /** @type {?string} */
                var lastequality = null;
                // Always equal to diffs[equalities[equalitiesLength - 1]][1]
                var pointer = 0; // Index of current position.
                // Number of characters that changed prior to the equality.
                var length_insertions1 = 0;
                var length_deletions1 = 0;
                // Number of characters that changed after the equality.
                var length_insertions2 = 0;
                var length_deletions2 = 0;
                while (pointer < diffs.length) {
                  if (diffs[pointer][0] == DIFF_EQUAL) {
                    // Equality found.
                    equalities[equalitiesLength++] = pointer;
                    length_insertions1 = length_insertions2;
                    length_deletions1 = length_deletions2;
                    length_insertions2 = 0;
                    length_deletions2 = 0;
                    lastequality = diffs[pointer][1];
                  } else {
                    // An insertion or deletion.
                    if (diffs[pointer][0] == DIFF_INSERT) {
                      length_insertions2 += diffs[pointer][1].length;
                    } else {
                      length_deletions2 += diffs[pointer][1].length;
                    }
                    // Eliminate an equality that is smaller or equal to the edits on both
                    // sides of it.
                    if (
                      lastequality &&
                      lastequality.length <=
                        Math.max(length_insertions1, length_deletions1) &&
                      lastequality.length <=
                        Math.max(length_insertions2, length_deletions2)
                    ) {
                      // Duplicate record.
                      diffs.splice(equalities[equalitiesLength - 1], 0, [
                        DIFF_DELETE,
                        lastequality,
                      ]);
                      // Change second copy to insert.
                      diffs[equalities[equalitiesLength - 1] + 1][0] =
                        DIFF_INSERT;
                      // Throw away the equality we just deleted.
                      equalitiesLength--;
                      // Throw away the previous equality (it needs to be reevaluated).
                      equalitiesLength--;
                      pointer =
                        equalitiesLength > 0
                          ? equalities[equalitiesLength - 1]
                          : -1;
                      length_insertions1 = 0; // Reset the counters.
                      length_deletions1 = 0;
                      length_insertions2 = 0;
                      length_deletions2 = 0;
                      lastequality = null;
                      changes = true;
                    }
                  }
                  pointer++;
                }

                // Normalize the diff.
                if (changes) {
                  this.diff_cleanupMerge(diffs);
                }
                this.diff_cleanupSemanticLossless(diffs);

                // Find any overlaps between deletions and insertions.
                // e.g: <del>abcxxx</del><ins>xxxdef</ins>
                //   -> <del>abc</del>xxx<ins>def</ins>
                // e.g: <del>xxxabc</del><ins>defxxx</ins>
                //   -> <ins>def</ins>xxx<del>abc</del>
                // Only extract an overlap if it is as big as the edit ahead or behind it.
                pointer = 1;
                while (pointer < diffs.length) {
                  if (
                    diffs[pointer - 1][0] == DIFF_DELETE &&
                    diffs[pointer][0] == DIFF_INSERT
                  ) {
                    var deletion = diffs[pointer - 1][1];
                    var insertion = diffs[pointer][1];
                    var overlap_length1 = this.diff_commonOverlap_(
                      deletion,
                      insertion
                    );
                    var overlap_length2 = this.diff_commonOverlap_(
                      insertion,
                      deletion
                    );
                    if (overlap_length1 >= overlap_length2) {
                      if (
                        overlap_length1 >= deletion.length / 2 ||
                        overlap_length1 >= insertion.length / 2
                      ) {
                        // Overlap found.  Insert an equality and trim the surrounding edits.
                        diffs.splice(pointer, 0, [
                          DIFF_EQUAL,
                          insertion.substring(0, overlap_length1),
                        ]);
                        diffs[pointer - 1][1] = deletion.substring(
                          0,
                          deletion.length - overlap_length1
                        );
                        diffs[pointer + 1][1] =
                          insertion.substring(overlap_length1);
                        pointer++;
                      }
                    } else {
                      if (
                        overlap_length2 >= deletion.length / 2 ||
                        overlap_length2 >= insertion.length / 2
                      ) {
                        // Reverse overlap found.
                        // Insert an equality and swap and trim the surrounding edits.
                        diffs.splice(pointer, 0, [
                          DIFF_EQUAL,
                          deletion.substring(0, overlap_length2),
                        ]);
                        diffs[pointer - 1][0] = DIFF_INSERT;
                        diffs[pointer - 1][1] = insertion.substring(
                          0,
                          insertion.length - overlap_length2
                        );
                        diffs[pointer + 1][0] = DIFF_DELETE;
                        diffs[pointer + 1][1] =
                          deletion.substring(overlap_length2);
                        pointer++;
                      }
                    }
                    pointer++;
                  }
                  pointer++;
                }
              };

              /**
               * Look for single edits surrounded on both sides by equalities
               * which can be shifted sideways to align the edit to a word boundary.
               * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               */
              diff_match_patch.prototype.diff_cleanupSemanticLossless =
                function (diffs) {
                  /**
                   * Given two strings, compute a score representing whether the internal
                   * boundary falls on logical boundaries.
                   * Scores range from 6 (best) to 0 (worst).
                   * Closure, but does not reference any external variables.
                   * @param {string} one First string.
                   * @param {string} two Second string.
                   * @return {number} The score.
                   * @private
                   */
                  function diff_cleanupSemanticScore_(one, two) {
                    if (!one || !two) {
                      // Edges are the best.
                      return 6;
                    }

                    // Each port of this function behaves slightly differently due to
                    // subtle differences in each language's definition of things like
                    // 'whitespace'.  Since this function's purpose is largely cosmetic,
                    // the choice has been made to use each language's native features
                    // rather than force total conformity.
                    var char1 = one.charAt(one.length - 1);
                    var char2 = two.charAt(0);
                    var nonAlphaNumeric1 = char1.match(
                      diff_match_patch.nonAlphaNumericRegex_
                    );
                    var nonAlphaNumeric2 = char2.match(
                      diff_match_patch.nonAlphaNumericRegex_
                    );
                    var whitespace1 =
                      nonAlphaNumeric1 &&
                      char1.match(diff_match_patch.whitespaceRegex_);
                    var whitespace2 =
                      nonAlphaNumeric2 &&
                      char2.match(diff_match_patch.whitespaceRegex_);
                    var lineBreak1 =
                      whitespace1 &&
                      char1.match(diff_match_patch.linebreakRegex_);
                    var lineBreak2 =
                      whitespace2 &&
                      char2.match(diff_match_patch.linebreakRegex_);
                    var blankLine1 =
                      lineBreak1 &&
                      one.match(diff_match_patch.blanklineEndRegex_);
                    var blankLine2 =
                      lineBreak2 &&
                      two.match(diff_match_patch.blanklineStartRegex_);

                    if (blankLine1 || blankLine2) {
                      // Five points for blank lines.
                      return 5;
                    } else if (lineBreak1 || lineBreak2) {
                      // Four points for line breaks.
                      return 4;
                    } else if (
                      nonAlphaNumeric1 &&
                      !whitespace1 &&
                      whitespace2
                    ) {
                      // Three points for end of sentences.
                      return 3;
                    } else if (whitespace1 || whitespace2) {
                      // Two points for whitespace.
                      return 2;
                    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
                      // One point for non-alphanumeric.
                      return 1;
                    }
                    return 0;
                  }

                  var pointer = 1;
                  // Intentionally ignore the first and last element (don't need checking).
                  while (pointer < diffs.length - 1) {
                    if (
                      diffs[pointer - 1][0] == DIFF_EQUAL &&
                      diffs[pointer + 1][0] == DIFF_EQUAL
                    ) {
                      // This is a single edit surrounded by equalities.
                      var equality1 = diffs[pointer - 1][1];
                      var edit = diffs[pointer][1];
                      var equality2 = diffs[pointer + 1][1];

                      // First, shift the edit as far left as possible.
                      var commonOffset = this.diff_commonSuffix(
                        equality1,
                        edit
                      );
                      if (commonOffset) {
                        var commonString = edit.substring(
                          edit.length - commonOffset
                        );
                        equality1 = equality1.substring(
                          0,
                          equality1.length - commonOffset
                        );
                        edit =
                          commonString +
                          edit.substring(0, edit.length - commonOffset);
                        equality2 = commonString + equality2;
                      }

                      // Second, step character by character right, looking for the best fit.
                      var bestEquality1 = equality1;
                      var bestEdit = edit;
                      var bestEquality2 = equality2;
                      var bestScore =
                        diff_cleanupSemanticScore_(equality1, edit) +
                        diff_cleanupSemanticScore_(edit, equality2);
                      while (edit.charAt(0) === equality2.charAt(0)) {
                        equality1 += edit.charAt(0);
                        edit = edit.substring(1) + equality2.charAt(0);
                        equality2 = equality2.substring(1);
                        var score =
                          diff_cleanupSemanticScore_(equality1, edit) +
                          diff_cleanupSemanticScore_(edit, equality2);
                        // The >= encourages trailing rather than leading whitespace on edits.
                        if (score >= bestScore) {
                          bestScore = score;
                          bestEquality1 = equality1;
                          bestEdit = edit;
                          bestEquality2 = equality2;
                        }
                      }

                      if (diffs[pointer - 1][1] != bestEquality1) {
                        // We have an improvement, save it back to the diff.
                        if (bestEquality1) {
                          diffs[pointer - 1][1] = bestEquality1;
                        } else {
                          diffs.splice(pointer - 1, 1);
                          pointer--;
                        }
                        diffs[pointer][1] = bestEdit;
                        if (bestEquality2) {
                          diffs[pointer + 1][1] = bestEquality2;
                        } else {
                          diffs.splice(pointer + 1, 1);
                          pointer--;
                        }
                      }
                    }
                    pointer++;
                  }
                };

              // Define some regex patterns for matching boundaries.
              diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
              diff_match_patch.whitespaceRegex_ = /\s/;
              diff_match_patch.linebreakRegex_ = /[\r\n]/;
              diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
              diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;

              /**
               * Reduce the number of edits by eliminating operationally trivial equalities.
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               */
              diff_match_patch.prototype.diff_cleanupEfficiency = function (
                diffs
              ) {
                var changes = false;
                var equalities = []; // Stack of indices where equalities are found.
                var equalitiesLength = 0; // Keeping our own length var is faster in JS.
                /** @type {?string} */
                var lastequality = null;
                // Always equal to diffs[equalities[equalitiesLength - 1]][1]
                var pointer = 0; // Index of current position.
                // Is there an insertion operation before the last equality.
                var pre_ins = false;
                // Is there a deletion operation before the last equality.
                var pre_del = false;
                // Is there an insertion operation after the last equality.
                var post_ins = false;
                // Is there a deletion operation after the last equality.
                var post_del = false;
                while (pointer < diffs.length) {
                  if (diffs[pointer][0] == DIFF_EQUAL) {
                    // Equality found.
                    if (
                      diffs[pointer][1].length < this.Diff_EditCost &&
                      (post_ins || post_del)
                    ) {
                      // Candidate found.
                      equalities[equalitiesLength++] = pointer;
                      pre_ins = post_ins;
                      pre_del = post_del;
                      lastequality = diffs[pointer][1];
                    } else {
                      // Not a candidate, and can never become one.
                      equalitiesLength = 0;
                      lastequality = null;
                    }
                    post_ins = post_del = false;
                  } else {
                    // An insertion or deletion.
                    if (diffs[pointer][0] == DIFF_DELETE) {
                      post_del = true;
                    } else {
                      post_ins = true;
                    }
                    /*
                     * Five types to be split:
                     * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
                     * <ins>A</ins>X<ins>C</ins><del>D</del>
                     * <ins>A</ins><del>B</del>X<ins>C</ins>
                     * <ins>A</del>X<ins>C</ins><del>D</del>
                     * <ins>A</ins><del>B</del>X<del>C</del>
                     */
                    if (
                      lastequality &&
                      ((pre_ins && pre_del && post_ins && post_del) ||
                        (lastequality.length < this.Diff_EditCost / 2 &&
                          pre_ins + pre_del + post_ins + post_del == 3))
                    ) {
                      // Duplicate record.
                      diffs.splice(equalities[equalitiesLength - 1], 0, [
                        DIFF_DELETE,
                        lastequality,
                      ]);
                      // Change second copy to insert.
                      diffs[equalities[equalitiesLength - 1] + 1][0] =
                        DIFF_INSERT;
                      equalitiesLength--; // Throw away the equality we just deleted;
                      lastequality = null;
                      if (pre_ins && pre_del) {
                        // No changes made which could affect previous entry, keep going.
                        post_ins = post_del = true;
                        equalitiesLength = 0;
                      } else {
                        equalitiesLength--; // Throw away the previous equality.
                        pointer =
                          equalitiesLength > 0
                            ? equalities[equalitiesLength - 1]
                            : -1;
                        post_ins = post_del = false;
                      }
                      changes = true;
                    }
                  }
                  pointer++;
                }

                if (changes) {
                  this.diff_cleanupMerge(diffs);
                }
              };

              /**
               * Reorder and merge like edit sections.  Merge equalities.
               * Any edit section can move as long as it doesn't cross an equality.
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               */
              diff_match_patch.prototype.diff_cleanupMerge = function (diffs) {
                diffs.push([DIFF_EQUAL, ""]); // Add a dummy entry at the end.
                var pointer = 0;
                var count_delete = 0;
                var count_insert = 0;
                var text_delete = "";
                var text_insert = "";
                var commonlength;
                while (pointer < diffs.length) {
                  switch (diffs[pointer][0]) {
                    case DIFF_INSERT:
                      count_insert++;
                      text_insert += diffs[pointer][1];
                      pointer++;
                      break;
                    case DIFF_DELETE:
                      count_delete++;
                      text_delete += diffs[pointer][1];
                      pointer++;
                      break;
                    case DIFF_EQUAL:
                      // Upon reaching an equality, check for prior redundancies.
                      if (count_delete + count_insert > 1) {
                        if (count_delete !== 0 && count_insert !== 0) {
                          // Factor out any common prefixies.
                          commonlength = this.diff_commonPrefix(
                            text_insert,
                            text_delete
                          );
                          if (commonlength !== 0) {
                            if (
                              pointer - count_delete - count_insert > 0 &&
                              diffs[
                                pointer - count_delete - count_insert - 1
                              ][0] == DIFF_EQUAL
                            ) {
                              diffs[
                                pointer - count_delete - count_insert - 1
                              ][1] += text_insert.substring(0, commonlength);
                            } else {
                              diffs.splice(0, 0, [
                                DIFF_EQUAL,
                                text_insert.substring(0, commonlength),
                              ]);
                              pointer++;
                            }
                            text_insert = text_insert.substring(commonlength);
                            text_delete = text_delete.substring(commonlength);
                          }
                          // Factor out any common suffixies.
                          commonlength = this.diff_commonSuffix(
                            text_insert,
                            text_delete
                          );
                          if (commonlength !== 0) {
                            diffs[pointer][1] =
                              text_insert.substring(
                                text_insert.length - commonlength
                              ) + diffs[pointer][1];
                            text_insert = text_insert.substring(
                              0,
                              text_insert.length - commonlength
                            );
                            text_delete = text_delete.substring(
                              0,
                              text_delete.length - commonlength
                            );
                          }
                        }
                        // Delete the offending records and add the merged ones.
                        if (count_delete === 0) {
                          diffs.splice(
                            pointer - count_insert,
                            count_delete + count_insert,
                            [DIFF_INSERT, text_insert]
                          );
                        } else if (count_insert === 0) {
                          diffs.splice(
                            pointer - count_delete,
                            count_delete + count_insert,
                            [DIFF_DELETE, text_delete]
                          );
                        } else {
                          diffs.splice(
                            pointer - count_delete - count_insert,
                            count_delete + count_insert,
                            [DIFF_DELETE, text_delete],
                            [DIFF_INSERT, text_insert]
                          );
                        }
                        pointer =
                          pointer -
                          count_delete -
                          count_insert +
                          (count_delete ? 1 : 0) +
                          (count_insert ? 1 : 0) +
                          1;
                      } else if (
                        pointer !== 0 &&
                        diffs[pointer - 1][0] == DIFF_EQUAL
                      ) {
                        // Merge this equality with the previous one.
                        diffs[pointer - 1][1] += diffs[pointer][1];
                        diffs.splice(pointer, 1);
                      } else {
                        pointer++;
                      }
                      count_insert = 0;
                      count_delete = 0;
                      text_delete = "";
                      text_insert = "";
                      break;
                  }
                }
                if (diffs[diffs.length - 1][1] === "") {
                  diffs.pop(); // Remove the dummy entry at the end.
                }

                // Second pass: look for single edits surrounded on both sides by equalities
                // which can be shifted sideways to eliminate an equality.
                // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
                var changes = false;
                pointer = 1;
                // Intentionally ignore the first and last element (don't need checking).
                while (pointer < diffs.length - 1) {
                  if (
                    diffs[pointer - 1][0] == DIFF_EQUAL &&
                    diffs[pointer + 1][0] == DIFF_EQUAL
                  ) {
                    // This is a single edit surrounded by equalities.
                    if (
                      diffs[pointer][1].substring(
                        diffs[pointer][1].length - diffs[pointer - 1][1].length
                      ) == diffs[pointer - 1][1]
                    ) {
                      // Shift the edit over the previous equality.
                      diffs[pointer][1] =
                        diffs[pointer - 1][1] +
                        diffs[pointer][1].substring(
                          0,
                          diffs[pointer][1].length -
                            diffs[pointer - 1][1].length
                        );
                      diffs[pointer + 1][1] =
                        diffs[pointer - 1][1] + diffs[pointer + 1][1];
                      diffs.splice(pointer - 1, 1);
                      changes = true;
                    } else if (
                      diffs[pointer][1].substring(
                        0,
                        diffs[pointer + 1][1].length
                      ) == diffs[pointer + 1][1]
                    ) {
                      // Shift the edit over the next equality.
                      diffs[pointer - 1][1] += diffs[pointer + 1][1];
                      diffs[pointer][1] =
                        diffs[pointer][1].substring(
                          diffs[pointer + 1][1].length
                        ) + diffs[pointer + 1][1];
                      diffs.splice(pointer + 1, 1);
                      changes = true;
                    }
                  }
                  pointer++;
                }
                // If shifts were made, the diff needs reordering and another shift sweep.
                if (changes) {
                  this.diff_cleanupMerge(diffs);
                }
              };

              /**
               * loc is a location in text1, compute and return the equivalent location in
               * text2.
               * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               * @param {number} loc Location within text1.
               * @return {number} Location within text2.
               */
              diff_match_patch.prototype.diff_xIndex = function (diffs, loc) {
                var chars1 = 0;
                var chars2 = 0;
                var last_chars1 = 0;
                var last_chars2 = 0;
                var x;
                for (x = 0; x < diffs.length; x++) {
                  if (diffs[x][0] !== DIFF_INSERT) {
                    // Equality or deletion.
                    chars1 += diffs[x][1].length;
                  }
                  if (diffs[x][0] !== DIFF_DELETE) {
                    // Equality or insertion.
                    chars2 += diffs[x][1].length;
                  }
                  if (chars1 > loc) {
                    // Overshot the location.
                    break;
                  }
                  last_chars1 = chars1;
                  last_chars2 = chars2;
                }
                // Was the location was deleted?
                if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
                  return last_chars2;
                }
                // Add the remaining character length.
                return last_chars2 + (loc - last_chars1);
              };

              /**
               * Convert a diff array into a pretty HTML report.
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               * @return {string} HTML representation.
               */
              diff_match_patch.prototype.diff_prettyHtml = function (diffs) {
                var html = [];
                var pattern_amp = /&/g;
                var pattern_lt = /</g;
                var pattern_gt = />/g;
                var pattern_para = /\n/g;
                for (var x = 0; x < diffs.length; x++) {
                  var op = diffs[x][0]; // Operation (insert, delete, equal)
                  var data = diffs[x][1]; // Text of change.
                  var text = data
                    .replace(pattern_amp, "&amp;")
                    .replace(pattern_lt, "&lt;")
                    .replace(pattern_gt, "&gt;")
                    .replace(pattern_para, "&para;<br>");
                  switch (op) {
                    case DIFF_INSERT:
                      html[x] =
                        '<ins style="background:#e6ffe6;">' + text + "</ins>";
                      break;
                    case DIFF_DELETE:
                      html[x] =
                        '<del style="background:#ffe6e6;">' + text + "</del>";
                      break;
                    case DIFF_EQUAL:
                      html[x] = "<span>" + text + "</span>";
                      break;
                  }
                }
                return html.join("");
              };

              /**
               * Compute and return the source text (all equalities and deletions).
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               * @return {string} Source text.
               */
              diff_match_patch.prototype.diff_text1 = function (diffs) {
                var text = [];
                for (var x = 0; x < diffs.length; x++) {
                  if (diffs[x][0] !== DIFF_INSERT) {
                    text[x] = diffs[x][1];
                  }
                }
                return text.join("");
              };

              /**
               * Compute and return the destination text (all equalities and insertions).
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               * @return {string} Destination text.
               */
              diff_match_patch.prototype.diff_text2 = function (diffs) {
                var text = [];
                for (var x = 0; x < diffs.length; x++) {
                  if (diffs[x][0] !== DIFF_DELETE) {
                    text[x] = diffs[x][1];
                  }
                }
                return text.join("");
              };

              /**
               * Compute the Levenshtein distance; the number of inserted, deleted or
               * substituted characters.
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               * @return {number} Number of changes.
               */
              diff_match_patch.prototype.diff_levenshtein = function (diffs) {
                var levenshtein = 0;
                var insertions = 0;
                var deletions = 0;
                for (var x = 0; x < diffs.length; x++) {
                  var op = diffs[x][0];
                  var data = diffs[x][1];
                  switch (op) {
                    case DIFF_INSERT:
                      insertions += data.length;
                      break;
                    case DIFF_DELETE:
                      deletions += data.length;
                      break;
                    case DIFF_EQUAL:
                      // A deletion and an insertion is one substitution.
                      levenshtein += Math.max(insertions, deletions);
                      insertions = 0;
                      deletions = 0;
                      break;
                  }
                }
                levenshtein += Math.max(insertions, deletions);
                return levenshtein;
              };

              /**
               * Crush the diff into an encoded string which describes the operations
               * required to transform text1 into text2.
               * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
               * Operations are tab-separated.  Inserted text is escaped using %xx notation.
               * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
               * @return {string} Delta text.
               */
              diff_match_patch.prototype.diff_toDelta = function (diffs) {
                var text = [];
                for (var x = 0; x < diffs.length; x++) {
                  switch (diffs[x][0]) {
                    case DIFF_INSERT:
                      text[x] = "+" + encodeURI(diffs[x][1]);
                      break;
                    case DIFF_DELETE:
                      text[x] = "-" + diffs[x][1].length;
                      break;
                    case DIFF_EQUAL:
                      text[x] = "=" + diffs[x][1].length;
                      break;
                  }
                }
                return text.join("\t").replace(/%20/g, " ");
              };

              /**
               * Given the original text1, and an encoded string which describes the
               * operations required to transform text1 into text2, compute the full diff.
               * @param {string} text1 Source string for the diff.
               * @param {string} delta Delta text.
               * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
               * @throws {!Error} If invalid input.
               */
              diff_match_patch.prototype.diff_fromDelta = function (
                text1,
                delta
              ) {
                var diffs = [];
                var diffsLength = 0; // Keeping our own length var is faster in JS.
                var pointer = 0; // Cursor in text1
                var tokens = delta.split(/\t/g);
                for (var x = 0; x < tokens.length; x++) {
                  // Each token begins with a one character parameter which specifies the
                  // operation of this token (delete, insert, equality).
                  var param = tokens[x].substring(1);
                  switch (tokens[x].charAt(0)) {
                    case "+":
                      try {
                        diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];
                      } catch (ex) {
                        // Malformed URI sequence.
                        throw new Error(
                          "Illegal escape in diff_fromDelta: " + param
                        );
                      }
                      break;
                    case "-":
                    // Fall through.
                    case "=":
                      var n = parseInt(param, 10);
                      if (isNaN(n) || n < 0) {
                        throw new Error(
                          "Invalid number in diff_fromDelta: " + param
                        );
                      }
                      var text = text1.substring(pointer, (pointer += n));
                      if (tokens[x].charAt(0) == "=") {
                        diffs[diffsLength++] = [DIFF_EQUAL, text];
                      } else {
                        diffs[diffsLength++] = [DIFF_DELETE, text];
                      }
                      break;
                    default:
                      // Blank tokens are ok (from a trailing \t).
                      // Anything else is an error.
                      if (tokens[x]) {
                        throw new Error(
                          "Invalid diff operation in diff_fromDelta: " +
                            tokens[x]
                        );
                      }
                  }
                }
                if (pointer != text1.length) {
                  throw new Error(
                    "Delta length (" +
                      pointer +
                      ") does not equal source text length (" +
                      text1.length +
                      ")."
                  );
                }
                return diffs;
              };

              //  MATCH FUNCTIONS

              /**
               * Locate the best instance of 'pattern' in 'text' near 'loc'.
               * @param {string} text The text to search.
               * @param {string} pattern The pattern to search for.
               * @param {number} loc The location to search around.
               * @return {number} Best match index or -1.
               */
              diff_match_patch.prototype.match_main = function (
                text,
                pattern,
                loc
              ) {
                // Check for null inputs.
                if (text == null || pattern == null || loc == null) {
                  throw new Error("Null input. (match_main)");
                }

                loc = Math.max(0, Math.min(loc, text.length));
                if (text == pattern) {
                  // Shortcut (potentially not guaranteed by the algorithm)
                  return 0;
                } else if (!text.length) {
                  // Nothing to match.
                  return -1;
                } else if (
                  text.substring(loc, loc + pattern.length) == pattern
                ) {
                  // Perfect match at the perfect spot!  (Includes case of null pattern)
                  return loc;
                } else {
                  // Do a fuzzy compare.
                  return this.match_bitap_(text, pattern, loc);
                }
              };

              /**
               * Locate the best instance of 'pattern' in 'text' near 'loc' using the
               * Bitap algorithm.
               * @param {string} text The text to search.
               * @param {string} pattern The pattern to search for.
               * @param {number} loc The location to search around.
               * @return {number} Best match index or -1.
               * @private
               */
              diff_match_patch.prototype.match_bitap_ = function (
                text,
                pattern,
                loc
              ) {
                if (pattern.length > this.Match_MaxBits) {
                  throw new Error("Pattern too long for this browser.");
                }

                // Initialise the alphabet.
                var s = this.match_alphabet_(pattern);

                var dmp = this; // 'this' becomes 'window' in a closure.

                /**
                 * Compute and return the score for a match with e errors and x location.
                 * Accesses loc and pattern through being a closure.
                 * @param {number} e Number of errors in match.
                 * @param {number} x Location of match.
                 * @return {number} Overall score for match (0.0 = good, 1.0 = bad).
                 * @private
                 */
                function match_bitapScore_(e, x) {
                  var accuracy = e / pattern.length;
                  var proximity = Math.abs(loc - x);
                  if (!dmp.Match_Distance) {
                    // Dodge divide by zero error.
                    return proximity ? 1.0 : accuracy;
                  }
                  return accuracy + proximity / dmp.Match_Distance;
                }

                // Highest score beyond which we give up.
                var score_threshold = this.Match_Threshold;
                // Is there a nearby exact match? (speedup)
                var best_loc = text.indexOf(pattern, loc);
                if (best_loc != -1) {
                  score_threshold = Math.min(
                    match_bitapScore_(0, best_loc),
                    score_threshold
                  );
                  // What about in the other direction? (speedup)
                  best_loc = text.lastIndexOf(pattern, loc + pattern.length);
                  if (best_loc != -1) {
                    score_threshold = Math.min(
                      match_bitapScore_(0, best_loc),
                      score_threshold
                    );
                  }
                }

                // Initialise the bit arrays.
                var matchmask = 1 << (pattern.length - 1);
                best_loc = -1;

                var bin_min, bin_mid;
                var bin_max = pattern.length + text.length;
                var last_rd;
                for (var d = 0; d < pattern.length; d++) {
                  // Scan for the best match; each iteration allows for one more error.
                  // Run a binary search to determine how far from 'loc' we can stray at this
                  // error level.
                  bin_min = 0;
                  bin_mid = bin_max;
                  while (bin_min < bin_mid) {
                    if (
                      match_bitapScore_(d, loc + bin_mid) <= score_threshold
                    ) {
                      bin_min = bin_mid;
                    } else {
                      bin_max = bin_mid;
                    }
                    bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
                  }
                  // Use the result from this iteration as the maximum for the next.
                  bin_max = bin_mid;
                  var start = Math.max(1, loc - bin_mid + 1);
                  var finish =
                    Math.min(loc + bin_mid, text.length) + pattern.length;

                  var rd = Array(finish + 2);
                  rd[finish + 1] = (1 << d) - 1;
                  for (var j = finish; j >= start; j--) {
                    // The alphabet (s) is a sparse hash, so the following line generates
                    // warnings.
                    var charMatch = s[text.charAt(j - 1)];
                    if (d === 0) {
                      // First pass: exact match.
                      rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
                    } else {
                      // Subsequent passes: fuzzy match.
                      rd[j] =
                        (((rd[j + 1] << 1) | 1) & charMatch) |
                        (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |
                        last_rd[j + 1];
                    }
                    if (rd[j] & matchmask) {
                      var score = match_bitapScore_(d, j - 1);
                      // This match will almost certainly be better than any existing match.
                      // But check anyway.
                      if (score <= score_threshold) {
                        // Told you so.
                        score_threshold = score;
                        best_loc = j - 1;
                        if (best_loc > loc) {
                          // When passing loc, don't exceed our current distance from loc.
                          start = Math.max(1, 2 * loc - best_loc);
                        } else {
                          // Already passed loc, downhill from here on in.
                          break;
                        }
                      }
                    }
                  }
                  // No hope for a (better) match at greater error levels.
                  if (match_bitapScore_(d + 1, loc) > score_threshold) {
                    break;
                  }
                  last_rd = rd;
                }
                return best_loc;
              };

              /**
               * Initialise the alphabet for the Bitap algorithm.
               * @param {string} pattern The text to encode.
               * @return {!Object} Hash of character locations.
               * @private
               */
              diff_match_patch.prototype.match_alphabet_ = function (pattern) {
                var s = {};
                for (var i = 0; i < pattern.length; i++) {
                  s[pattern.charAt(i)] = 0;
                }
                for (var i = 0; i < pattern.length; i++) {
                  s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);
                }
                return s;
              };

              //  PATCH FUNCTIONS

              /**
               * Increase the context until it is unique,
               * but don't let the pattern expand beyond Match_MaxBits.
               * @param {!diff_match_patch.patch_obj} patch The patch to grow.
               * @param {string} text Source text.
               * @private
               */
              diff_match_patch.prototype.patch_addContext_ = function (
                patch,
                text
              ) {
                if (text.length == 0) {
                  return;
                }
                var pattern = text.substring(
                  patch.start2,
                  patch.start2 + patch.length1
                );
                var padding = 0;

                // Look for the first and last matches of pattern in text.  If two different
                // matches are found, increase the pattern length.
                while (
                  text.indexOf(pattern) != text.lastIndexOf(pattern) &&
                  pattern.length <
                    this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin
                ) {
                  padding += this.Patch_Margin;
                  pattern = text.substring(
                    patch.start2 - padding,
                    patch.start2 + patch.length1 + padding
                  );
                }
                // Add one chunk for good luck.
                padding += this.Patch_Margin;

                // Add the prefix.
                var prefix = text.substring(
                  patch.start2 - padding,
                  patch.start2
                );
                if (prefix) {
                  patch.diffs.unshift([DIFF_EQUAL, prefix]);
                }
                // Add the suffix.
                var suffix = text.substring(
                  patch.start2 + patch.length1,
                  patch.start2 + patch.length1 + padding
                );
                if (suffix) {
                  patch.diffs.push([DIFF_EQUAL, suffix]);
                }

                // Roll back the start points.
                patch.start1 -= prefix.length;
                patch.start2 -= prefix.length;
                // Extend the lengths.
                patch.length1 += prefix.length + suffix.length;
                patch.length2 += prefix.length + suffix.length;
              };

              /**
               * Compute a list of patches to turn text1 into text2.
               * Use diffs if provided, otherwise compute it ourselves.
               * There are four ways to call this function, depending on what data is
               * available to the caller:
               * Method 1:
               * a = text1, b = text2
               * Method 2:
               * a = diffs
               * Method 3 (optimal):
               * a = text1, b = diffs
               * Method 4 (deprecated, use method 3):
               * a = text1, b = text2, c = diffs
               *
               * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or
               * Array of diff tuples for text1 to text2 (method 2).
               * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or
               * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
               * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples
               * for text1 to text2 (method 4) or undefined (methods 1,2,3).
               * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
               */
              diff_match_patch.prototype.patch_make = function (
                a,
                opt_b,
                opt_c
              ) {
                var text1, diffs;
                if (
                  typeof a == "string" &&
                  typeof opt_b == "string" &&
                  typeof opt_c == "undefined"
                ) {
                  // Method 1: text1, text2
                  // Compute diffs from text1 and text2.
                  text1 = /** @type {string} */ (a);
                  diffs = this.diff_main(
                    text1,
                    /** @type {string} */ (opt_b),
                    true
                  );
                  if (diffs.length > 2) {
                    this.diff_cleanupSemantic(diffs);
                    this.diff_cleanupEfficiency(diffs);
                  }
                } else if (
                  a &&
                  typeof a == "object" &&
                  typeof opt_b == "undefined" &&
                  typeof opt_c == "undefined"
                ) {
                  // Method 2: diffs
                  // Compute text1 from diffs.
                  diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ (a);
                  text1 = this.diff_text1(diffs);
                } else if (
                  typeof a == "string" &&
                  opt_b &&
                  typeof opt_b == "object" &&
                  typeof opt_c == "undefined"
                ) {
                  // Method 3: text1, diffs
                  text1 = /** @type {string} */ (a);
                  diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ (
                    opt_b
                  );
                } else if (
                  typeof a == "string" &&
                  typeof opt_b == "string" &&
                  opt_c &&
                  typeof opt_c == "object"
                ) {
                  // Method 4: text1, text2, diffs
                  // text2 is not used.
                  text1 = /** @type {string} */ (a);
                  diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ (
                    opt_c
                  );
                } else {
                  throw new Error("Unknown call format to patch_make.");
                }

                if (diffs.length === 0) {
                  return []; // Get rid of the null case.
                }
                var patches = [];
                var patch = new diff_match_patch.patch_obj();
                var patchDiffLength = 0; // Keeping our own length var is faster in JS.
                var char_count1 = 0; // Number of characters into the text1 string.
                var char_count2 = 0; // Number of characters into the text2 string.
                // Start with text1 (prepatch_text) and apply the diffs until we arrive at
                // text2 (postpatch_text).  We recreate the patches one by one to determine
                // context info.
                var prepatch_text = text1;
                var postpatch_text = text1;
                for (var x = 0; x < diffs.length; x++) {
                  var diff_type = diffs[x][0];
                  var diff_text = diffs[x][1];

                  if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
                    // A new patch starts here.
                    patch.start1 = char_count1;
                    patch.start2 = char_count2;
                  }

                  switch (diff_type) {
                    case DIFF_INSERT:
                      patch.diffs[patchDiffLength++] = diffs[x];
                      patch.length2 += diff_text.length;
                      postpatch_text =
                        postpatch_text.substring(0, char_count2) +
                        diff_text +
                        postpatch_text.substring(char_count2);
                      break;
                    case DIFF_DELETE:
                      patch.length1 += diff_text.length;
                      patch.diffs[patchDiffLength++] = diffs[x];
                      postpatch_text =
                        postpatch_text.substring(0, char_count2) +
                        postpatch_text.substring(
                          char_count2 + diff_text.length
                        );
                      break;
                    case DIFF_EQUAL:
                      if (
                        diff_text.length <= 2 * this.Patch_Margin &&
                        patchDiffLength &&
                        diffs.length != x + 1
                      ) {
                        // Small equality inside a patch.
                        patch.diffs[patchDiffLength++] = diffs[x];
                        patch.length1 += diff_text.length;
                        patch.length2 += diff_text.length;
                      } else if (diff_text.length >= 2 * this.Patch_Margin) {
                        // Time for a new patch.
                        if (patchDiffLength) {
                          this.patch_addContext_(patch, prepatch_text);
                          patches.push(patch);
                          patch = new diff_match_patch.patch_obj();
                          patchDiffLength = 0;
                          // Unlike Unidiff, our patch lists have a rolling context.
                          // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff
                          // Update prepatch text & pos to reflect the application of the
                          // just completed patch.
                          prepatch_text = postpatch_text;
                          char_count1 = char_count2;
                        }
                      }
                      break;
                  }

                  // Update the current character count.
                  if (diff_type !== DIFF_INSERT) {
                    char_count1 += diff_text.length;
                  }
                  if (diff_type !== DIFF_DELETE) {
                    char_count2 += diff_text.length;
                  }
                }
                // Pick up the leftover patch if not empty.
                if (patchDiffLength) {
                  this.patch_addContext_(patch, prepatch_text);
                  patches.push(patch);
                }

                return patches;
              };

              /**
               * Given an array of patches, return another array that is identical.
               * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
               * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
               */
              diff_match_patch.prototype.patch_deepCopy = function (patches) {
                // Making deep copies is hard in JavaScript.
                var patchesCopy = [];
                for (var x = 0; x < patches.length; x++) {
                  var patch = patches[x];
                  var patchCopy = new diff_match_patch.patch_obj();
                  patchCopy.diffs = [];
                  for (var y = 0; y < patch.diffs.length; y++) {
                    patchCopy.diffs[y] = patch.diffs[y].slice();
                  }
                  patchCopy.start1 = patch.start1;
                  patchCopy.start2 = patch.start2;
                  patchCopy.length1 = patch.length1;
                  patchCopy.length2 = patch.length2;
                  patchesCopy[x] = patchCopy;
                }
                return patchesCopy;
              };

              /**
               * Merge a set of patches onto the text.  Return a patched text, as well
               * as a list of true/false values indicating which patches were applied.
               * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
               * @param {string} text Old text.
               * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the
               *      new text and an array of boolean values.
               */
              diff_match_patch.prototype.patch_apply = function (
                patches,
                text
              ) {
                if (patches.length == 0) {
                  return [text, []];
                }

                // Deep copy the patches so that no changes are made to originals.
                patches = this.patch_deepCopy(patches);

                var nullPadding = this.patch_addPadding(patches);
                text = nullPadding + text + nullPadding;

                this.patch_splitMax(patches);
                // delta keeps track of the offset between the expected and actual location
                // of the previous patch.  If there are patches expected at positions 10 and
                // 20, but the first patch was found at 12, delta is 2 and the second patch
                // has an effective expected position of 22.
                var delta = 0;
                var results = [];
                for (var x = 0; x < patches.length; x++) {
                  var expected_loc = patches[x].start2 + delta;
                  var text1 = this.diff_text1(patches[x].diffs);
                  var start_loc;
                  var end_loc = -1;
                  if (text1.length > this.Match_MaxBits) {
                    // patch_splitMax will only provide an oversized pattern in the case of
                    // a monster delete.
                    start_loc = this.match_main(
                      text,
                      text1.substring(0, this.Match_MaxBits),
                      expected_loc
                    );
                    if (start_loc != -1) {
                      end_loc = this.match_main(
                        text,
                        text1.substring(text1.length - this.Match_MaxBits),
                        expected_loc + text1.length - this.Match_MaxBits
                      );
                      if (end_loc == -1 || start_loc >= end_loc) {
                        // Can't find valid trailing context.  Drop this patch.
                        start_loc = -1;
                      }
                    }
                  } else {
                    start_loc = this.match_main(text, text1, expected_loc);
                  }
                  if (start_loc == -1) {
                    // No match found.  :(
                    results[x] = false;
                    // Subtract the delta for this failed patch from subsequent patches.
                    delta -= patches[x].length2 - patches[x].length1;
                  } else {
                    // Found a match.  :)
                    results[x] = true;
                    delta = start_loc - expected_loc;
                    var text2;
                    if (end_loc == -1) {
                      text2 = text.substring(
                        start_loc,
                        start_loc + text1.length
                      );
                    } else {
                      text2 = text.substring(
                        start_loc,
                        end_loc + this.Match_MaxBits
                      );
                    }
                    if (text1 == text2) {
                      // Perfect match, just shove the replacement text in.
                      text =
                        text.substring(0, start_loc) +
                        this.diff_text2(patches[x].diffs) +
                        text.substring(start_loc + text1.length);
                    } else {
                      // Imperfect match.  Run a diff to get a framework of equivalent
                      // indices.
                      var diffs = this.diff_main(text1, text2, false);
                      if (
                        text1.length > this.Match_MaxBits &&
                        this.diff_levenshtein(diffs) / text1.length >
                          this.Patch_DeleteThreshold
                      ) {
                        // The end points match, but the content is unacceptably bad.
                        results[x] = false;
                      } else {
                        this.diff_cleanupSemanticLossless(diffs);
                        var index1 = 0;
                        var index2;
                        for (var y = 0; y < patches[x].diffs.length; y++) {
                          var mod = patches[x].diffs[y];
                          if (mod[0] !== DIFF_EQUAL) {
                            index2 = this.diff_xIndex(diffs, index1);
                          }
                          if (mod[0] === DIFF_INSERT) {
                            // Insertion
                            text =
                              text.substring(0, start_loc + index2) +
                              mod[1] +
                              text.substring(start_loc + index2);
                          } else if (mod[0] === DIFF_DELETE) {
                            // Deletion
                            text =
                              text.substring(0, start_loc + index2) +
                              text.substring(
                                start_loc +
                                  this.diff_xIndex(
                                    diffs,
                                    index1 + mod[1].length
                                  )
                              );
                          }
                          if (mod[0] !== DIFF_DELETE) {
                            index1 += mod[1].length;
                          }
                        }
                      }
                    }
                  }
                }
                // Strip the padding off.
                text = text.substring(
                  nullPadding.length,
                  text.length - nullPadding.length
                );
                return [text, results];
              };

              /**
               * Add some padding on text start and end so that edges can match something.
               * Intended to be called only from within patch_apply.
               * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
               * @return {string} The padding string added to each side.
               */
              diff_match_patch.prototype.patch_addPadding = function (patches) {
                var paddingLength = this.Patch_Margin;
                var nullPadding = "";
                for (var x = 1; x <= paddingLength; x++) {
                  nullPadding += String.fromCharCode(x);
                }

                // Bump all the patches forward.
                for (var x = 0; x < patches.length; x++) {
                  patches[x].start1 += paddingLength;
                  patches[x].start2 += paddingLength;
                }

                // Add some padding on start of first diff.
                var patch = patches[0];
                var diffs = patch.diffs;
                if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
                  // Add nullPadding equality.
                  diffs.unshift([DIFF_EQUAL, nullPadding]);
                  patch.start1 -= paddingLength; // Should be 0.
                  patch.start2 -= paddingLength; // Should be 0.
                  patch.length1 += paddingLength;
                  patch.length2 += paddingLength;
                } else if (paddingLength > diffs[0][1].length) {
                  // Grow first equality.
                  var extraLength = paddingLength - diffs[0][1].length;
                  diffs[0][1] =
                    nullPadding.substring(diffs[0][1].length) + diffs[0][1];
                  patch.start1 -= extraLength;
                  patch.start2 -= extraLength;
                  patch.length1 += extraLength;
                  patch.length2 += extraLength;
                }

                // Add some padding on end of last diff.
                patch = patches[patches.length - 1];
                diffs = patch.diffs;
                if (
                  diffs.length == 0 ||
                  diffs[diffs.length - 1][0] != DIFF_EQUAL
                ) {
                  // Add nullPadding equality.
                  diffs.push([DIFF_EQUAL, nullPadding]);
                  patch.length1 += paddingLength;
                  patch.length2 += paddingLength;
                } else if (paddingLength > diffs[diffs.length - 1][1].length) {
                  // Grow last equality.
                  var extraLength =
                    paddingLength - diffs[diffs.length - 1][1].length;
                  diffs[diffs.length - 1][1] += nullPadding.substring(
                    0,
                    extraLength
                  );
                  patch.length1 += extraLength;
                  patch.length2 += extraLength;
                }

                return nullPadding;
              };

              /**
               * Look through the patches and break up any which are longer than the maximum
               * limit of the match algorithm.
               * Intended to be called only from within patch_apply.
               * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
               */
              diff_match_patch.prototype.patch_splitMax = function (patches) {
                var patch_size = this.Match_MaxBits;
                for (var x = 0; x < patches.length; x++) {
                  if (patches[x].length1 <= patch_size) {
                    continue;
                  }
                  var bigpatch = patches[x];
                  // Remove the big old patch.
                  patches.splice(x--, 1);
                  var start1 = bigpatch.start1;
                  var start2 = bigpatch.start2;
                  var precontext = "";
                  while (bigpatch.diffs.length !== 0) {
                    // Create one of several smaller patches.
                    var patch = new diff_match_patch.patch_obj();
                    var empty = true;
                    patch.start1 = start1 - precontext.length;
                    patch.start2 = start2 - precontext.length;
                    if (precontext !== "") {
                      patch.length1 = patch.length2 = precontext.length;
                      patch.diffs.push([DIFF_EQUAL, precontext]);
                    }
                    while (
                      bigpatch.diffs.length !== 0 &&
                      patch.length1 < patch_size - this.Patch_Margin
                    ) {
                      var diff_type = bigpatch.diffs[0][0];
                      var diff_text = bigpatch.diffs[0][1];
                      if (diff_type === DIFF_INSERT) {
                        // Insertions are harmless.
                        patch.length2 += diff_text.length;
                        start2 += diff_text.length;
                        patch.diffs.push(bigpatch.diffs.shift());
                        empty = false;
                      } else if (
                        diff_type === DIFF_DELETE &&
                        patch.diffs.length == 1 &&
                        patch.diffs[0][0] == DIFF_EQUAL &&
                        diff_text.length > 2 * patch_size
                      ) {
                        // This is a large deletion.  Let it pass in one chunk.
                        patch.length1 += diff_text.length;
                        start1 += diff_text.length;
                        empty = false;
                        patch.diffs.push([diff_type, diff_text]);
                        bigpatch.diffs.shift();
                      } else {
                        // Deletion or equality.  Only take as much as we can stomach.
                        diff_text = diff_text.substring(
                          0,
                          patch_size - patch.length1 - this.Patch_Margin
                        );
                        patch.length1 += diff_text.length;
                        start1 += diff_text.length;
                        if (diff_type === DIFF_EQUAL) {
                          patch.length2 += diff_text.length;
                          start2 += diff_text.length;
                        } else {
                          empty = false;
                        }
                        patch.diffs.push([diff_type, diff_text]);
                        if (diff_text == bigpatch.diffs[0][1]) {
                          bigpatch.diffs.shift();
                        } else {
                          bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(
                            diff_text.length
                          );
                        }
                      }
                    }
                    // Compute the head context for the next patch.
                    precontext = this.diff_text2(patch.diffs);
                    precontext = precontext.substring(
                      precontext.length - this.Patch_Margin
                    );
                    // Append the end context for this patch.
                    var postcontext = this.diff_text1(bigpatch.diffs).substring(
                      0,
                      this.Patch_Margin
                    );
                    if (postcontext !== "") {
                      patch.length1 += postcontext.length;
                      patch.length2 += postcontext.length;
                      if (
                        patch.diffs.length !== 0 &&
                        patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL
                      ) {
                        patch.diffs[patch.diffs.length - 1][1] += postcontext;
                      } else {
                        patch.diffs.push([DIFF_EQUAL, postcontext]);
                      }
                    }
                    if (!empty) {
                      patches.splice(++x, 0, patch);
                    }
                  }
                }
              };

              /**
               * Take a list of patches and return a textual representation.
               * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
               * @return {string} Text representation of patches.
               */
              diff_match_patch.prototype.patch_toText = function (patches) {
                var text = [];
                for (var x = 0; x < patches.length; x++) {
                  text[x] = patches[x];
                }
                return text.join("");
              };

              /**
               * Parse a textual representation of patches and return a list of Patch objects.
               * @param {string} textline Text representation of patches.
               * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
               * @throws {!Error} If invalid input.
               */
              diff_match_patch.prototype.patch_fromText = function (textline) {
                var patches = [];
                if (!textline) {
                  return patches;
                }
                var text = textline.split("\n");
                var textPointer = 0;
                var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
                while (textPointer < text.length) {
                  var m = text[textPointer].match(patchHeader);
                  if (!m) {
                    throw new Error(
                      "Invalid patch string: " + text[textPointer]
                    );
                  }
                  var patch = new diff_match_patch.patch_obj();
                  patches.push(patch);
                  patch.start1 = parseInt(m[1], 10);
                  if (m[2] === "") {
                    patch.start1--;
                    patch.length1 = 1;
                  } else if (m[2] == "0") {
                    patch.length1 = 0;
                  } else {
                    patch.start1--;
                    patch.length1 = parseInt(m[2], 10);
                  }

                  patch.start2 = parseInt(m[3], 10);
                  if (m[4] === "") {
                    patch.start2--;
                    patch.length2 = 1;
                  } else if (m[4] == "0") {
                    patch.length2 = 0;
                  } else {
                    patch.start2--;
                    patch.length2 = parseInt(m[4], 10);
                  }
                  textPointer++;

                  while (textPointer < text.length) {
                    var sign = text[textPointer].charAt(0);
                    try {
                      var line = decodeURI(text[textPointer].substring(1));
                    } catch (ex) {
                      // Malformed URI sequence.
                      throw new Error(
                        "Illegal escape in patch_fromText: " + line
                      );
                    }
                    if (sign == "-") {
                      // Deletion.
                      patch.diffs.push([DIFF_DELETE, line]);
                    } else if (sign == "+") {
                      // Insertion.
                      patch.diffs.push([DIFF_INSERT, line]);
                    } else if (sign == " ") {
                      // Minor equality.
                      patch.diffs.push([DIFF_EQUAL, line]);
                    } else if (sign == "@") {
                      // Start of next patch.
                      break;
                    } else if (sign === "") {
                      // Blank line?  Whatever.
                    } else {
                      // WTF?
                      throw new Error(
                        'Invalid patch mode "' + sign + '" in: ' + line
                      );
                    }
                    textPointer++;
                  }
                }
                return patches;
              };

              /**
               * Class representing one patch operation.
               * @constructor
               */
              diff_match_patch.patch_obj = function () {
                /** @type {!Array.<!diff_match_patch.Diff>} */
                this.diffs = [];
                /** @type {?number} */
                this.start1 = null;
                /** @type {?number} */
                this.start2 = null;
                /** @type {number} */
                this.length1 = 0;
                /** @type {number} */
                this.length2 = 0;
              };

              /**
               * Emmulate GNU diff's format.
               * Header: @@ -382,8 +481,9 @@
               * Indicies are printed as 1-based, not 0-based.
               * @return {string} The GNU diff string.
               */
              diff_match_patch.patch_obj.prototype.toString = function () {
                var coords1, coords2;
                if (this.length1 === 0) {
                  coords1 = this.start1 + ",0";
                } else if (this.length1 == 1) {
                  coords1 = this.start1 + 1;
                } else {
                  coords1 = this.start1 + 1 + "," + this.length1;
                }
                if (this.length2 === 0) {
                  coords2 = this.start2 + ",0";
                } else if (this.length2 == 1) {
                  coords2 = this.start2 + 1;
                } else {
                  coords2 = this.start2 + 1 + "," + this.length2;
                }
                var text = ["@@ -" + coords1 + " +" + coords2 + " @@\n"];
                var op;
                // Escape the body of the patch with %xx notation.
                for (var x = 0; x < this.diffs.length; x++) {
                  switch (this.diffs[x][0]) {
                    case DIFF_INSERT:
                      op = "+";
                      break;
                    case DIFF_DELETE:
                      op = "-";
                      break;
                    case DIFF_EQUAL:
                      op = " ";
                      break;
                  }
                  text[x + 1] = op + encodeURI(this.diffs[x][1]) + "\n";
                }
                return text.join("").replace(/%20/g, " ");
              };

              // The following export code was added by @ForbesLindesay
              module.exports = diff_match_patch;
              module.exports["diff_match_patch"] = diff_match_patch;
              module.exports["DIFF_DELETE"] = DIFF_DELETE;
              module.exports["DIFF_INSERT"] = DIFF_INSERT;
              module.exports["DIFF_EQUAL"] = DIFF_EQUAL;
            });

            /* global diff_match_patch */
            var TEXT_DIFF = 2;
            var DEFAULT_MIN_LENGTH = 60;
            var cachedDiffPatch = null;

            var getDiffMatchPatch = function getDiffMatchPatch(required) {
              /* jshint camelcase: false */

              if (!cachedDiffPatch) {
                var instance = void 0;
                /* eslint-disable camelcase, new-cap */
                if (typeof diff_match_patch !== "undefined") {
                  // already loaded, probably a browser
                  instance =
                    typeof diff_match_patch === "function"
                      ? new diff_match_patch()
                      : new diff_match_patch.diff_match_patch();
                } else if (diffMatchPatch) {
                  try {
                    instance = diffMatchPatch && new diffMatchPatch();
                  } catch (err) {
                    instance = null;
                  }
                }
                /* eslint-enable camelcase, new-cap */
                if (!instance) {
                  if (!required) {
                    return null;
                  }
                  var error = new Error(
                    "text diff_match_patch library not found"
                  );
                  // eslint-disable-next-line camelcase
                  error.diff_match_patch_not_found = true;
                  throw error;
                }
                cachedDiffPatch = {
                  diff: function diff(txt1, txt2) {
                    return instance.patch_toText(
                      instance.patch_make(txt1, txt2)
                    );
                  },
                  patch: function patch(txt1, _patch) {
                    var results = instance.patch_apply(
                      instance.patch_fromText(_patch),
                      txt1
                    );
                    for (var i = 0; i < results[1].length; i++) {
                      if (!results[1][i]) {
                        var _error = new Error("text patch failed");
                        _error.textPatchFailed = true;
                      }
                    }
                    return results[0];
                  },
                };
              }
              return cachedDiffPatch;
            };

            var diffFilter$3 = function textsDiffFilter(context) {
              if (context.leftType !== "string") {
                return;
              }
              var minLength =
                (context.options &&
                  context.options.textDiff &&
                  context.options.textDiff.minLength) ||
                DEFAULT_MIN_LENGTH;
              if (
                context.left.length < minLength ||
                context.right.length < minLength
              ) {
                context.setResult([context.left, context.right]).exit();
                return;
              }
              // large text, try to use a text-diff algorithm
              var diffMatchPatch$$1 = getDiffMatchPatch();
              if (!diffMatchPatch$$1) {
                // diff-match-patch library not available,
                // fallback to regular string replace
                context.setResult([context.left, context.right]).exit();
                return;
              }
              var diff = diffMatchPatch$$1.diff;
              context
                .setResult([diff(context.left, context.right), 0, TEXT_DIFF])
                .exit();
            };
            diffFilter$3.filterName = "texts";

            var patchFilter$3 = function textsPatchFilter(context) {
              if (context.nested) {
                return;
              }
              if (context.delta[2] !== TEXT_DIFF) {
                return;
              }

              // text-diff, use a text-patch algorithm
              var patch = getDiffMatchPatch(true).patch;
              context.setResult(patch(context.left, context.delta[0])).exit();
            };
            patchFilter$3.filterName = "texts";

            var textDeltaReverse = function textDeltaReverse(delta) {
              var i = void 0;
              var l = void 0;
              var lines = void 0;
              var line = void 0;
              var lineTmp = void 0;
              var header = null;
              var headerRegex = /^@@ +-(\d+),(\d+) +\+(\d+),(\d+) +@@$/;
              var lineHeader = void 0;
              lines = delta.split("\n");
              for (i = 0, l = lines.length; i < l; i++) {
                line = lines[i];
                var lineStart = line.slice(0, 1);
                if (lineStart === "@") {
                  header = headerRegex.exec(line);
                  lineHeader = i;

                  // fix header
                  lines[lineHeader] =
                    "@@ -" +
                    header[3] +
                    "," +
                    header[4] +
                    " +" +
                    header[1] +
                    "," +
                    header[2] +
                    " @@";
                } else if (lineStart === "+") {
                  lines[i] = "-" + lines[i].slice(1);
                  if (lines[i - 1].slice(0, 1) === "+") {
                    // swap lines to keep default order (-+)
                    lineTmp = lines[i];
                    lines[i] = lines[i - 1];
                    lines[i - 1] = lineTmp;
                  }
                } else if (lineStart === "-") {
                  lines[i] = "+" + lines[i].slice(1);
                }
              }
              return lines.join("\n");
            };

            var reverseFilter$3 = function textsReverseFilter(context) {
              if (context.nested) {
                return;
              }
              if (context.delta[2] !== TEXT_DIFF) {
                return;
              }

              // text-diff, use a text-diff algorithm
              context
                .setResult([textDeltaReverse(context.delta[0]), 0, TEXT_DIFF])
                .exit();
            };
            reverseFilter$3.filterName = "texts";

            var DiffPatcher = (function () {
              function DiffPatcher(options) {
                classCallCheck(this, DiffPatcher);

                this.processor = new Processor(options);
                this.processor.pipe(
                  new Pipe("diff")
                    .append(
                      collectChildrenDiffFilter,
                      diffFilter,
                      diffFilter$2,
                      diffFilter$3,
                      objectsDiffFilter,
                      diffFilter$1
                    )
                    .shouldHaveResult()
                );
                this.processor.pipe(
                  new Pipe("patch")
                    .append(
                      collectChildrenPatchFilter,
                      collectChildrenPatchFilter$1,
                      patchFilter,
                      patchFilter$3,
                      patchFilter$1,
                      patchFilter$2
                    )
                    .shouldHaveResult()
                );
                this.processor.pipe(
                  new Pipe("reverse")
                    .append(
                      collectChildrenReverseFilter,
                      collectChildrenReverseFilter$1,
                      reverseFilter,
                      reverseFilter$3,
                      reverseFilter$1,
                      reverseFilter$2
                    )
                    .shouldHaveResult()
                );
              }

              createClass(DiffPatcher, [
                {
                  key: "options",
                  value: function options() {
                    var _processor;

                    return (_processor = this.processor).options.apply(
                      _processor,
                      arguments
                    );
                  },
                },
                {
                  key: "diff",
                  value: function diff(left, right) {
                    return this.processor.process(new DiffContext(left, right));
                  },
                },
                {
                  key: "patch",
                  value: function patch(left, delta) {
                    return this.processor.process(
                      new PatchContext(left, delta)
                    );
                  },
                },
                {
                  key: "reverse",
                  value: function reverse(delta) {
                    return this.processor.process(new ReverseContext(delta));
                  },
                },
                {
                  key: "unpatch",
                  value: function unpatch(right, delta) {
                    return this.patch(right, this.reverse(delta));
                  },
                },
                {
                  key: "clone",
                  value: function clone$$1(value) {
                    return clone(value);
                  },
                },
              ]);
              return DiffPatcher;
            })();

            var isArray$3 =
              typeof Array.isArray === "function"
                ? Array.isArray
                : function (a) {
                    return a instanceof Array;
                  };

            var getObjectKeys =
              typeof Object.keys === "function"
                ? function (obj) {
                    return Object.keys(obj);
                  }
                : function (obj) {
                    var names = [];
                    for (var property in obj) {
                      if (Object.prototype.hasOwnProperty.call(obj, property)) {
                        names.push(property);
                      }
                    }
                    return names;
                  };

            var trimUnderscore = function trimUnderscore(str) {
              if (str.substr(0, 1) === "_") {
                return str.slice(1);
              }
              return str;
            };

            var arrayKeyToSortNumber = function arrayKeyToSortNumber(key) {
              if (key === "_t") {
                return -1;
              } else {
                if (key.substr(0, 1) === "_") {
                  return parseInt(key.slice(1), 10);
                } else {
                  return parseInt(key, 10) + 0.1;
                }
              }
            };

            var arrayKeyComparer = function arrayKeyComparer(key1, key2) {
              return arrayKeyToSortNumber(key1) - arrayKeyToSortNumber(key2);
            };

            var BaseFormatter = (function () {
              function BaseFormatter() {
                classCallCheck(this, BaseFormatter);
              }

              createClass(BaseFormatter, [
                {
                  key: "format",
                  value: function format(delta, left) {
                    var context = {};
                    this.prepareContext(context);
                    this.recurse(context, delta, left);
                    return this.finalize(context);
                  },
                },
                {
                  key: "prepareContext",
                  value: function prepareContext(context) {
                    context.buffer = [];
                    context.out = function () {
                      var _buffer;

                      (_buffer = this.buffer).push.apply(_buffer, arguments);
                    };
                  },
                },
                {
                  key: "typeFormattterNotFound",
                  value: function typeFormattterNotFound(context, deltaType) {
                    throw new Error("cannot format delta type: " + deltaType);
                  },
                },
                {
                  key: "typeFormattterErrorFormatter",
                  value: function typeFormattterErrorFormatter(context, err) {
                    return err.toString();
                  },
                },
                {
                  key: "finalize",
                  value: function finalize(_ref) {
                    var buffer = _ref.buffer;

                    if (isArray$3(buffer)) {
                      return buffer.join("");
                    }
                  },
                },
                {
                  key: "recurse",
                  value: function recurse(
                    context,
                    delta,
                    left,
                    key,
                    leftKey,
                    movedFrom,
                    isLast
                  ) {
                    var useMoveOriginHere = delta && movedFrom;
                    var leftValue = useMoveOriginHere ? movedFrom.value : left;

                    if (
                      typeof delta === "undefined" &&
                      typeof key === "undefined"
                    ) {
                      return undefined;
                    }

                    var type = this.getDeltaType(delta, movedFrom);
                    var nodeType =
                      type === "node"
                        ? delta._t === "a"
                          ? "array"
                          : "object"
                        : "";

                    if (typeof key !== "undefined") {
                      this.nodeBegin(
                        context,
                        key,
                        leftKey,
                        type,
                        nodeType,
                        isLast
                      );
                    } else {
                      this.rootBegin(context, type, nodeType);
                    }

                    var typeFormattter = void 0;
                    try {
                      typeFormattter =
                        this["format_" + type] ||
                        this.typeFormattterNotFound(context, type);
                      typeFormattter.call(
                        this,
                        context,
                        delta,
                        leftValue,
                        key,
                        leftKey,
                        movedFrom
                      );
                    } catch (err) {
                      this.typeFormattterErrorFormatter(
                        context,
                        err,
                        delta,
                        leftValue,
                        key,
                        leftKey,
                        movedFrom
                      );
                      if (typeof console !== "undefined" && console.error) {
                        console.error(err.stack);
                      }
                    }

                    if (typeof key !== "undefined") {
                      this.nodeEnd(
                        context,
                        key,
                        leftKey,
                        type,
                        nodeType,
                        isLast
                      );
                    } else {
                      this.rootEnd(context, type, nodeType);
                    }
                  },
                },
                {
                  key: "formatDeltaChildren",
                  value: function formatDeltaChildren(context, delta, left) {
                    var self = this;
                    this.forEachDeltaKey(
                      delta,
                      left,
                      function (key, leftKey, movedFrom, isLast) {
                        self.recurse(
                          context,
                          delta[key],
                          left ? left[leftKey] : undefined,
                          key,
                          leftKey,
                          movedFrom,
                          isLast
                        );
                      }
                    );
                  },
                },
                {
                  key: "forEachDeltaKey",
                  value: function forEachDeltaKey(delta, left, fn) {
                    var keys = getObjectKeys(delta);
                    var arrayKeys = delta._t === "a";
                    var moveDestinations = {};
                    var name = void 0;
                    if (typeof left !== "undefined") {
                      for (name in left) {
                        if (Object.prototype.hasOwnProperty.call(left, name)) {
                          if (
                            typeof delta[name] === "undefined" &&
                            (!arrayKeys ||
                              typeof delta["_" + name] === "undefined")
                          ) {
                            keys.push(name);
                          }
                        }
                      }
                    }
                    // look for move destinations
                    for (name in delta) {
                      if (Object.prototype.hasOwnProperty.call(delta, name)) {
                        var value = delta[name];
                        if (isArray$3(value) && value[2] === 3) {
                          moveDestinations[value[1].toString()] = {
                            key: name,
                            value: left && left[parseInt(name.substr(1))],
                          };
                          if (this.includeMoveDestinations !== false) {
                            if (
                              typeof left === "undefined" &&
                              typeof delta[value[1]] === "undefined"
                            ) {
                              keys.push(value[1].toString());
                            }
                          }
                        }
                      }
                    }
                    if (arrayKeys) {
                      keys.sort(arrayKeyComparer);
                    } else {
                      keys.sort();
                    }
                    for (
                      var index = 0, length = keys.length;
                      index < length;
                      index++
                    ) {
                      var key = keys[index];
                      if (arrayKeys && key === "_t") {
                        continue;
                      }
                      var leftKey = arrayKeys
                        ? typeof key === "number"
                          ? key
                          : parseInt(trimUnderscore(key), 10)
                        : key;
                      var isLast = index === length - 1;
                      fn(key, leftKey, moveDestinations[leftKey], isLast);
                    }
                  },
                },
                {
                  key: "getDeltaType",
                  value: function getDeltaType(delta, movedFrom) {
                    if (typeof delta === "undefined") {
                      if (typeof movedFrom !== "undefined") {
                        return "movedestination";
                      }
                      return "unchanged";
                    }
                    if (isArray$3(delta)) {
                      if (delta.length === 1) {
                        return "added";
                      }
                      if (delta.length === 2) {
                        return "modified";
                      }
                      if (delta.length === 3 && delta[2] === 0) {
                        return "deleted";
                      }
                      if (delta.length === 3 && delta[2] === 2) {
                        return "textdiff";
                      }
                      if (delta.length === 3 && delta[2] === 3) {
                        return "moved";
                      }
                    } else if (
                      (typeof delta === "undefined"
                        ? "undefined"
                        : _typeof(delta)) === "object"
                    ) {
                      return "node";
                    }
                    return "unknown";
                  },
                },
                {
                  key: "parseTextDiff",
                  value: function parseTextDiff(value) {
                    var output = [];
                    var lines = value.split("\n@@ ");
                    for (var i = 0, l = lines.length; i < l; i++) {
                      var line = lines[i];
                      var lineOutput = {
                        pieces: [],
                      };
                      var location = /^(?:@@ )?[-+]?(\d+),(\d+)/
                        .exec(line)
                        .slice(1);
                      lineOutput.location = {
                        line: location[0],
                        chr: location[1],
                      };
                      var pieces = line.split("\n").slice(1);
                      for (
                        var pieceIndex = 0, piecesLength = pieces.length;
                        pieceIndex < piecesLength;
                        pieceIndex++
                      ) {
                        var piece = pieces[pieceIndex];
                        if (!piece.length) {
                          continue;
                        }
                        var pieceOutput = {
                          type: "context",
                        };
                        if (piece.substr(0, 1) === "+") {
                          pieceOutput.type = "added";
                        } else if (piece.substr(0, 1) === "-") {
                          pieceOutput.type = "deleted";
                        }
                        pieceOutput.text = piece.slice(1);
                        lineOutput.pieces.push(pieceOutput);
                      }
                      output.push(lineOutput);
                    }
                    return output;
                  },
                },
              ]);
              return BaseFormatter;
            })();

            var base = Object.freeze({
              default: BaseFormatter,
            });

            var HtmlFormatter = (function (_BaseFormatter) {
              inherits(HtmlFormatter, _BaseFormatter);

              function HtmlFormatter() {
                classCallCheck(this, HtmlFormatter);
                return possibleConstructorReturn(
                  this,
                  (
                    HtmlFormatter.__proto__ ||
                    Object.getPrototypeOf(HtmlFormatter)
                  ).apply(this, arguments)
                );
              }

              createClass(HtmlFormatter, [
                {
                  key: "typeFormattterErrorFormatter",
                  value: function typeFormattterErrorFormatter(context, err) {
                    context.out(
                      '<pre class="jsondiffpatch-error">' + err + "</pre>"
                    );
                  },
                },
                {
                  key: "formatValue",
                  value: function formatValue(context, value) {
                    context.out(
                      "<pre>" +
                        htmlEscape(JSON.stringify(value, null, 2)) +
                        "</pre>"
                    );
                  },
                },
                {
                  key: "formatTextDiffString",
                  value: function formatTextDiffString(context, value) {
                    var lines = this.parseTextDiff(value);
                    context.out('<ul class="jsondiffpatch-textdiff">');
                    for (var i = 0, l = lines.length; i < l; i++) {
                      var line = lines[i];
                      context.out(
                        '<li><div class="jsondiffpatch-textdiff-location">' +
                          ('<span class="jsondiffpatch-textdiff-line-number">' +
                            line.location.line +
                            '</span><span class="jsondiffpatch-textdiff-char">' +
                            line.location.chr +
                            '</span></div><div class="jsondiffpatch-textdiff-line">')
                      );
                      var pieces = line.pieces;
                      for (
                        var pieceIndex = 0, piecesLength = pieces.length;
                        pieceIndex < piecesLength;
                        pieceIndex++
                      ) {
                        /* global decodeURI */
                        var piece = pieces[pieceIndex];
                        context.out(
                          '<span class="jsondiffpatch-textdiff-' +
                            piece.type +
                            '">' +
                            htmlEscape(decodeURI(piece.text)) +
                            "</span>"
                        );
                      }
                      context.out("</div></li>");
                    }
                    context.out("</ul>");
                  },
                },
                {
                  key: "rootBegin",
                  value: function rootBegin(context, type, nodeType) {
                    var nodeClass =
                      "jsondiffpatch-" +
                      type +
                      (nodeType
                        ? " jsondiffpatch-child-node-type-" + nodeType
                        : "");
                    context.out(
                      '<div class="jsondiffpatch-delta ' + nodeClass + '">'
                    );
                  },
                },
                {
                  key: "rootEnd",
                  value: function rootEnd(context) {
                    context.out(
                      "</div>" +
                        (context.hasArrows
                          ? '<script type="text/javascript">setTimeout(' +
                            (adjustArrows.toString() + ",10);</script>")
                          : "")
                    );
                  },
                },
                {
                  key: "nodeBegin",
                  value: function nodeBegin(
                    context,
                    key,
                    leftKey,
                    type,
                    nodeType
                  ) {
                    var nodeClass =
                      "jsondiffpatch-" +
                      type +
                      (nodeType
                        ? " jsondiffpatch-child-node-type-" + nodeType
                        : "");
                    context.out(
                      '<li class="' +
                        nodeClass +
                        '" data-key="' +
                        leftKey +
                        '">' +
                        ('<div class="jsondiffpatch-property-name">' +
                          leftKey +
                          "</div>")
                    );
                  },
                },
                {
                  key: "nodeEnd",
                  value: function nodeEnd(context) {
                    context.out("</li>");
                  },

                  /* jshint camelcase: false */
                  /* eslint-disable camelcase */
                },
                {
                  key: "format_unchanged",
                  value: function format_unchanged(context, delta, left) {
                    if (typeof left === "undefined") {
                      return;
                    }
                    context.out('<div class="jsondiffpatch-value">');
                    this.formatValue(context, left);
                    context.out("</div>");
                  },
                },
                {
                  key: "format_movedestination",
                  value: function format_movedestination(context, delta, left) {
                    if (typeof left === "undefined") {
                      return;
                    }
                    context.out('<div class="jsondiffpatch-value">');
                    this.formatValue(context, left);
                    context.out("</div>");
                  },
                },
                {
                  key: "format_node",
                  value: function format_node(context, delta, left) {
                    // recurse
                    var nodeType = delta._t === "a" ? "array" : "object";
                    context.out(
                      '<ul class="jsondiffpatch-node jsondiffpatch-node-type-' +
                        nodeType +
                        '">'
                    );
                    this.formatDeltaChildren(context, delta, left);
                    context.out("</ul>");
                  },
                },
                {
                  key: "format_added",
                  value: function format_added(context, delta) {
                    context.out('<div class="jsondiffpatch-value">');
                    this.formatValue(context, delta[0]);
                    context.out("</div>");
                  },
                },
                {
                  key: "format_modified",
                  value: function format_modified(context, delta) {
                    context.out(
                      '<div class="jsondiffpatch-value jsondiffpatch-left-value">'
                    );
                    this.formatValue(context, delta[0]);
                    context.out(
                      "</div>" +
                        '<div class="jsondiffpatch-value jsondiffpatch-right-value">'
                    );
                    this.formatValue(context, delta[1]);
                    context.out("</div>");
                  },
                },
                {
                  key: "format_deleted",
                  value: function format_deleted(context, delta) {
                    context.out('<div class="jsondiffpatch-value">');
                    this.formatValue(context, delta[0]);
                    context.out("</div>");
                  },
                },
                {
                  key: "format_moved",
                  value: function format_moved(context, delta) {
                    context.out('<div class="jsondiffpatch-value">');
                    this.formatValue(context, delta[0]);
                    context.out(
                      '</div><div class="jsondiffpatch-moved-destination">' +
                        delta[1] +
                        "</div>"
                    );

                    // draw an SVG arrow from here to move destination
                    context.out(
                      /* jshint multistr: true */
                      '<div class="jsondiffpatch-arrow" ' +
                        'style="position: relative; left: -34px;">\n          <svg width="30" height="60" ' +
                        'style="position: absolute; display: none;">\n          <defs>\n              <marker id="markerArrow" markerWidth="8" markerHeight="8"\n                 refx="2" refy="4"\n                     orient="auto" markerUnits="userSpaceOnUse">\n                  <path d="M1,1 L1,7 L7,4 L1,1" style="fill: #339;" />\n              </marker>\n          </defs>\n          <path d="M30,0 Q-10,25 26,50"\n            style="stroke: #88f; stroke-width: 2px; fill: none; ' +
                        'stroke-opacity: 0.5; marker-end: url(#markerArrow);"\n          ></path>\n          </svg>\n      </div>'
                    );
                    context.hasArrows = true;
                  },
                },
                {
                  key: "format_textdiff",
                  value: function format_textdiff(context, delta) {
                    context.out('<div class="jsondiffpatch-value">');
                    this.formatTextDiffString(context, delta[0]);
                    context.out("</div>");
                  },
                },
              ]);
              return HtmlFormatter;
            })(BaseFormatter);

            function htmlEscape(text) {
              var html = text;
              var replacements = [
                [/&/g, "&amp;"],
                [/</g, "&lt;"],
                [/>/g, "&gt;"],
                [/'/g, "&apos;"],
                [/"/g, "&quot;"],
              ];
              for (var i = 0; i < replacements.length; i++) {
                html = html.replace(replacements[i][0], replacements[i][1]);
              }
              return html;
            }

            var adjustArrows = function jsondiffpatchHtmlFormatterAdjustArrows(
              nodeArg
            ) {
              var node = nodeArg || document;
              var getElementText = function getElementText(_ref) {
                var textContent = _ref.textContent,
                  innerText = _ref.innerText;
                return textContent || innerText;
              };
              var eachByQuery = function eachByQuery(el, query, fn) {
                var elems = el.querySelectorAll(query);
                for (var i = 0, l = elems.length; i < l; i++) {
                  fn(elems[i]);
                }
              };
              var eachChildren = function eachChildren(_ref2, fn) {
                var children = _ref2.children;

                for (var i = 0, l = children.length; i < l; i++) {
                  fn(children[i], i);
                }
              };
              eachByQuery(node, ".jsondiffpatch-arrow", function (_ref3) {
                var parentNode = _ref3.parentNode,
                  children = _ref3.children,
                  style = _ref3.style;

                var arrowParent = parentNode;
                var svg = children[0];
                var path = svg.children[1];
                svg.style.display = "none";
                var destination = getElementText(
                  arrowParent.querySelector(".jsondiffpatch-moved-destination")
                );
                var container = arrowParent.parentNode;
                var destinationElem = void 0;
                eachChildren(container, function (child) {
                  if (child.getAttribute("data-key") === destination) {
                    destinationElem = child;
                  }
                });
                if (!destinationElem) {
                  return;
                }
                try {
                  var distance =
                    destinationElem.offsetTop - arrowParent.offsetTop;
                  svg.setAttribute("height", Math.abs(distance) + 6);
                  style.top = -8 + (distance > 0 ? 0 : distance) + "px";
                  var curve =
                    distance > 0
                      ? "M30,0 Q-10," +
                        Math.round(distance / 2) +
                        " 26," +
                        (distance - 4)
                      : "M30," +
                        -distance +
                        " Q-10," +
                        Math.round(-distance / 2) +
                        " 26,4";
                  path.setAttribute("d", curve);
                  svg.style.display = "";
                } catch (err) {}
              });
            };

            /* jshint camelcase: true */
            /* eslint-enable camelcase */

            var showUnchanged = function showUnchanged(show, node, delay) {
              var el = node || document.body;
              var prefix = "jsondiffpatch-unchanged-";
              var classes = {
                showing: prefix + "showing",
                hiding: prefix + "hiding",
                visible: prefix + "visible",
                hidden: prefix + "hidden",
              };
              var list = el.classList;
              if (!list) {
                return;
              }
              if (!delay) {
                list.remove(classes.showing);
                list.remove(classes.hiding);
                list.remove(classes.visible);
                list.remove(classes.hidden);
                if (show === false) {
                  list.add(classes.hidden);
                }
                return;
              }
              if (show === false) {
                list.remove(classes.showing);
                list.add(classes.visible);
                setTimeout(function () {
                  list.add(classes.hiding);
                }, 10);
              } else {
                list.remove(classes.hiding);
                list.add(classes.showing);
                list.remove(classes.hidden);
              }
              var intervalId = setInterval(function () {
                adjustArrows(el);
              }, 100);
              setTimeout(function () {
                list.remove(classes.showing);
                list.remove(classes.hiding);
                if (show === false) {
                  list.add(classes.hidden);
                  list.remove(classes.visible);
                } else {
                  list.add(classes.visible);
                  list.remove(classes.hidden);
                }
                setTimeout(function () {
                  list.remove(classes.visible);
                  clearInterval(intervalId);
                }, delay + 400);
              }, delay);
            };

            var hideUnchanged = function hideUnchanged(node, delay) {
              return showUnchanged(false, node, delay);
            };

            var defaultInstance = void 0;

            function format(delta, left) {
              if (!defaultInstance) {
                defaultInstance = new HtmlFormatter();
              }
              return defaultInstance.format(delta, left);
            }

            var html = Object.freeze({
              showUnchanged: showUnchanged,
              hideUnchanged: hideUnchanged,
              default: HtmlFormatter,
              format: format,
            });

            var AnnotatedFormatter = (function (_BaseFormatter) {
              inherits(AnnotatedFormatter, _BaseFormatter);

              function AnnotatedFormatter() {
                classCallCheck(this, AnnotatedFormatter);

                var _this = possibleConstructorReturn(
                  this,
                  (
                    AnnotatedFormatter.__proto__ ||
                    Object.getPrototypeOf(AnnotatedFormatter)
                  ).call(this)
                );

                _this.includeMoveDestinations = false;
                return _this;
              }

              createClass(AnnotatedFormatter, [
                {
                  key: "prepareContext",
                  value: function prepareContext(context) {
                    get(
                      AnnotatedFormatter.prototype.__proto__ ||
                        Object.getPrototypeOf(AnnotatedFormatter.prototype),
                      "prepareContext",
                      this
                    ).call(this, context);
                    context.indent = function (levels) {
                      this.indentLevel =
                        (this.indentLevel || 0) +
                        (typeof levels === "undefined" ? 1 : levels);
                      this.indentPad = new Array(this.indentLevel + 1).join(
                        "&nbsp;&nbsp;"
                      );
                    };
                    context.row = function (json, htmlNote) {
                      context.out(
                        '<tr><td style="white-space: nowrap;">' +
                          '<pre class="jsondiffpatch-annotated-indent"' +
                          ' style="display: inline-block">'
                      );
                      context.out(context.indentPad);
                      context.out('</pre><pre style="display: inline-block">');
                      context.out(json);
                      context.out(
                        '</pre></td><td class="jsondiffpatch-delta-note"><div>'
                      );
                      context.out(htmlNote);
                      context.out("</div></td></tr>");
                    };
                  },
                },
                {
                  key: "typeFormattterErrorFormatter",
                  value: function typeFormattterErrorFormatter(context, err) {
                    context.row(
                      "",
                      '<pre class="jsondiffpatch-error">' + err + "</pre>"
                    );
                  },
                },
                {
                  key: "formatTextDiffString",
                  value: function formatTextDiffString(context, value) {
                    var lines = this.parseTextDiff(value);
                    context.out('<ul class="jsondiffpatch-textdiff">');
                    for (var i = 0, l = lines.length; i < l; i++) {
                      var line = lines[i];
                      context.out(
                        '<li><div class="jsondiffpatch-textdiff-location">' +
                          ('<span class="jsondiffpatch-textdiff-line-number">' +
                            line.location.line +
                            '</span><span class="jsondiffpatch-textdiff-char">' +
                            line.location.chr +
                            '</span></div><div class="jsondiffpatch-textdiff-line">')
                      );
                      var pieces = line.pieces;
                      for (
                        var pieceIndex = 0, piecesLength = pieces.length;
                        pieceIndex < piecesLength;
                        pieceIndex++
                      ) {
                        var piece = pieces[pieceIndex];
                        context.out(
                          '<span class="jsondiffpatch-textdiff-' +
                            piece.type +
                            '">' +
                            piece.text +
                            "</span>"
                        );
                      }
                      context.out("</div></li>");
                    }
                    context.out("</ul>");
                  },
                },
                {
                  key: "rootBegin",
                  value: function rootBegin(context, type, nodeType) {
                    context.out(
                      '<table class="jsondiffpatch-annotated-delta">'
                    );
                    if (type === "node") {
                      context.row("{");
                      context.indent();
                    }
                    if (nodeType === "array") {
                      context.row(
                        '"_t": "a",',
                        "Array delta (member names indicate array indices)"
                      );
                    }
                  },
                },
                {
                  key: "rootEnd",
                  value: function rootEnd(context, type) {
                    if (type === "node") {
                      context.indent(-1);
                      context.row("}");
                    }
                    context.out("</table>");
                  },
                },
                {
                  key: "nodeBegin",
                  value: function nodeBegin(
                    context,
                    key,
                    leftKey,
                    type,
                    nodeType
                  ) {
                    context.row("&quot;" + key + "&quot;: {");
                    if (type === "node") {
                      context.indent();
                    }
                    if (nodeType === "array") {
                      context.row(
                        '"_t": "a",',
                        "Array delta (member names indicate array indices)"
                      );
                    }
                  },
                },
                {
                  key: "nodeEnd",
                  value: function nodeEnd(
                    context,
                    key,
                    leftKey,
                    type,
                    nodeType,
                    isLast
                  ) {
                    if (type === "node") {
                      context.indent(-1);
                    }
                    context.row("}" + (isLast ? "" : ","));
                  },

                  /* jshint camelcase: false */

                  /* eslint-disable camelcase */
                },
                {
                  key: "format_unchanged",
                  value: function format_unchanged() {},
                },
                {
                  key: "format_movedestination",
                  value: function format_movedestination() {},
                },
                {
                  key: "format_node",
                  value: function format_node(context, delta, left) {
                    // recurse
                    this.formatDeltaChildren(context, delta, left);
                  },
                },
              ]);
              return AnnotatedFormatter;
            })(BaseFormatter);

            /* eslint-enable camelcase */

            var wrapPropertyName = function wrapPropertyName(name) {
              return (
                '<pre style="display:inline-block">&quot;' +
                name +
                "&quot;</pre>"
              );
            };

            var deltaAnnotations = {
              added: function added(delta, left, key, leftKey) {
                var formatLegend = " <pre>([newValue])</pre>";
                if (typeof leftKey === "undefined") {
                  return "new value" + formatLegend;
                }
                if (typeof leftKey === "number") {
                  return "insert at index " + leftKey + formatLegend;
                }
                return (
                  "add property " + wrapPropertyName(leftKey) + formatLegend
                );
              },
              modified: function modified(delta, left, key, leftKey) {
                var formatLegend = " <pre>([previousValue, newValue])</pre>";
                if (typeof leftKey === "undefined") {
                  return "modify value" + formatLegend;
                }
                if (typeof leftKey === "number") {
                  return "modify at index " + leftKey + formatLegend;
                }
                return (
                  "modify property " + wrapPropertyName(leftKey) + formatLegend
                );
              },
              deleted: function deleted(delta, left, key, leftKey) {
                var formatLegend = " <pre>([previousValue, 0, 0])</pre>";
                if (typeof leftKey === "undefined") {
                  return "delete value" + formatLegend;
                }
                if (typeof leftKey === "number") {
                  return "remove index " + leftKey + formatLegend;
                }
                return (
                  "delete property " + wrapPropertyName(leftKey) + formatLegend
                );
              },
              moved: function moved(delta, left, key, leftKey) {
                return (
                  'move from <span title="(position to remove at original state)">' +
                  ("index " +
                    leftKey +
                    '</span> to <span title="(position to insert at final') +
                  (' state)">index ' + delta[1] + "</span>")
                );
              },
              textdiff: function textdiff(delta, left, key, leftKey) {
                var location =
                  typeof leftKey === "undefined"
                    ? ""
                    : typeof leftKey === "number"
                    ? " at index " + leftKey
                    : " at property " + wrapPropertyName(leftKey);
                return (
                  "text diff" +
                  location +
                  ', format is <a href="https://code.google.com/' +
                  'p/google-diff-match-patch/wiki/Unidiff">a variation of Unidiff</a>'
                );
              },
            };

            var formatAnyChange = function formatAnyChange(context, delta) {
              var deltaType = this.getDeltaType(delta);
              var annotator = deltaAnnotations[deltaType];
              var htmlNote =
                annotator &&
                annotator.apply(
                  annotator,
                  Array.prototype.slice.call(arguments, 1)
                );
              var json = JSON.stringify(delta, null, 2);
              if (deltaType === "textdiff") {
                // split text diffs lines
                json = json.split("\\n").join('\\n"+\n   "');
              }
              context.indent();
              context.row(json, htmlNote);
              context.indent(-1);
            };

            /* eslint-disable camelcase */
            AnnotatedFormatter.prototype.format_added = formatAnyChange;
            AnnotatedFormatter.prototype.format_modified = formatAnyChange;
            AnnotatedFormatter.prototype.format_deleted = formatAnyChange;
            AnnotatedFormatter.prototype.format_moved = formatAnyChange;
            AnnotatedFormatter.prototype.format_textdiff = formatAnyChange;
            var defaultInstance$1 = void 0;

            function format$1(delta, left) {
              if (!defaultInstance$1) {
                defaultInstance$1 = new AnnotatedFormatter();
              }
              return defaultInstance$1.format(delta, left);
            }

            var annotated = Object.freeze({
              default: AnnotatedFormatter,
              format: format$1,
            });

            var OPERATIONS = {
              add: "add",
              remove: "remove",
              replace: "replace",
              move: "move",
            };

            var JSONFormatter = (function (_BaseFormatter) {
              inherits(JSONFormatter, _BaseFormatter);

              function JSONFormatter() {
                classCallCheck(this, JSONFormatter);

                var _this = possibleConstructorReturn(
                  this,
                  (
                    JSONFormatter.__proto__ ||
                    Object.getPrototypeOf(JSONFormatter)
                  ).call(this)
                );

                _this.includeMoveDestinations = true;
                return _this;
              }

              createClass(JSONFormatter, [
                {
                  key: "prepareContext",
                  value: function prepareContext(context) {
                    get(
                      JSONFormatter.prototype.__proto__ ||
                        Object.getPrototypeOf(JSONFormatter.prototype),
                      "prepareContext",
                      this
                    ).call(this, context);
                    context.result = [];
                    context.path = [];
                    context.pushCurrentOp = function (obj) {
                      var op = obj.op,
                        value = obj.value;

                      var val = {
                        op: op,
                        path: this.currentPath(),
                      };
                      if (typeof value !== "undefined") {
                        val.value = value;
                      }
                      this.result.push(val);
                    };

                    context.pushMoveOp = function (to) {
                      var from = this.currentPath();
                      this.result.push({
                        op: OPERATIONS.move,
                        from: from,
                        path: this.toPath(to),
                      });
                    };

                    context.currentPath = function () {
                      return "/" + this.path.join("/");
                    };

                    context.toPath = function (toPath) {
                      var to = this.path.slice();
                      to[to.length - 1] = toPath;
                      return "/" + to.join("/");
                    };
                  },
                },
                {
                  key: "typeFormattterErrorFormatter",
                  value: function typeFormattterErrorFormatter(context, err) {
                    context.out("[ERROR] " + err);
                  },
                },
                {
                  key: "rootBegin",
                  value: function rootBegin() {},
                },
                {
                  key: "rootEnd",
                  value: function rootEnd() {},
                },
                {
                  key: "nodeBegin",
                  value: function nodeBegin(_ref, key, leftKey) {
                    var path = _ref.path;

                    path.push(leftKey);
                  },
                },
                {
                  key: "nodeEnd",
                  value: function nodeEnd(_ref2) {
                    var path = _ref2.path;

                    path.pop();
                  },

                  /* jshint camelcase: false */
                  /* eslint-disable camelcase */
                },
                {
                  key: "format_unchanged",
                  value: function format_unchanged() {},
                },
                {
                  key: "format_movedestination",
                  value: function format_movedestination() {},
                },
                {
                  key: "format_node",
                  value: function format_node(context, delta, left) {
                    this.formatDeltaChildren(context, delta, left);
                  },
                },
                {
                  key: "format_added",
                  value: function format_added(context, delta) {
                    context.pushCurrentOp({
                      op: OPERATIONS.add,
                      value: delta[0],
                    });
                  },
                },
                {
                  key: "format_modified",
                  value: function format_modified(context, delta) {
                    context.pushCurrentOp({
                      op: OPERATIONS.replace,
                      value: delta[1],
                    });
                  },
                },
                {
                  key: "format_deleted",
                  value: function format_deleted(context) {
                    context.pushCurrentOp({ op: OPERATIONS.remove });
                  },
                },
                {
                  key: "format_moved",
                  value: function format_moved(context, delta) {
                    var to = delta[1];
                    context.pushMoveOp(to);
                  },
                },
                {
                  key: "format_textdiff",
                  value: function format_textdiff() {
                    throw new Error("Not implemented");
                  },
                },
                {
                  key: "format",
                  value: function format(delta, left) {
                    var context = {};
                    this.prepareContext(context);
                    this.recurse(context, delta, left);
                    return context.result;
                  },
                },
              ]);
              return JSONFormatter;
            })(BaseFormatter);

            var last = function last(arr) {
              return arr[arr.length - 1];
            };

            var sortBy = function sortBy(arr, pred) {
              arr.sort(pred);
              return arr;
            };

            var compareByIndexDesc = function compareByIndexDesc(
              indexA,
              indexB
            ) {
              var lastA = parseInt(indexA, 10);
              var lastB = parseInt(indexB, 10);
              if (!(isNaN(lastA) || isNaN(lastB))) {
                return lastB - lastA;
              } else {
                return 0;
              }
            };

            var opsByDescendingOrder = function opsByDescendingOrder(
              removeOps
            ) {
              return sortBy(removeOps, function (a, b) {
                var splitA = a.path.split("/");
                var splitB = b.path.split("/");
                if (splitA.length !== splitB.length) {
                  return splitA.length - splitB.length;
                } else {
                  return compareByIndexDesc(last(splitA), last(splitB));
                }
              });
            };

            var partitionOps = function partitionOps(arr, fns) {
              var initArr = Array(fns.length + 1)
                .fill()
                .map(function () {
                  return [];
                });
              return arr
                .map(function (item) {
                  var position = fns
                    .map(function (fn) {
                      return fn(item);
                    })
                    .indexOf(true);
                  if (position < 0) {
                    position = fns.length;
                  }
                  return { item: item, position: position };
                })
                .reduce(function (acc, item) {
                  acc[item.position].push(item.item);
                  return acc;
                }, initArr);
            };
            var isMoveOp = function isMoveOp(_ref3) {
              var op = _ref3.op;
              return op === "move";
            };
            var isRemoveOp = function isRemoveOp(_ref4) {
              var op = _ref4.op;
              return op === "remove";
            };

            var reorderOps = function reorderOps(diff) {
              var _partitionOps = partitionOps(diff, [isMoveOp, isRemoveOp]),
                _partitionOps2 = slicedToArray(_partitionOps, 3),
                moveOps = _partitionOps2[0],
                removedOps = _partitionOps2[1],
                restOps = _partitionOps2[2];

              var removeOpsReverse = opsByDescendingOrder(removedOps);
              return [].concat(
                toConsumableArray(removeOpsReverse),
                toConsumableArray(moveOps),
                toConsumableArray(restOps)
              );
            };

            var defaultInstance$2 = void 0;

            var format$2 = function format(delta, left) {
              if (!defaultInstance$2) {
                defaultInstance$2 = new JSONFormatter();
              }
              return reorderOps(defaultInstance$2.format(delta, left));
            };

            var log = function log(delta, left) {
              console.log(format$2(delta, left));
            };

            var jsonpatch = Object.freeze({
              default: JSONFormatter,
              partitionOps: partitionOps,
              format: format$2,
              log: log,
            });

            function chalkColor(name) {
              return (
                (chalk && chalk[name]) ||
                function () {
                  for (
                    var _len = arguments.length, args = Array(_len), _key = 0;
                    _key < _len;
                    _key++
                  ) {
                    args[_key] = arguments[_key];
                  }

                  return args;
                }
              );
            }

            var colors = {
              added: chalkColor("green"),
              deleted: chalkColor("red"),
              movedestination: chalkColor("gray"),
              moved: chalkColor("yellow"),
              unchanged: chalkColor("gray"),
              error: chalkColor("white.bgRed"),
              textDiffLine: chalkColor("gray"),
            };

            var ConsoleFormatter = (function (_BaseFormatter) {
              inherits(ConsoleFormatter, _BaseFormatter);

              function ConsoleFormatter() {
                classCallCheck(this, ConsoleFormatter);

                var _this = possibleConstructorReturn(
                  this,
                  (
                    ConsoleFormatter.__proto__ ||
                    Object.getPrototypeOf(ConsoleFormatter)
                  ).call(this)
                );

                _this.includeMoveDestinations = false;
                return _this;
              }

              createClass(ConsoleFormatter, [
                {
                  key: "prepareContext",
                  value: function prepareContext(context) {
                    get(
                      ConsoleFormatter.prototype.__proto__ ||
                        Object.getPrototypeOf(ConsoleFormatter.prototype),
                      "prepareContext",
                      this
                    ).call(this, context);
                    context.indent = function (levels) {
                      this.indentLevel =
                        (this.indentLevel || 0) +
                        (typeof levels === "undefined" ? 1 : levels);
                      this.indentPad = new Array(this.indentLevel + 1).join(
                        "  "
                      );
                      this.outLine();
                    };
                    context.outLine = function () {
                      this.buffer.push("\n" + (this.indentPad || ""));
                    };
                    context.out = function () {
                      for (
                        var _len2 = arguments.length,
                          args = Array(_len2),
                          _key2 = 0;
                        _key2 < _len2;
                        _key2++
                      ) {
                        args[_key2] = arguments[_key2];
                      }

                      for (var i = 0, l = args.length; i < l; i++) {
                        var lines = args[i].split("\n");
                        var text = lines.join("\n" + (this.indentPad || ""));
                        if (this.color && this.color[0]) {
                          text = this.color[0](text);
                        }
                        this.buffer.push(text);
                      }
                    };
                    context.pushColor = function (color) {
                      this.color = this.color || [];
                      this.color.unshift(color);
                    };
                    context.popColor = function () {
                      this.color = this.color || [];
                      this.color.shift();
                    };
                  },
                },
                {
                  key: "typeFormattterErrorFormatter",
                  value: function typeFormattterErrorFormatter(context, err) {
                    context.pushColor(colors.error);
                    context.out("[ERROR]" + err);
                    context.popColor();
                  },
                },
                {
                  key: "formatValue",
                  value: function formatValue(context, value) {
                    context.out(JSON.stringify(value, null, 2));
                  },
                },
                {
                  key: "formatTextDiffString",
                  value: function formatTextDiffString(context, value) {
                    var lines = this.parseTextDiff(value);
                    context.indent();
                    for (var i = 0, l = lines.length; i < l; i++) {
                      var line = lines[i];
                      context.pushColor(colors.textDiffLine);
                      context.out(
                        line.location.line + "," + line.location.chr + " "
                      );
                      context.popColor();
                      var pieces = line.pieces;
                      for (
                        var pieceIndex = 0, piecesLength = pieces.length;
                        pieceIndex < piecesLength;
                        pieceIndex++
                      ) {
                        var piece = pieces[pieceIndex];
                        context.pushColor(colors[piece.type]);
                        context.out(piece.text);
                        context.popColor();
                      }
                      if (i < l - 1) {
                        context.outLine();
                      }
                    }
                    context.indent(-1);
                  },
                },
                {
                  key: "rootBegin",
                  value: function rootBegin(context, type, nodeType) {
                    context.pushColor(colors[type]);
                    if (type === "node") {
                      context.out(nodeType === "array" ? "[" : "{");
                      context.indent();
                    }
                  },
                },
                {
                  key: "rootEnd",
                  value: function rootEnd(context, type, nodeType) {
                    if (type === "node") {
                      context.indent(-1);
                      context.out(nodeType === "array" ? "]" : "}");
                    }
                    context.popColor();
                  },
                },
                {
                  key: "nodeBegin",
                  value: function nodeBegin(
                    context,
                    key,
                    leftKey,
                    type,
                    nodeType
                  ) {
                    context.pushColor(colors[type]);
                    context.out(leftKey + ": ");
                    if (type === "node") {
                      context.out(nodeType === "array" ? "[" : "{");
                      context.indent();
                    }
                  },
                },
                {
                  key: "nodeEnd",
                  value: function nodeEnd(
                    context,
                    key,
                    leftKey,
                    type,
                    nodeType,
                    isLast
                  ) {
                    if (type === "node") {
                      context.indent(-1);
                      context.out(
                        nodeType === "array" ? "]" : "}" + (isLast ? "" : ",")
                      );
                    }
                    if (!isLast) {
                      context.outLine();
                    }
                    context.popColor();
                  },

                  /* jshint camelcase: false */
                  /* eslint-disable camelcase */
                },
                {
                  key: "format_unchanged",
                  value: function format_unchanged(context, delta, left) {
                    if (typeof left === "undefined") {
                      return;
                    }
                    this.formatValue(context, left);
                  },
                },
                {
                  key: "format_movedestination",
                  value: function format_movedestination(context, delta, left) {
                    if (typeof left === "undefined") {
                      return;
                    }
                    this.formatValue(context, left);
                  },
                },
                {
                  key: "format_node",
                  value: function format_node(context, delta, left) {
                    // recurse
                    this.formatDeltaChildren(context, delta, left);
                  },
                },
                {
                  key: "format_added",
                  value: function format_added(context, delta) {
                    this.formatValue(context, delta[0]);
                  },
                },
                {
                  key: "format_modified",
                  value: function format_modified(context, delta) {
                    context.pushColor(colors.deleted);
                    this.formatValue(context, delta[0]);
                    context.popColor();
                    context.out(" => ");
                    context.pushColor(colors.added);
                    this.formatValue(context, delta[1]);
                    context.popColor();
                  },
                },
                {
                  key: "format_deleted",
                  value: function format_deleted(context, delta) {
                    this.formatValue(context, delta[0]);
                  },
                },
                {
                  key: "format_moved",
                  value: function format_moved(context, delta) {
                    context.out("==> " + delta[1]);
                  },
                },
                {
                  key: "format_textdiff",
                  value: function format_textdiff(context, delta) {
                    this.formatTextDiffString(context, delta[0]);
                  },
                },
              ]);
              return ConsoleFormatter;
            })(BaseFormatter);

            var defaultInstance$3 = void 0;

            var format$3 = function format(delta, left) {
              if (!defaultInstance$3) {
                defaultInstance$3 = new ConsoleFormatter();
              }
              return defaultInstance$3.format(delta, left);
            };

            function log$1(delta, left) {
              console.log(format$3(delta, left));
            }

            var console$1 = Object.freeze({
              default: ConsoleFormatter,
              format: format$3,
              log: log$1,
            });

            var index = Object.freeze({
              base: base,
              html: html,
              annotated: annotated,
              jsonpatch: jsonpatch,
              console: console$1,
            });

            // use as 2nd parameter for JSON.parse to revive Date instances
            function dateReviver(key, value) {
              var parts = void 0;
              if (typeof value === "string") {
                // eslint-disable-next-line max-len
                parts =
                  /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:\.(\d*))?(Z|([+-])(\d{2}):(\d{2}))$/.exec(
                    value
                  );
                if (parts) {
                  return new Date(
                    Date.UTC(
                      +parts[1],
                      +parts[2] - 1,
                      +parts[3],
                      +parts[4],
                      +parts[5],
                      +parts[6],
                      +(parts[7] || 0)
                    )
                  );
                }
              }
              return value;
            }

            function create(options) {
              return new DiffPatcher(options);
            }

            var defaultInstance$4 = void 0;

            function diff() {
              if (!defaultInstance$4) {
                defaultInstance$4 = new DiffPatcher();
              }
              return defaultInstance$4.diff.apply(defaultInstance$4, arguments);
            }

            function patch() {
              if (!defaultInstance$4) {
                defaultInstance$4 = new DiffPatcher();
              }
              return defaultInstance$4.patch.apply(
                defaultInstance$4,
                arguments
              );
            }

            function unpatch() {
              if (!defaultInstance$4) {
                defaultInstance$4 = new DiffPatcher();
              }
              return defaultInstance$4.unpatch.apply(
                defaultInstance$4,
                arguments
              );
            }

            function reverse() {
              if (!defaultInstance$4) {
                defaultInstance$4 = new DiffPatcher();
              }
              return defaultInstance$4.reverse.apply(
                defaultInstance$4,
                arguments
              );
            }

            function clone$1() {
              if (!defaultInstance$4) {
                defaultInstance$4 = new DiffPatcher();
              }
              return defaultInstance$4.clone.apply(
                defaultInstance$4,
                arguments
              );
            }

            exports.DiffPatcher = DiffPatcher;
            exports.formatters = index;
            exports.console = console$1;
            exports.create = create;
            exports.dateReviver = dateReviver;
            exports.diff = diff;
            exports.patch = patch;
            exports.unpatch = unpatch;
            exports.reverse = reverse;
            exports.clone = clone$1;

            Object.defineProperty(exports, "__esModule", { value: true });
          });

          /***/
        },

        /***/ e893: /***/ function (module, exports, __webpack_require__) {
          var hasOwn = __webpack_require__("1a2d");
          var ownKeys = __webpack_require__("56ef");
          var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
          var definePropertyModule = __webpack_require__("9bf2");

          module.exports = function (target, source) {
            var keys = ownKeys(source);
            var defineProperty = definePropertyModule.f;
            var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (!hasOwn(target, key))
                defineProperty(
                  target,
                  key,
                  getOwnPropertyDescriptor(source, key)
                );
            }
          };

          /***/
        },

        /***/ e8b5: /***/ function (module, exports, __webpack_require__) {
          var classof = __webpack_require__("c6b6");

          // `IsArray` abstract operation
          // https://tc39.es/ecma262/#sec-isarray
          // eslint-disable-next-line es/no-array-isarray -- safe
          module.exports =
            Array.isArray ||
            function isArray(argument) {
              return classof(argument) == "Array";
            };

          /***/
        },

        /***/ e95a: /***/ function (module, exports, __webpack_require__) {
          var wellKnownSymbol = __webpack_require__("b622");
          var Iterators = __webpack_require__("3f8c");

          var ITERATOR = wellKnownSymbol("iterator");
          var ArrayPrototype = Array.prototype;

          // check on default Array iterator
          module.exports = function (it) {
            return (
              it !== undefined &&
              (Iterators.Array === it || ArrayPrototype[ITERATOR] === it)
            );
          };

          /***/
        },

        /***/ e9c4: /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var getBuiltIn = __webpack_require__("d066");
          var fails = __webpack_require__("d039");

          var $stringify = getBuiltIn("JSON", "stringify");
          var re = /[\uD800-\uDFFF]/g;
          var low = /^[\uD800-\uDBFF]$/;
          var hi = /^[\uDC00-\uDFFF]$/;

          var fix = function (match, offset, string) {
            var prev = string.charAt(offset - 1);
            var next = string.charAt(offset + 1);
            if (
              (low.test(match) && !hi.test(next)) ||
              (hi.test(match) && !low.test(prev))
            ) {
              return "\\u" + match.charCodeAt(0).toString(16);
            }
            return match;
          };

          var FORCED = fails(function () {
            return (
              $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' ||
              $stringify("\uDEAD") !== '"\\udead"'
            );
          });

          if ($stringify) {
            // `JSON.stringify` method
            // https://tc39.es/ecma262/#sec-json.stringify
            // https://github.com/tc39/proposal-well-formed-stringify
            $(
              { target: "JSON", stat: true, forced: FORCED },
              {
                // eslint-disable-next-line no-unused-vars -- required for `.length`
                stringify: function stringify(it, replacer, space) {
                  var result = $stringify.apply(null, arguments);
                  return typeof result == "string"
                    ? result.replace(re, fix)
                    : result;
                },
              }
            );
          }

          /***/
        },

        /***/ eac5: /***/ function (module, exports) {
          /** Used for built-in method references. */
          var objectProto = Object.prototype;

          /**
           * Checks if `value` is likely a prototype object.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
           */
          function isPrototype(value) {
            var Ctor = value && value.constructor,
              proto =
                (typeof Ctor == "function" && Ctor.prototype) || objectProto;

            return value === proto;
          }

          module.exports = isPrototype;

          /***/
        },

        /***/ ec69: /***/ function (module, exports, __webpack_require__) {
          var arrayLikeKeys = __webpack_require__("6fcd"),
            baseKeys = __webpack_require__("03dd"),
            isArrayLike = __webpack_require__("30c9");

          /**
           * Creates an array of the own enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects. See the
           * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * for more details.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keys(new Foo);
           * // => ['a', 'b'] (iteration order is not guaranteed)
           *
           * _.keys('hi');
           * // => ['0', '1']
           */
          function keys(object) {
            return isArrayLike(object)
              ? arrayLikeKeys(object)
              : baseKeys(object);
          }

          module.exports = keys;

          /***/
        },

        /***/ edfa: /***/ function (module, exports) {
          /**
           * Converts `map` to its key-value pairs.
           *
           * @private
           * @param {Object} map The map to convert.
           * @returns {Array} Returns the key-value pairs.
           */
          function mapToArray(map) {
            var index = -1,
              result = Array(map.size);

            map.forEach(function (value, key) {
              result[++index] = [key, value];
            });
            return result;
          }

          module.exports = mapToArray;

          /***/
        },

        /***/ ef5d: /***/ function (module, exports) {
          /**
           * The base implementation of `_.property` without support for deep paths.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function baseProperty(key) {
            return function (object) {
              return object == null ? undefined : object[key];
            };
          }

          module.exports = baseProperty;

          /***/
        },

        /***/ efb6: /***/ function (module, exports, __webpack_require__) {
          var ListCache = __webpack_require__("5e2e");

          /**
           * Removes all key-value entries from the stack.
           *
           * @private
           * @name clear
           * @memberOf Stack
           */
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }

          module.exports = stackClear;

          /***/
        },

        /***/ f069: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var aCallable = __webpack_require__("59ed");

          var PromiseCapability = function (C) {
            var resolve, reject;
            this.promise = new C(function ($$resolve, $$reject) {
              if (resolve !== undefined || reject !== undefined)
                throw TypeError("Bad Promise constructor");
              resolve = $$resolve;
              reject = $$reject;
            });
            this.resolve = aCallable(resolve);
            this.reject = aCallable(reject);
          };

          // `NewPromiseCapability` abstract operation
          // https://tc39.es/ecma262/#sec-newpromisecapability
          module.exports.f = function (C) {
            return new PromiseCapability(C);
          };

          /***/
        },

        /***/ f30a: /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony export (binding) */ __webpack_require__.d(
            __webpack_exports__,
            "a",
            function () {
              return ApiProxy;
            }
          );
          /* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__("b774");

          class ApiProxy {
            constructor(plugin, hook) {
              this.target = null;
              this.targetQueue = [];
              this.onQueue = [];
              this.plugin = plugin;
              this.hook = hook;
              const defaultSettings = {};
              if (plugin.settings) {
                for (const id in plugin.settings) {
                  const item = plugin.settings[id];
                  defaultSettings[id] = item.defaultValue;
                }
              }
              const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
              let currentSettings = { ...defaultSettings };
              try {
                const raw = localStorage.getItem(localSettingsSaveId);
                const data = JSON.parse(raw);
                Object.assign(currentSettings, data);
              } catch (e) {
                // noop
              }
              this.fallbacks = {
                getSettings() {
                  return currentSettings;
                },
                setSettings(value) {
                  try {
                    localStorage.setItem(
                      localSettingsSaveId,
                      JSON.stringify(value)
                    );
                  } catch (e) {
                    // noop
                  }
                  currentSettings = value;
                },
              };
              hook.on(
                _const__WEBPACK_IMPORTED_MODULE_0__[
                  /* HOOK_PLUGIN_SETTINGS_SET */ "a"
                ],
                (pluginId, value) => {
                  if (pluginId === this.plugin.id) {
                    this.fallbacks.setSettings(value);
                  }
                }
              );
              this.proxiedOn = new Proxy(
                {},
                {
                  get: (_target, prop) => {
                    if (this.target) {
                      return this.target.on[prop];
                    } else {
                      return (...args) => {
                        this.onQueue.push({
                          method: prop,
                          args,
                        });
                      };
                    }
                  },
                }
              );
              this.proxiedTarget = new Proxy(
                {},
                {
                  get: (_target, prop) => {
                    if (this.target) {
                      return this.target[prop];
                    } else if (prop === "on") {
                      return this.proxiedOn;
                    } else if (Object.keys(this.fallbacks).includes(prop)) {
                      return (...args) => {
                        this.targetQueue.push({
                          method: prop,
                          args,
                          resolve: () => {},
                        });
                        return this.fallbacks[prop](...args);
                      };
                    } else {
                      return (...args) => {
                        return new Promise((resolve) => {
                          this.targetQueue.push({
                            method: prop,
                            args,
                            resolve,
                          });
                        });
                      };
                    }
                  },
                }
              );
            }
            async setRealTarget(target) {
              this.target = target;
              for (const item of this.onQueue) {
                this.target.on[item.method](...item.args);
              }
              for (const item of this.targetQueue) {
                item.resolve(await this.target[item.method](...item.args));
              }
            }
          }

          /***/
        },

        /***/ f3b8: /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Text_vue_vue_type_style_index_0_id_7bfe0b0c_lang_less__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__("ffcf");
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Text_vue_vue_type_style_index_0_id_7bfe0b0c_lang_less__WEBPACK_IMPORTED_MODULE_0___default =
            /*#__PURE__*/ __webpack_require__.n(
              _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Text_vue_vue_type_style_index_0_id_7bfe0b0c_lang_less__WEBPACK_IMPORTED_MODULE_0__
            );
          /* unused harmony reexport * */

          /***/
        },

        /***/ f4d6: /***/ function (module, exports, __webpack_require__) {
          var isSymbol = __webpack_require__("ffd6");

          /** Used as references for various `Number` constants. */
          var INFINITY = 1 / 0;

          /**
           * Converts `value` to a string key if it's not a string or symbol.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {string|symbol} Returns the key.
           */
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result = value + "";
            return result == "0" && 1 / value == -INFINITY ? "-0" : result;
          }

          module.exports = toKey;

          /***/
        },

        /***/ f5df: /***/ function (module, exports, __webpack_require__) {
          var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
          var isCallable = __webpack_require__("1626");
          var classofRaw = __webpack_require__("c6b6");
          var wellKnownSymbol = __webpack_require__("b622");

          var TO_STRING_TAG = wellKnownSymbol("toStringTag");
          // ES3 wrong here
          var CORRECT_ARGUMENTS =
            classofRaw(
              (function () {
                return arguments;
              })()
            ) == "Arguments";

          // fallback for IE11 Script Access Denied error
          var tryGet = function (it, key) {
            try {
              return it[key];
            } catch (error) {
              /* empty */
            }
          };

          // getting tag from ES6+ `Object.prototype.toString`
          module.exports = TO_STRING_TAG_SUPPORT
            ? classofRaw
            : function (it) {
                var O, tag, result;
                return it === undefined
                  ? "Undefined"
                  : it === null
                  ? "Null"
                  : // @@toStringTag case
                  typeof (tag = tryGet((O = Object(it)), TO_STRING_TAG)) ==
                    "string"
                  ? tag
                  : // builtinTag case
                  CORRECT_ARGUMENTS
                  ? classofRaw(O)
                  : // ES3 arguments fallback
                  (result = classofRaw(O)) == "Object" && isCallable(O.callee)
                  ? "Arguments"
                  : result;
              };

          /***/
        },

        /***/ f608: /***/ function (module, exports, __webpack_require__) {
          var isArray = __webpack_require__("6747"),
            isSymbol = __webpack_require__("ffd6");

          /** Used to match property names within property paths. */
          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/;

          /**
           * Checks if `value` is a property name and not a property path.
           *
           * @private
           * @param {*} value The value to check.
           * @param {Object} [object] The object to query keys on.
           * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
           */
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (
              type == "number" ||
              type == "symbol" ||
              type == "boolean" ||
              value == null ||
              isSymbol(value)
            ) {
              return true;
            }
            return (
              reIsPlainProp.test(value) ||
              !reIsDeepProp.test(value) ||
              (object != null && value in Object(object))
            );
          }

          module.exports = isKey;

          /***/
        },

        /***/ f772: /***/ function (module, exports, __webpack_require__) {
          var shared = __webpack_require__("5692");
          var uid = __webpack_require__("90e3");

          var keys = shared("keys");

          module.exports = function (key) {
            return keys[key] || (keys[key] = uid(key));
          };

          /***/
        },

        /***/ f8c9: /***/ function (module, exports, __webpack_require__) {
          var $ = __webpack_require__("23e7");
          var global = __webpack_require__("da84");
          var setToStringTag = __webpack_require__("d44e");

          $({ global: true }, { Reflect: {} });

          // Reflect[@@toStringTag] property
          // https://tc39.es/ecma262/#sec-reflect-@@tostringtag
          setToStringTag(global.Reflect, "Reflect", true);

          /***/
        },

        /***/ f9ce: /***/ function (module, exports, __webpack_require__) {
          var baseProperty = __webpack_require__("ef5d"),
            basePropertyDeep = __webpack_require__("e3f8"),
            isKey = __webpack_require__("f608"),
            toKey = __webpack_require__("f4d6");

          /**
           * Creates a function that returns the value at `path` of a given object.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Util
           * @param {Array|string} path The path of the property to get.
           * @returns {Function} Returns the new accessor function.
           * @example
           *
           * var objects = [
           *   { 'a': { 'b': 2 } },
           *   { 'a': { 'b': 1 } }
           * ];
           *
           * _.map(objects, _.property('a.b'));
           * // => [2, 1]
           *
           * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
           * // => [1, 2]
           */
          function property(path) {
            return isKey(path)
              ? baseProperty(toKey(path))
              : basePropertyDeep(path);
          }

          module.exports = property;

          /***/
        },

        /***/ fb15: /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          // ESM COMPAT FLAG
          __webpack_require__.r(__webpack_exports__);

          // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
          // This file is imported into lib/wc client bundles.

          if (typeof window !== "undefined") {
            var currentScript = window.document.currentScript;
            if (true) {
              var getCurrentScript = __webpack_require__("8875");
              currentScript = getCurrentScript();

              // for backward compatibility, because previously we directly included the polyfill
              if (!("currentScript" in document)) {
                Object.defineProperty(document, "currentScript", {
                  get: getCurrentScript,
                });
              }
            }

            var src =
              currentScript &&
              currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
            if (src) {
              __webpack_require__.p = src[1]; // eslint-disable-line
            }
          }

          // Indicate to webpack that this file can be concatenated
          /* harmony default export */ var setPublicPath = null;

          // EXTERNAL MODULE: external {"commonjs":"vue","commonjs2":"vue","root":"Vue"}
          var external_commonjs_vue_commonjs2_vue_root_Vue_ =
            __webpack_require__("8bbf");

          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Previewer/index.vue?vue&type=template&id=7e27f9cc&ts=true

          var _hoisted_1 = {
            class: "dom-render",
          };
          function render(_ctx, _cache, $props, $setup, $data, $options) {
            var _component_render = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"]
            )("render");

            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )("div", _hoisted_1, [
                (Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
                )(true),
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                    "createElementBlock"
                  ]
                )(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"],
                  null,
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"]
                  )(_ctx.components, function (item) {
                    return (
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "openBlock"
                        ]
                      )(),
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createBlock"
                        ]
                      )(
                        _component_render,
                        {
                          rem: _ctx.rem,
                          key: item.id,
                          property: item,
                        },
                        null,
                        8,
                        ["rem", "property"]
                      )
                    );
                  }),
                  128
                )),
              ])
            );
          }
          // CONCATENATED MODULE: ./src/components/Previewer/index.vue?vue&type=template&id=7e27f9cc&ts=true

          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Previewer/render.vue?vue&type=template&id=238b1b0f&ts=true

          var rendervue_type_template_id_238b1b0f_ts_true_hoisted_1 = ["id"];
          function rendervue_type_template_id_238b1b0f_ts_true_render(
            _ctx,
            _cache,
            $props,
            $setup,
            $data,
            $options
          ) {
            var _component_render = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"]
            )("render", true);

            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )(
                "div",
                {
                  ref: "root",
                  id: _ctx.property.id,
                  class: "component-wrapper",
                  style: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "normalizeStyle"
                    ]
                  )(_ctx.style),
                },
                [
                  (Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
                  )(),
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"]
                  )(
                    Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                        "resolveDynamicComponent"
                      ]
                    )(_ctx.property.type),
                    Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                        "normalizeProps"
                      ]
                    )(
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "guardReactiveProps"
                        ]
                      )(_ctx.property)
                    ),
                    {
                      default: Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"]
                      )(function () {
                        return [
                          (Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "openBlock"
                            ]
                          )(true),
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "createElementBlock"
                            ]
                          )(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "Fragment"
                            ],
                            null,
                            Object(
                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                "renderList"
                              ]
                            )(_ctx.property.children, function (item) {
                              return (
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "openBlock"
                                  ]
                                )(),
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "createBlock"
                                  ]
                                )(
                                  _component_render,
                                  {
                                    rem: _ctx.rem,
                                    key: item.id,
                                    property: item,
                                  },
                                  null,
                                  8,
                                  ["rem", "property"]
                                )
                              );
                            }),
                            128
                          )),
                        ];
                      }),
                      _: 1,
                    },
                    16
                  )),
                ],
                12,
                rendervue_type_template_id_238b1b0f_ts_true_hoisted_1
              )
            );
          }
          // CONCATENATED MODULE: ./src/components/Previewer/render.vue?vue&type=template&id=238b1b0f&ts=true

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js
          var es_object_keys = __webpack_require__("b64b");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js
          var es_symbol = __webpack_require__("a4d3");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js
          var es_array_filter = __webpack_require__("4de4");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
          var es_object_to_string = __webpack_require__("d3b7");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js
          var es_object_get_own_property_descriptor =
            __webpack_require__("e439");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js
          var web_dom_collections_for_each = __webpack_require__("159b");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js
          var es_object_get_own_property_descriptors =
            __webpack_require__("dbb4");

          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js

          function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);

            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(object);
              enumerableOnly &&
                (symbols = symbols.filter(function (sym) {
                  return Object.getOwnPropertyDescriptor(
                    object,
                    sym
                  ).enumerable;
                })),
                keys.push.apply(keys, symbols);
            }

            return keys;
          }

          function _objectSpread2(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = null != arguments[i] ? arguments[i] : {};
              i % 2
                ? ownKeys(Object(source), !0).forEach(function (key) {
                    _defineProperty(target, key, source[key]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    target,
                    Object.getOwnPropertyDescriptors(source)
                  )
                : ownKeys(Object(source)).forEach(function (key) {
                    Object.defineProperty(
                      target,
                      key,
                      Object.getOwnPropertyDescriptor(source, key)
                    );
                  });
            }

            return target;
          }
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js
          var es_array_map = __webpack_require__("d81d");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js
          var es_regexp_exec = __webpack_require__("ac1f");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js
          var es_string_split = __webpack_require__("1276");

          // CONCATENATED MODULE: ./src/hooks/useStyle.ts

          /* harmony default export */ var useStyle = function (property) {
            var rem =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : false;
            var getBorderRadius = function getBorderRadius(borderRadius) {
              var arr = (borderRadius === null || borderRadius === void 0
                ? void 0
                : borderRadius.split(",").map(function (item) {
                    return "".concat(item, "px");
                  })) || [0, 0, 0, 0];
              return {
                "border-top-left-radius": arr[0],
                "border-top-right-radius": arr[1],
                "border-bottom-right-radius": arr[2],
                "border-bottom-left-radius": arr[3],
              };
            };

            var formatPositionValues = function formatPositionValues(val) {
              if (val === 0 || val) {
                if (rem) {
                  return "".concat(val / 37.5, "rem");
                }

                return "".concat(val, "px");
              }

              return "";
            };

            return Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
            )(function () {
              var _property$value$paddi,
                _property$value$paddi2,
                _property$value$paddi3,
                _property$value$paddi4,
                _property$value$margi,
                _property$value$margi2,
                _property$value$margi3,
                _property$value$margi4,
                _property$value$borde,
                _property$value$borde2,
                _property$value$borde3,
                _property$value$borde4,
                _property$value$backg,
                _property$value$backg2;

              return _objectSpread2(
                _objectSpread2(
                  {
                    height: property.value.height
                      ? formatPositionValues(property.value.height)
                      : property.value.id === "root"
                      ? 0
                      : "auto",
                    width: property.value.width
                      ? formatPositionValues(property.value.width)
                      : "auto",
                    position: property.value.position,
                    top: formatPositionValues(property.value.top),
                    left: formatPositionValues(property.value.left),
                    right: formatPositionValues(property.value.right),
                    bottom: formatPositionValues(property.value.bottom),
                    paddingTop: formatPositionValues(
                      (_property$value$paddi = property.value.padding) ===
                        null || _property$value$paddi === void 0
                        ? void 0
                        : _property$value$paddi.top
                    ),
                    paddingLeft: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$paddi2 = property.value.padding) ===
                            null || _property$value$paddi2 === void 0
                        ? void 0
                        : _property$value$paddi2.left
                    ),
                    paddingRight: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$paddi3 = property.value.padding) ===
                            null || _property$value$paddi3 === void 0
                        ? void 0
                        : _property$value$paddi3.right
                    ),
                    paddingBottom: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$paddi4 = property.value.padding) ===
                            null || _property$value$paddi4 === void 0
                        ? void 0
                        : _property$value$paddi4.bottom
                    ),
                    marginTop: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$margi = property.value.margin) ===
                            null || _property$value$margi === void 0
                        ? void 0
                        : _property$value$margi.top
                    ),
                    marginLeft: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$margi2 = property.value.margin) ===
                            null || _property$value$margi2 === void 0
                        ? void 0
                        : _property$value$margi2.left
                    ),
                    marginRight: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$margi3 = property.value.margin) ===
                            null || _property$value$margi3 === void 0
                        ? void 0
                        : _property$value$margi3.right
                    ),
                    marginBottom: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$margi4 = property.value.margin) ===
                            null || _property$value$margi4 === void 0
                        ? void 0
                        : _property$value$margi4.bottom
                    ),
                    borderTopWidth: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$borde = property.value.border) ===
                            null || _property$value$borde === void 0
                        ? void 0
                        : _property$value$borde.top
                    ),
                    borderLeftWidth: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$borde2 = property.value.border) ===
                            null || _property$value$borde2 === void 0
                        ? void 0
                        : _property$value$borde2.left
                    ),
                    borderRightWidth: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$borde3 = property.value.border) ===
                            null || _property$value$borde3 === void 0
                        ? void 0
                        : _property$value$borde3.right
                    ),
                    borderBottomWidth: formatPositionValues(
                      property === null || property === void 0
                        ? void 0
                        : (_property$value$borde4 = property.value.border) ===
                            null || _property$value$borde4 === void 0
                        ? void 0
                        : _property$value$borde4.bottom
                    ),
                    borderStyle: property.value.borderStyle,
                    borderColor: property.value.borderColor,
                  },
                  getBorderRadius(property.value.borderRadius)
                ),
                {},
                {
                  background:
                    ((_property$value$backg = property.value.background) ===
                      null || _property$value$backg === void 0
                      ? void 0
                      : _property$value$backg.img) ||
                    ((_property$value$backg2 = property.value.background) ===
                      null || _property$value$backg2 === void 0
                      ? void 0
                      : _property$value$backg2.color),
                }
              );
            });
          };
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/Img/Img.vue?vue&type=template&id=1c1ffb2e&ts=true

          var Imgvue_type_template_id_1c1ffb2e_ts_true_hoisted_1 = ["src"];
          var _hoisted_2 = {
            key: 1,
            class: "empty-img",
          };

          var _hoisted_3 = /*#__PURE__*/ Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["createElementVNode"]
          )(
            "i",
            {
              class: "el-icon-picture-outline",
            },
            null,
            -1
          );

          var _hoisted_4 = [_hoisted_3];
          function Imgvue_type_template_id_1c1ffb2e_ts_true_render(
            _ctx,
            _cache,
            $props,
            $setup,
            $data,
            $options
          ) {
            return _ctx.src
              ? (Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
                )(),
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                    "createElementBlock"
                  ]
                )(
                  "img",
                  {
                    key: 0,
                    src: _ctx.src,
                    class: "",
                    style: Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                        "normalizeStyle"
                      ]
                    )(_ctx.style),
                  },
                  null,
                  12,
                  Imgvue_type_template_id_1c1ffb2e_ts_true_hoisted_1
                ))
              : (Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
                )(),
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                    "createElementBlock"
                  ]
                )("div", _hoisted_2, _hoisted_4));
          }
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Img/Img.vue?vue&type=template&id=1c1ffb2e&ts=true

          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/types.ts
          // 所有组件类型及名称
          var ComponentType;

          (function (ComponentType) {
            ComponentType["Base"] = "Base";
            ComponentType["Container"] = "HContainer";
            ComponentType["Img"] = "HImg";
            ComponentType["Text"] = "HText";
            ComponentType["Tab"] = "HTab";
          })(ComponentType || (ComponentType = {}));

          var ComponentSettingType;

          (function (ComponentSettingType) {
            ComponentSettingType["Base"] = "BaseSetting";
            ComponentSettingType["Container"] = "ContainerSetting";
            ComponentSettingType["Img"] = "ImgSetting";
          })(ComponentSettingType || (ComponentSettingType = {})); // 侧边栏组件列表

          var ComponentList = [
            {
              type: ComponentType.Container,
              icon: "xxx",
              name: "容器",
            },
            {
              type: ComponentType.Img,
              icon: "xxx",
              name: "图片",
            },
            {
              type: ComponentType.Text,
              icon: "xxx",
              name: "文本",
            },
            {
              type: ComponentType.Tab,
              icon: "xxx",
              name: "选项卡",
            },
          ];
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/Img/Img.vue?vue&type=script&lang=ts

          /* harmony default export */ var Imgvue_type_script_lang_ts = Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
          )({
            name: ComponentType.Img,
            inheritAttrs: false,
            props: {
              src: String,
              objectFit: String,
            },
            components: {},
            setup: function setup(props) {
              var style = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(function () {
                return {
                  objectFit: props.objectFit,
                };
              });
              return {
                style: style,
                disableDragImg: function disableDragImg(e) {
                  e.preventDefault();
                  return false;
                },
              };
            },
          });
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Img/Img.vue?vue&type=script&lang=ts

          // EXTERNAL MODULE: ./src/components/Editor/RenderComponent/Img/Img.vue?vue&type=style&index=0&id=1c1ffb2e&lang=less
          var Imgvue_type_style_index_0_id_1c1ffb2e_lang_less =
            __webpack_require__("0fcc");

          // EXTERNAL MODULE: ./node_modules/vue-loader-v16/dist/exportHelper.js
          var exportHelper = __webpack_require__("6b0d");
          var exportHelper_default =
            /*#__PURE__*/ __webpack_require__.n(exportHelper);

          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Img/Img.vue

          const __exports__ = /*#__PURE__*/ exportHelper_default()(
            Imgvue_type_script_lang_ts,
            [["render", Imgvue_type_template_id_1c1ffb2e_ts_true_render]]
          );

          /* harmony default export */ var Img_Img = __exports__;
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/Container/Container.vue?vue&type=template&id=20b88ce2&ts=true

          function Containervue_type_template_id_20b88ce2_ts_true_render(
            _ctx,
            _cache,
            $props,
            $setup,
            $data,
            $options
          ) {
            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )(
                "div",
                {
                  class: "h-container",
                  style: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "normalizeStyle"
                    ]
                  )(_ctx.containerStyle),
                },
                [
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"]
                  )(_ctx.$slots, "default"),
                ],
                4
              )
            );
          }
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Container/Container.vue?vue&type=template&id=20b88ce2&ts=true

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js
          var es_number_constructor = __webpack_require__("a9e3");

          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/Container/Container.vue?vue&type=script&lang=ts

          /* harmony default export */ var Containervue_type_script_lang_ts =
            Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
            )({
              name: "Container",
              inheritAttrs: false,
              props: {
                type: String,
                textAlign: String,
                JustifyContent: String,
                AlignItems: String,
                children: Array,
                display: String,
                color: String,
                fontFamily: String,
                fontSize: Number,
                fontWeight: String,
                fontStyle: String,
                lineHeight: String,
              },
              setup: function setup(props) {
                var containerStyle = Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
                )(function () {
                  return {
                    display: props.display,
                    textAlign: props.textAlign,
                    JustifyContent: props.JustifyContent,
                    AlignItems: props.AlignItems,
                    fontStyle: props.fontStyle,
                    color: props.color,
                    fontWeight: props.fontWeight,
                    fontFamily: props.fontFamily,
                    lineHeight: props.lineHeight
                      ? "".concat(props.lineHeight, "px")
                      : 1,
                    fontSize: props.fontSize
                      ? "".concat(props.fontSize, "px")
                      : "inherit",
                  };
                });
                return {
                  containerStyle: containerStyle,
                };
              },
            });
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Container/Container.vue?vue&type=script&lang=ts

          // EXTERNAL MODULE: ./src/components/Editor/RenderComponent/Container/Container.vue?vue&type=style&index=0&id=20b88ce2&lang=less
          var Containervue_type_style_index_0_id_20b88ce2_lang_less =
            __webpack_require__("fd6a");

          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Container/Container.vue

          const Container_exports_ = /*#__PURE__*/ exportHelper_default()(
            Containervue_type_script_lang_ts,
            [["render", Containervue_type_template_id_20b88ce2_ts_true_render]]
          );

          /* harmony default export */ var Container_Container =
            Container_exports_;
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/Text/Text.vue?vue&type=template&id=7bfe0b0c&ts=true

          function Textvue_type_template_id_7bfe0b0c_ts_true_render(
            _ctx,
            _cache,
            $props,
            $setup,
            $data,
            $options
          ) {
            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )(
                "div",
                {
                  class: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "normalizeClass"
                    ]
                  )([
                    "h-text",
                    [_ctx.overflow ? "line".concat(_ctx.maxLines) : ""],
                  ]),
                  style: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "normalizeStyle"
                    ]
                  )({
                    fontStyle: _ctx.fontStyle,
                    color: _ctx.color,
                    fontWeight: _ctx.fontWeight,
                    fontFamily: _ctx.fontFamily,
                    textAlign: _ctx.textAlign,
                    lineHeight: _ctx.lineHeight
                      ? "".concat(_ctx.lineHeight, "px")
                      : "",
                    fontSize: _ctx.fontSize
                      ? "".concat(_ctx.fontSize, "px")
                      : "",
                  }),
                },
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                    "toDisplayString"
                  ]
                )(_ctx.text),
                7
              )
            );
          }
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Text/Text.vue?vue&type=template&id=7bfe0b0c&ts=true

          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/Text/Text.vue?vue&type=script&lang=ts

          /* harmony default export */ var Textvue_type_script_lang_ts = Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
          )({
            name: ComponentType.Text,
            inheritAttrs: false,
            props: {
              text: String,
              color: String,
              fontFamily: String,
              fontSize: [Number, String],
              fontWeight: String,
              fontStyle: String,
              textAlign: String,
              lineHeight: String,
              overflow: Boolean,
              maxLines: Number,
            },
            components: {},
            setup: function setup() {},
          });
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Text/Text.vue?vue&type=script&lang=ts

          // EXTERNAL MODULE: ./src/components/Editor/RenderComponent/Text/Text.vue?vue&type=style&index=0&id=7bfe0b0c&lang=less
          var Textvue_type_style_index_0_id_7bfe0b0c_lang_less =
            __webpack_require__("f3b8");

          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Text/Text.vue

          const Text_exports_ = /*#__PURE__*/ exportHelper_default()(
            Textvue_type_script_lang_ts,
            [["render", Textvue_type_template_id_7bfe0b0c_ts_true_render]]
          );

          /* harmony default export */ var Text_Text = Text_exports_;
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/Tab/Tab.vue?vue&type=template&id=19c2e5e0&scoped=true&ts=true

          var Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_withScopeId =
            function _withScopeId(n) {
              return (
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["pushScopeId"]
                )("data-v-19c2e5e0"),
                (n = n()),
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["popScopeId"]
                )(),
                n
              );
            };

          var Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_hoisted_1 = {
            class: "tab",
          };
          var Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_hoisted_2 = {
            class: "tab-title hidden-scrollbar",
          };
          var Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_hoisted_3 = {
            class: "tab-title-list",
          };
          var Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_hoisted_4 = [
            "onClick",
          ];
          var _hoisted_5 = {
            class: "tab-container",
          };
          function Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_render(
            _ctx,
            _cache,
            $props,
            $setup,
            $data,
            $options
          ) {
            var _component_component_wrapper = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"]
            )("component-wrapper");

            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )(
                "div",
                Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_hoisted_1,
                [
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "createElementVNode"
                    ]
                  )(
                    "div",
                    Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_hoisted_2,
                    [
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createElementVNode"
                        ]
                      )(
                        "div",
                        Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_hoisted_3,
                        [
                          (Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "openBlock"
                            ]
                          )(true),
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "createElementBlock"
                            ]
                          )(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "Fragment"
                            ],
                            null,
                            Object(
                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                "renderList"
                              ]
                            )(_ctx.children, function (item, index) {
                              return (
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "openBlock"
                                  ]
                                )(),
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "createElementBlock"
                                  ]
                                )(
                                  "div",
                                  {
                                    class: Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "normalizeClass"
                                      ]
                                    )([
                                      "tab-title-list-item",
                                      [
                                        {
                                          active: _ctx.privateActive === index,
                                        },
                                      ],
                                    ]),
                                    key: "tab_title_".concat(item.id),
                                    ref: function ref(el) {
                                      return (_ctx.tabTitleRefs[index] = el);
                                    },
                                    onClick: function onClick($event) {
                                      return _ctx.change(index);
                                    },
                                  },
                                  Object(
                                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                                      "toDisplayString"
                                    ]
                                  )(item.alias),
                                  11,
                                  Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_hoisted_4
                                )
                              );
                            }),
                            128
                          )),
                        ]
                      ),
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createElementVNode"
                        ]
                      )(
                        "div",
                        {
                          class: "tab-title-line",
                          style: Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "normalizeStyle"
                            ]
                          )({
                            transform: _ctx.transform,
                          }),
                        },
                        null,
                        4
                      ),
                    ]
                  ),
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "createElementVNode"
                    ]
                  )("div", _hoisted_5, [
                    (Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
                    )(true),
                    Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                        "createElementBlock"
                      ]
                    )(
                      external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"],
                      null,
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "renderList"
                        ]
                      )(_ctx.children, function (item, index) {
                        return Object(
                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                            "withDirectives"
                          ]
                        )(
                          (Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "openBlock"
                            ]
                          )(),
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "createBlock"
                            ]
                          )(
                            _component_component_wrapper,
                            {
                              key: item.id,
                              property: item,
                            },
                            null,
                            8,
                            ["property"]
                          )),
                          [
                            [
                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                "vShow"
                              ],
                              _ctx.privateActive === index,
                            ],
                          ]
                        );
                      }),
                      128
                    )),
                  ]),
                ]
              )
            );
          }
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Tab/Tab.vue?vue&type=template&id=19c2e5e0&scoped=true&ts=true

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js
          var es_promise = __webpack_require__("e6cf");

          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js

          function asyncGeneratorStep(
            gen,
            resolve,
            reject,
            _next,
            _throw,
            key,
            arg
          ) {
            try {
              var info = gen[key](arg);
              var value = info.value;
            } catch (error) {
              reject(error);
              return;
            }

            if (info.done) {
              resolve(value);
            } else {
              Promise.resolve(value).then(_next, _throw);
            }
          }

          function _asyncToGenerator(fn) {
            return function () {
              var self = this,
                args = arguments;
              return new Promise(function (resolve, reject) {
                var gen = fn.apply(self, args);

                function _next(value) {
                  asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    "next",
                    value
                  );
                }

                function _throw(err) {
                  asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    "throw",
                    err
                  );
                }

                _next(undefined);
              });
            };
          }
          // EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js
          var runtime = __webpack_require__("96cf");

          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/ComponentWrapper/index.vue?vue&type=template&id=1f6e38c2&ts=true

          var ComponentWrappervue_type_template_id_1f6e38c2_ts_true_hoisted_1 =
            ["id"];
          function ComponentWrappervue_type_template_id_1f6e38c2_ts_true_render(
            _ctx,
            _cache,
            $props,
            $setup,
            $data,
            $options
          ) {
            var _component_component_wrapper = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"]
            )("component-wrapper");

            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )(
                "div",
                {
                  id: _ctx.property.id,
                  class: "component-wrapper",
                  ref: "root",
                  style: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "normalizeStyle"
                    ]
                  )(_ctx.style),
                  onDrop:
                    _cache[0] ||
                    (_cache[0] = function ($event) {
                      return _ctx.drop($event, _ctx.property);
                    }),
                  onDragenter:
                    _cache[1] ||
                    (_cache[1] = function ($event) {
                      return _ctx.dragenter($event, _ctx.property);
                    }),
                  onDragleave:
                    _cache[2] ||
                    (_cache[2] = function ($event) {
                      return _ctx.dragleave($event);
                    }),
                  onDragover:
                    _cache[3] ||
                    (_cache[3] = function () {
                      //@ts-ignore
                      return (
                        _ctx.dragover && _ctx.dragover.apply(_ctx, arguments)
                      );
                    }),
                },
                [
                  (Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
                  )(),
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"]
                  )(
                    Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                        "resolveDynamicComponent"
                      ]
                    )(_ctx.property.type),
                    Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                        "normalizeProps"
                      ]
                    )(
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "guardReactiveProps"
                        ]
                      )(_ctx.property)
                    ),
                    {
                      default: Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"]
                      )(function () {
                        return [
                          (Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "openBlock"
                            ]
                          )(true),
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "createElementBlock"
                            ]
                          )(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "Fragment"
                            ],
                            null,
                            Object(
                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                "renderList"
                              ]
                            )(_ctx.property.children, function (item) {
                              return (
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "openBlock"
                                  ]
                                )(),
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "createBlock"
                                  ]
                                )(
                                  _component_component_wrapper,
                                  {
                                    key: item.id,
                                    property: item,
                                  },
                                  null,
                                  8,
                                  ["property"]
                                )
                              );
                            }),
                            128
                          )),
                        ];
                      }),
                      _: 1,
                    },
                    16
                  )),
                ],
                44,
                ComponentWrappervue_type_template_id_1f6e38c2_ts_true_hoisted_1
              )
            );
          }
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/ComponentWrapper/index.vue?vue&type=template&id=1f6e38c2&ts=true

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js
          var es_function_name = __webpack_require__("b0c0");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.json.stringify.js
          var es_json_stringify = __webpack_require__("e9c4");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js
          var es_array_find = __webpack_require__("7db0");

          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
          function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            Object.defineProperty(Constructor, "prototype", {
              writable: false,
            });
            return Constructor;
          }
          // CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js
          // Unique ID creation requires a high quality random # generator. In the browser we therefore
          // require the crypto API and do not support built-in fallback to lower quality random number
          // generators (like Math.random()).
          var getRandomValues;
          var rnds8 = new Uint8Array(16);
          function rng() {
            // lazy load so that environments that need to polyfill have a chance to do so
            if (!getRandomValues) {
              // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
              // find the complete implementation of crypto (msCrypto) on IE11.
              getRandomValues =
                (typeof crypto !== "undefined" &&
                  crypto.getRandomValues &&
                  crypto.getRandomValues.bind(crypto)) ||
                (typeof msCrypto !== "undefined" &&
                  typeof msCrypto.getRandomValues === "function" &&
                  msCrypto.getRandomValues.bind(msCrypto));

              if (!getRandomValues) {
                throw new Error(
                  "crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported"
                );
              }
            }

            return getRandomValues(rnds8);
          }
          // CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js
          /* harmony default export */ var regex =
            /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
          // CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js

          function validate_validate(uuid) {
            return typeof uuid === "string" && regex.test(uuid);
          }

          /* harmony default export */ var esm_browser_validate =
            validate_validate;
          // CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js

          /**
           * Convert array of 16 byte values to UUID string format of the form:
           * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
           */

          var byteToHex = [];

          for (var stringify_i = 0; stringify_i < 256; ++stringify_i) {
            byteToHex.push((stringify_i + 0x100).toString(16).substr(1));
          }

          function stringify(arr) {
            var offset =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : 0;
            // Note: Be careful editing this code!  It's been tuned for performance
            // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
            var uuid = (
              byteToHex[arr[offset + 0]] +
              byteToHex[arr[offset + 1]] +
              byteToHex[arr[offset + 2]] +
              byteToHex[arr[offset + 3]] +
              "-" +
              byteToHex[arr[offset + 4]] +
              byteToHex[arr[offset + 5]] +
              "-" +
              byteToHex[arr[offset + 6]] +
              byteToHex[arr[offset + 7]] +
              "-" +
              byteToHex[arr[offset + 8]] +
              byteToHex[arr[offset + 9]] +
              "-" +
              byteToHex[arr[offset + 10]] +
              byteToHex[arr[offset + 11]] +
              byteToHex[arr[offset + 12]] +
              byteToHex[arr[offset + 13]] +
              byteToHex[arr[offset + 14]] +
              byteToHex[arr[offset + 15]]
            ).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
            // of the following:
            // - One or more input array values don't map to a hex octet (leading to
            // "undefined" in the uuid)
            // - Invalid input values for the RFC `version` or `variant` fields

            if (!esm_browser_validate(uuid)) {
              throw TypeError("Stringified UUID is invalid");
            }

            return uuid;
          }

          /* harmony default export */ var esm_browser_stringify = stringify;
          // CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js

          function v4(options, buf, offset) {
            options = options || {};
            var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

            rnds[6] = (rnds[6] & 0x0f) | 0x40;
            rnds[8] = (rnds[8] & 0x3f) | 0x80; // Copy bytes to buffer, if provided

            if (buf) {
              offset = offset || 0;

              for (var i = 0; i < 16; ++i) {
                buf[offset + i] = rnds[i];
              }

              return buf;
            }

            return esm_browser_stringify(rnds);
          }

          /* harmony default export */ var esm_browser_v4 = v4;
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js
          var es_symbol_description = __webpack_require__("e01a");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js
          var es_symbol_iterator = __webpack_require__("d28b");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
          var es_array_iterator = __webpack_require__("e260");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js
          var es_string_iterator = __webpack_require__("3ca3");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
          var web_dom_collections_iterator = __webpack_require__("ddb0");

          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js

          function _typeof(obj) {
            "@babel/helpers - typeof";

            return (
              (_typeof =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                  ? function (obj) {
                      return typeof obj;
                    }
                  : function (obj) {
                      return obj &&
                        "function" == typeof Symbol &&
                        obj.constructor === Symbol &&
                        obj !== Symbol.prototype
                        ? "symbol"
                        : typeof obj;
                    }),
              _typeof(obj)
            );
          }
          // EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.js
          var web_url = __webpack_require__("2b3d");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/web.url-search-params.js
          var web_url_search_params = __webpack_require__("9861");

          // EXTERNAL MODULE: ./node_modules/lodash/lodash.js
          var lodash = __webpack_require__("2ef0");

          // CONCATENATED MODULE: ./src/util/index.ts

          var fastInitProps = function fastInitProps(source, target) {
            if (source) {
              for (var prop in source) {
                target[prop] = source[prop];
              }
            }
          };
          var util_objectMerge = function objectMerge(source, target) {
            if (source) {
              for (var prop in source) {
                if (_typeof(source) === "object") {
                  target[prop] = Object(lodash["cloneDeep"])(source[prop]);
                } else {
                  target[prop] = source[prop];
                }
              }

              for (var _prop in target) {
                // eslint-disable-next-line no-prototype-builtins
                if (!source.hasOwnProperty(_prop)) {
                  delete target[_prop];
                }
              }
            }
          };
          function eachComponentTreeDown(component, callback) {
            var condition =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : function () {
                    return true;
                  };
            condition(component) && callback(component);

            if (component.children && component.children.length > 0) {
              component.children.forEach(function (item) {
                eachComponentTreeDown(item, callback);
              });
            }
          }
          function findItemById(tree, id) {
            var result = null;

            for (var i = 0; i < tree.length; i++) {
              var _item$children;

              var item = tree[i];

              if (item.id === id) {
                return item;
              }

              if (
                item.children &&
                ((_item$children = item.children) === null ||
                _item$children === void 0
                  ? void 0
                  : _item$children.length) > 0
              ) {
                result = findItemById(item.children, id);
                if (result) return result;
              }
            }
          }
          function findItemAndParentById(tree, id) {
            var result = null;
            tree.forEach(function (item, index) {
              var _item$children2;

              if (item.id === id) {
                result = {
                  parent: tree,
                  index: index,
                };
                return;
              }

              if (
                item.children &&
                ((_item$children2 = item.children) === null ||
                _item$children2 === void 0
                  ? void 0
                  : _item$children2.length) > 0
              ) {
                result = findItemAndParentById(item.children, id);
                return;
              }
            });
            return result;
          }
          function getDebounceCommit(commit, commitType) {
            var commitHandel = function commitHandel(payload) {
              commit(commitType, payload);
            };

            return Object(lodash["debounce"])(commitHandel, 500);
          }
          function getThrottleCommit(commit, commitType) {
            var commitHandel = function commitHandel(payload) {
              commit(commitType, payload);
            };

            return Object(lodash["throttle"])(commitHandel, 500);
          }
          function downLoadContent(name, content) {
            var link = URL.createObjectURL(new Blob([content]));
            var a = document.createElement("a");
            a.download = name;
            a.href = link;
            a.click();
          }
          function getCache(key) {
            var cache = localStorage.getItem(key);
            return cache ? JSON.parse(cache) : undefined;
          }
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Component/index.ts

          /**
           *基础组件类，包含一个组件最基本的信息
           */

          var Component_Component = /*#__PURE__*/ _createClass(
            function Component(props) {
              _classCallCheck(this, Component);

              _defineProperty(this, "type", ComponentType.Base);

              _defineProperty(this, "id", void 0);

              _defineProperty(this, "width", "");

              _defineProperty(this, "height", 100);

              _defineProperty(this, "position", "static");

              _defineProperty(this, "lock", false);

              _defineProperty(this, "alias", "");

              _defineProperty(this, "borderRadius", "0,0,0,0");

              _defineProperty(this, "borderStyle", "solid");

              _defineProperty(this, "background", {
                color: "",
                img: "",
              });

              this.id = esm_browser_v4();
              this.alias =
                props === null || props === void 0 ? void 0 : props.type;
              fastInitProps(props, this);
            }
          );

          /* harmony default export */ var RenderComponent_Component =
            Component_Component;
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
          function _assertThisInitialized(self) {
            if (self === void 0) {
              throw new ReferenceError(
                "this hasn't been initialised - super() hasn't been called"
              );
            }

            return self;
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
          function _setPrototypeOf(o, p) {
            _setPrototypeOf =
              Object.setPrototypeOf ||
              function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

            return _setPrototypeOf(o, p);
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            }

            Object.defineProperty(subClass, "prototype", {
              value: Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true,
                },
              }),
              writable: false,
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
          }
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.construct.js
          var es_reflect_construct = __webpack_require__("4ae1");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.to-string-tag.js
          var es_reflect_to_string_tag = __webpack_require__("f8c9");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-prototype-of.js
          var es_object_get_prototype_of = __webpack_require__("3410");

          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js

          function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf
              ? Object.getPrototypeOf
              : function _getPrototypeOf(o) {
                  return o.__proto__ || Object.getPrototypeOf(o);
                };
            return _getPrototypeOf(o);
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js

          function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct)
              return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;

            try {
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function () {})
              );
              return true;
            } catch (e) {
              return false;
            }
          }
          // EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js
          var helpers_typeof = __webpack_require__("7037");
          var typeof_default =
            /*#__PURE__*/ __webpack_require__.n(helpers_typeof);

          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js

          function _possibleConstructorReturn(self, call) {
            if (
              call &&
              (typeof_default()(call) === "object" ||
                typeof call === "function")
            ) {
              return call;
            } else if (call !== void 0) {
              throw new TypeError(
                "Derived constructors may only return object or undefined"
              );
            }

            return _assertThisInitialized(self);
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js

          function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();
            return function _createSuperInternal() {
              var Super = _getPrototypeOf(Derived),
                result;

              if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
              } else {
                result = Super.apply(this, arguments);
              }

              return _possibleConstructorReturn(this, result);
            };
          }
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Container/index.ts

          // 主轴（横轴）方向上的对齐方式

          var JUSTIFY_CONTENT;

          (function (JUSTIFY_CONTENT) {
            JUSTIFY_CONTENT["START"] = "flex-start";
            JUSTIFY_CONTENT["END"] = "flex-end";
            JUSTIFY_CONTENT["CENTER"] = "center";
            JUSTIFY_CONTENT["BETWEEN"] = "space-between";
            JUSTIFY_CONTENT["AROUND"] = "space-around";
          })(JUSTIFY_CONTENT || (JUSTIFY_CONTENT = {}));

          var JustifyContentList = [
            {
              name: "左对齐",
              value: JUSTIFY_CONTENT.START,
            },
            {
              name: "右对齐",
              value: JUSTIFY_CONTENT.END,
            },
            {
              name: "居中对齐",
              value: JUSTIFY_CONTENT.CENTER,
            },
            {
              name: "两端对齐",
              value: JUSTIFY_CONTENT.BETWEEN,
            },
            {
              name: "等分间隔",
              value: JUSTIFY_CONTENT.AROUND,
            },
          ];
          var ALIGN_ITEMS;

          (function (ALIGN_ITEMS) {
            ALIGN_ITEMS["START"] = "flex-start";
            ALIGN_ITEMS["END"] = "flex-end";
            ALIGN_ITEMS["CENTER"] = "center";
            ALIGN_ITEMS["BASELINE"] = "baseline";
            ALIGN_ITEMS["STRETCH"] = "stretch";
          })(ALIGN_ITEMS || (ALIGN_ITEMS = {}));

          var AlignItemsList = [
            {
              name: "默认（撑满容器）",
              value: ALIGN_ITEMS.STRETCH,
            },
            {
              name: "起点对齐",
              value: ALIGN_ITEMS.START,
            },
            {
              name: "终点对齐",
              value: ALIGN_ITEMS.END,
            },
            {
              name: "居中对齐",
              value: ALIGN_ITEMS.CENTER,
            },
            {
              name: "文本基线对齐",
              value: ALIGN_ITEMS.BASELINE,
            },
          ]; // 布局类型

          var DISPLAY;

          (function (DISPLAY) {
            DISPLAY["BLOCK"] = "block";
            DISPLAY["FLEX"] = "flex";
          })(DISPLAY || (DISPLAY = {}));

          var displayList = [
            {
              name: "默认布局",
              value: DISPLAY.BLOCK,
            },
            {
              name: "弹性布局",
              value: DISPLAY.FLEX,
            },
          ];
          /**
           * 容器组件，继承与基础组件，实现容器的接口
           */

          var RenderComponent_Container_Container = /*#__PURE__*/ (function (
            _Component
          ) {
            _inherits(Container, _Component);

            var _super = _createSuper(Container);

            function Container(props) {
              var _this;

              _classCallCheck(this, Container);

              _this = _super.call(this, props);

              _defineProperty(
                _assertThisInitialized(_this),
                "type",
                ComponentType.Container
              );

              _defineProperty(
                _assertThisInitialized(_this),
                "isContainer",
                true
              );

              _defineProperty(_assertThisInitialized(_this), "children", []);

              _defineProperty(
                _assertThisInitialized(_this),
                "JustifyContent",
                JUSTIFY_CONTENT.START
              );

              _defineProperty(
                _assertThisInitialized(_this),
                "AlignItems",
                ALIGN_ITEMS.STRETCH
              );

              _defineProperty(_assertThisInitialized(_this), "width", 200);

              _defineProperty(_assertThisInitialized(_this), "height", 200);

              _defineProperty(
                _assertThisInitialized(_this),
                "display",
                DISPLAY.BLOCK
              );

              _defineProperty(_assertThisInitialized(_this), "color", "#000");

              _defineProperty(
                _assertThisInitialized(_this),
                "fontFamily",
                "'PingFang SC', 'STHeitiSC-Light', 'Helvetica-Light', arial,  sans-serif, 'Droid Sans Fallback'"
              );

              _defineProperty(_assertThisInitialized(_this), "fontSize", 14);

              _defineProperty(
                _assertThisInitialized(_this),
                "fontStyle",
                "normal"
              );

              _defineProperty(
                _assertThisInitialized(_this),
                "fontWeight",
                "normal"
              );

              _defineProperty(
                _assertThisInitialized(_this),
                "textAlign",
                "left"
              );

              fastInitProps(props, _assertThisInitialized(_this));
              return _this;
            }

            return _createClass(Container);
          })(RenderComponent_Component);

          /* harmony default export */ var RenderComponent_Container =
            RenderComponent_Container_Container;
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Img/index.ts

          var objectFitList = [
            {
              name: "覆盖",
              value: "cover",
            },
            {
              name: "包含",
              value: "contain",
            },
          ];

          var RenderComponent_Img_Img = /*#__PURE__*/ (function (_Component) {
            _inherits(Img, _Component);

            var _super = _createSuper(Img);

            function Img(props) {
              var _this;

              _classCallCheck(this, Img);

              _this = _super.call(this, props);

              _defineProperty(
                _assertThisInitialized(_this),
                "type",
                ComponentType.Img
              );

              _defineProperty(
                _assertThisInitialized(_this),
                "objectFit",
                "cover"
              );

              _defineProperty(
                _assertThisInitialized(_this),
                "src",
                "https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F2018-01-09%2F5a54397bf0512.jpg%3Fdown&refer=http%3A%2F%2Fpic1.win4000.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642234674&t=38100f2faabb0ecc91c226718de13632"
              );

              _defineProperty(_assertThisInitialized(_this), "width", "");

              _defineProperty(_assertThisInitialized(_this), "height", 100);

              fastInitProps(props, _assertThisInitialized(_this));
              return _this;
            }

            return _createClass(Img);
          })(RenderComponent_Component);

          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Text/index.ts

          var fontFamilyList = [
            {
              name: "默认",
              value:
                "'PingFang SC', 'STHeitiSC-Light', 'Helvetica-Light', arial,  sans-serif, 'Droid Sans Fallback'",
            },
            {
              name: "PingFang-SC-Regular",
              value: "PingFang-SC-Regular, PingFang-SC",
            },
            {
              name: "PingFangSC-Medium",
              value: "PingFangSC-Medium, PingFang SC",
            },
            {
              name: "DINAlternate-Bold",
              value: "DINAlternate-Bold, DINAlternate;",
            },
            {
              name: "继承父级",
              value: "",
            },
          ];

          var RenderComponent_Text_Text = /*#__PURE__*/ (function (_Component) {
            _inherits(Text, _Component);

            var _super = _createSuper(Text);

            function Text(props) {
              var _this;

              _classCallCheck(this, Text);

              _this = _super.call(this, props);

              _defineProperty(
                _assertThisInitialized(_this),
                "type",
                ComponentType.Text
              );

              _defineProperty(_assertThisInitialized(_this), "text", "text");

              _defineProperty(_assertThisInitialized(_this), "color", "");

              _defineProperty(_assertThisInitialized(_this), "lineHeight", "");

              _defineProperty(_assertThisInitialized(_this), "fontFamily", "");

              _defineProperty(_assertThisInitialized(_this), "textAlign", "");

              _defineProperty(_assertThisInitialized(_this), "fontStyle", "");

              _defineProperty(_assertThisInitialized(_this), "fontWeight", "");

              _defineProperty(_assertThisInitialized(_this), "overflow", false);

              _defineProperty(_assertThisInitialized(_this), "fontSize", "");

              _defineProperty(_assertThisInitialized(_this), "maxLines", 1);

              _defineProperty(_assertThisInitialized(_this), "height", "");

              fastInitProps(props, _assertThisInitialized(_this));
              return _this;
            }

            return _createClass(Text);
          })(RenderComponent_Component);

          /* harmony default export */ var RenderComponent_Text =
            RenderComponent_Text_Text;
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/CommonInterface/Container.ts

          /**
           * 继承于基础组件的容器组件基类
           */

          var Container_CommonContainer = /*#__PURE__*/ (function (_Component) {
            _inherits(CommonContainer, _Component);

            var _super = _createSuper(CommonContainer);

            function CommonContainer(props) {
              var _this;

              _classCallCheck(this, CommonContainer);

              _this = _super.call(this, props);

              _defineProperty(
                _assertThisInitialized(_this),
                "isContainer",
                true
              );

              _defineProperty(_assertThisInitialized(_this), "children", []);

              fastInitProps(props, _assertThisInitialized(_this));
              return _this;
            }

            return _createClass(CommonContainer);
          })(RenderComponent_Component);
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Tab/index.ts

          var Tab_getNewTabContainer = function getNewTabContainer() {
            var name =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : "新标签";
            return new RenderComponent_Container({
              isRoot: true,
              width: "",
              height: "",
              alias: name,
            });
          };

          var Tab_Tab = /*#__PURE__*/ (function (_CommonContainer) {
            _inherits(Tab, _CommonContainer);

            var _super = _createSuper(Tab);

            function Tab(props) {
              var _this;

              _classCallCheck(this, Tab);

              _this = _super.call(this, props);

              _defineProperty(
                _assertThisInitialized(_this),
                "type",
                ComponentType.Tab
              );

              _defineProperty(_assertThisInitialized(_this), "width", "");

              _defineProperty(_assertThisInitialized(_this), "height", 300);

              _defineProperty(_assertThisInitialized(_this), "children", [
                Tab_getNewTabContainer("标签1"),
                Tab_getNewTabContainer("标签2"),
              ]);

              _defineProperty(_assertThisInitialized(_this), "active", 0);

              fastInitProps(props, _assertThisInitialized(_this));
              return _this;
            }

            return _createClass(Tab);
          })(Container_CommonContainer);

          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Factory.ts

          /**
           *构造组件的工厂函数
           */

          var Factory_ComponentFactory = /*#__PURE__*/ (function () {
            function ComponentFactory() {
              _classCallCheck(this, ComponentFactory);
            }

            _createClass(ComponentFactory, null, [
              {
                key: "createComponent",
                value: function createComponent(
                  type, // 通过传入的type映射作component的类型推断
                  component
                ) {
                  switch (type) {
                    case ComponentType.Base:
                      return new RenderComponent_Component(component);

                    case ComponentType.Container:
                      return new RenderComponent_Container(component);

                    case ComponentType.Img:
                      return new RenderComponent_Img_Img(component);

                    case ComponentType.Text:
                      return new RenderComponent_Text(component);

                    case ComponentType.Tab:
                      return new Tab_Tab(component);
                  }
                },
              },
            ]);

            return ComponentFactory;
          })();

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js
          var es_array_includes = __webpack_require__("caad");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js
          var es_string_includes = __webpack_require__("2532");

          // EXTERNAL MODULE: ./node_modules/@vue/devtools-api/lib/esm/index.js
          var esm = __webpack_require__("3f4e");

          // CONCATENATED MODULE: ./node_modules/vuex/dist/vuex.esm-browser.js
          /*!
           * vuex v4.0.2
           * (c) 2021 Evan You
           * @license MIT
           */

          var storeKey = "store";

          function useStore(key) {
            if (key === void 0) key = null;

            return Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["inject"]
            )(key !== null ? key : storeKey);
          }

          /**
           * Get the first item that pass the test
           * by second argument function
           *
           * @param {Array} list
           * @param {Function} f
           * @return {*}
           */
          function vuex_esm_browser_find(list, f) {
            return list.filter(f)[0];
          }

          /**
           * Deep copy the given object considering circular structure.
           * This function caches all nested objects and its copies.
           * If it detects circular structure, use cached copy to avoid infinite loop.
           *
           * @param {*} obj
           * @param {Array<Object>} cache
           * @return {*}
           */
          function deepCopy(obj, cache) {
            if (cache === void 0) cache = [];

            // just return if obj is immutable value
            if (obj === null || typeof obj !== "object") {
              return obj;
            }

            // if obj is hit, it is in circular structure
            var hit = vuex_esm_browser_find(cache, function (c) {
              return c.original === obj;
            });
            if (hit) {
              return hit.copy;
            }

            var copy = Array.isArray(obj) ? [] : {};
            // put the copy into cache at first
            // because we want to refer it in recursive deepCopy
            cache.push({
              original: obj,
              copy: copy,
            });

            Object.keys(obj).forEach(function (key) {
              copy[key] = deepCopy(obj[key], cache);
            });

            return copy;
          }

          /**
           * forEach for object
           */
          function forEachValue(obj, fn) {
            Object.keys(obj).forEach(function (key) {
              return fn(obj[key], key);
            });
          }

          function isObject(obj) {
            return obj !== null && typeof obj === "object";
          }

          function isPromise(val) {
            return val && typeof val.then === "function";
          }

          function assert(condition, msg) {
            if (!condition) {
              throw new Error("[vuex] " + msg);
            }
          }

          function partial(fn, arg) {
            return function () {
              return fn(arg);
            };
          }

          function genericSubscribe(fn, subs, options) {
            if (subs.indexOf(fn) < 0) {
              options && options.prepend ? subs.unshift(fn) : subs.push(fn);
            }
            return function () {
              var i = subs.indexOf(fn);
              if (i > -1) {
                subs.splice(i, 1);
              }
            };
          }

          function resetStore(store, hot) {
            store._actions = Object.create(null);
            store._mutations = Object.create(null);
            store._wrappedGetters = Object.create(null);
            store._modulesNamespaceMap = Object.create(null);
            var state = store.state;
            // init all modules
            installModule(store, state, [], store._modules.root, true);
            // reset state
            resetStoreState(store, state, hot);
          }

          function resetStoreState(store, state, hot) {
            var oldState = store._state;

            // bind store public getters
            store.getters = {};
            // reset local getters cache
            store._makeLocalGettersCache = Object.create(null);
            var wrappedGetters = store._wrappedGetters;
            var computedObj = {};
            forEachValue(wrappedGetters, function (fn, key) {
              // use computed to leverage its lazy-caching mechanism
              // direct inline function use will lead to closure preserving oldState.
              // using partial to return function with only arguments preserved in closure environment.
              computedObj[key] = partial(fn, store);
              Object.defineProperty(store.getters, key, {
                // TODO: use `computed` when it's possible. at the moment we can't due to
                // https://github.com/vuejs/vuex/pull/1883
                get: function () {
                  return computedObj[key]();
                },
                enumerable: true, // for local getters
              });
            });

            store._state = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["reactive"]
            )({
              data: state,
            });

            // enable strict mode for new state
            if (store.strict) {
              enableStrictMode(store);
            }

            if (oldState) {
              if (hot) {
                // dispatch changes in all subscribed watchers
                // to force getter re-evaluation for hot reloading.
                store._withCommit(function () {
                  oldState.data = null;
                });
              }
            }
          }

          function installModule(store, rootState, path, module, hot) {
            var isRoot = !path.length;
            var namespace = store._modules.getNamespace(path);

            // register in namespace map
            if (module.namespaced) {
              if (store._modulesNamespaceMap[namespace] && true) {
                console.error(
                  "[vuex] duplicate namespace " +
                    namespace +
                    " for the namespaced module " +
                    path.join("/")
                );
              }
              store._modulesNamespaceMap[namespace] = module;
            }

            // set state
            if (!isRoot && !hot) {
              var parentState = getNestedState(rootState, path.slice(0, -1));
              var moduleName = path[path.length - 1];
              store._withCommit(function () {
                {
                  if (moduleName in parentState) {
                    console.warn(
                      '[vuex] state field "' +
                        moduleName +
                        '" was overridden by a module with the same name at "' +
                        path.join(".") +
                        '"'
                    );
                  }
                }
                parentState[moduleName] = module.state;
              });
            }

            var local = (module.context = makeLocalContext(
              store,
              namespace,
              path
            ));

            module.forEachMutation(function (mutation, key) {
              var namespacedType = namespace + key;
              registerMutation(store, namespacedType, mutation, local);
            });

            module.forEachAction(function (action, key) {
              var type = action.root ? key : namespace + key;
              var handler = action.handler || action;
              registerAction(store, type, handler, local);
            });

            module.forEachGetter(function (getter, key) {
              var namespacedType = namespace + key;
              registerGetter(store, namespacedType, getter, local);
            });

            module.forEachChild(function (child, key) {
              installModule(store, rootState, path.concat(key), child, hot);
            });
          }

          /**
           * make localized dispatch, commit, getters and state
           * if there is no namespace, just use root ones
           */
          function makeLocalContext(store, namespace, path) {
            var noNamespace = namespace === "";

            var local = {
              dispatch: noNamespace
                ? store.dispatch
                : function (_type, _payload, _options) {
                    var args = unifyObjectStyle(_type, _payload, _options);
                    var payload = args.payload;
                    var options = args.options;
                    var type = args.type;

                    if (!options || !options.root) {
                      type = namespace + type;
                      if (!store._actions[type]) {
                        console.error(
                          "[vuex] unknown local action type: " +
                            args.type +
                            ", global type: " +
                            type
                        );
                        return;
                      }
                    }

                    return store.dispatch(type, payload);
                  },

              commit: noNamespace
                ? store.commit
                : function (_type, _payload, _options) {
                    var args = unifyObjectStyle(_type, _payload, _options);
                    var payload = args.payload;
                    var options = args.options;
                    var type = args.type;

                    if (!options || !options.root) {
                      type = namespace + type;
                      if (!store._mutations[type]) {
                        console.error(
                          "[vuex] unknown local mutation type: " +
                            args.type +
                            ", global type: " +
                            type
                        );
                        return;
                      }
                    }

                    store.commit(type, payload, options);
                  },
            };

            // getters and state object must be gotten lazily
            // because they will be changed by state update
            Object.defineProperties(local, {
              getters: {
                get: noNamespace
                  ? function () {
                      return store.getters;
                    }
                  : function () {
                      return makeLocalGetters(store, namespace);
                    },
              },
              state: {
                get: function () {
                  return getNestedState(store.state, path);
                },
              },
            });

            return local;
          }

          function makeLocalGetters(store, namespace) {
            if (!store._makeLocalGettersCache[namespace]) {
              var gettersProxy = {};
              var splitPos = namespace.length;
              Object.keys(store.getters).forEach(function (type) {
                // skip if the target getter is not match this namespace
                if (type.slice(0, splitPos) !== namespace) {
                  return;
                }

                // extract local getter type
                var localType = type.slice(splitPos);

                // Add a port to the getters proxy.
                // Define as getter property because
                // we do not want to evaluate the getters in this time.
                Object.defineProperty(gettersProxy, localType, {
                  get: function () {
                    return store.getters[type];
                  },
                  enumerable: true,
                });
              });
              store._makeLocalGettersCache[namespace] = gettersProxy;
            }

            return store._makeLocalGettersCache[namespace];
          }

          function registerMutation(store, type, handler, local) {
            var entry = store._mutations[type] || (store._mutations[type] = []);
            entry.push(function wrappedMutationHandler(payload) {
              handler.call(store, local.state, payload);
            });
          }

          function registerAction(store, type, handler, local) {
            var entry = store._actions[type] || (store._actions[type] = []);
            entry.push(function wrappedActionHandler(payload) {
              var res = handler.call(
                store,
                {
                  dispatch: local.dispatch,
                  commit: local.commit,
                  getters: local.getters,
                  state: local.state,
                  rootGetters: store.getters,
                  rootState: store.state,
                },
                payload
              );
              if (!isPromise(res)) {
                res = Promise.resolve(res);
              }
              if (store._devtoolHook) {
                return res.catch(function (err) {
                  store._devtoolHook.emit("vuex:error", err);
                  throw err;
                });
              } else {
                return res;
              }
            });
          }

          function registerGetter(store, type, rawGetter, local) {
            if (store._wrappedGetters[type]) {
              {
                console.error("[vuex] duplicate getter key: " + type);
              }
              return;
            }
            store._wrappedGetters[type] = function wrappedGetter(store) {
              return rawGetter(
                local.state, // local state
                local.getters, // local getters
                store.state, // root state
                store.getters // root getters
              );
            };
          }

          function enableStrictMode(store) {
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
              function () {
                return store._state.data;
              },
              function () {
                {
                  assert(
                    store._committing,
                    "do not mutate vuex store state outside mutation handlers."
                  );
                }
              },
              { deep: true, flush: "sync" }
            );
          }

          function getNestedState(state, path) {
            return path.reduce(function (state, key) {
              return state[key];
            }, state);
          }

          function unifyObjectStyle(type, payload, options) {
            if (isObject(type) && type.type) {
              options = payload;
              payload = type;
              type = type.type;
            }

            {
              assert(
                typeof type === "string",
                "expects string as the type, but found " + typeof type + "."
              );
            }

            return { type: type, payload: payload, options: options };
          }

          var LABEL_VUEX_BINDINGS = "vuex bindings";
          var MUTATIONS_LAYER_ID = "vuex:mutations";
          var ACTIONS_LAYER_ID = "vuex:actions";
          var INSPECTOR_ID = "vuex";

          var actionId = 0;

          function addDevtools(app, store) {
            Object(esm["setupDevtoolsPlugin"])(
              {
                id: "org.vuejs.vuex",
                app: app,
                label: "Vuex",
                homepage: "https://next.vuex.vuejs.org/",
                logo: "https://vuejs.org/images/icons/favicon-96x96.png",
                packageName: "vuex",
                componentStateTypes: [LABEL_VUEX_BINDINGS],
              },
              function (api) {
                api.addTimelineLayer({
                  id: MUTATIONS_LAYER_ID,
                  label: "Vuex Mutations",
                  color: COLOR_LIME_500,
                });

                api.addTimelineLayer({
                  id: ACTIONS_LAYER_ID,
                  label: "Vuex Actions",
                  color: COLOR_LIME_500,
                });

                api.addInspector({
                  id: INSPECTOR_ID,
                  label: "Vuex",
                  icon: "storage",
                  treeFilterPlaceholder: "Filter stores...",
                });

                api.on.getInspectorTree(function (payload) {
                  if (
                    payload.app === app &&
                    payload.inspectorId === INSPECTOR_ID
                  ) {
                    if (payload.filter) {
                      var nodes = [];
                      flattenStoreForInspectorTree(
                        nodes,
                        store._modules.root,
                        payload.filter,
                        ""
                      );
                      payload.rootNodes = nodes;
                    } else {
                      payload.rootNodes = [
                        formatStoreForInspectorTree(store._modules.root, ""),
                      ];
                    }
                  }
                });

                api.on.getInspectorState(function (payload) {
                  if (
                    payload.app === app &&
                    payload.inspectorId === INSPECTOR_ID
                  ) {
                    var modulePath = payload.nodeId;
                    makeLocalGetters(store, modulePath);
                    payload.state = formatStoreForInspectorState(
                      getStoreModule(store._modules, modulePath),
                      modulePath === "root"
                        ? store.getters
                        : store._makeLocalGettersCache,
                      modulePath
                    );
                  }
                });

                api.on.editInspectorState(function (payload) {
                  if (
                    payload.app === app &&
                    payload.inspectorId === INSPECTOR_ID
                  ) {
                    var modulePath = payload.nodeId;
                    var path = payload.path;
                    if (modulePath !== "root") {
                      path = modulePath.split("/").filter(Boolean).concat(path);
                    }
                    store._withCommit(function () {
                      payload.set(store._state.data, path, payload.state.value);
                    });
                  }
                });

                store.subscribe(function (mutation, state) {
                  var data = {};

                  if (mutation.payload) {
                    data.payload = mutation.payload;
                  }

                  data.state = state;

                  api.notifyComponentUpdate();
                  api.sendInspectorTree(INSPECTOR_ID);
                  api.sendInspectorState(INSPECTOR_ID);

                  api.addTimelineEvent({
                    layerId: MUTATIONS_LAYER_ID,
                    event: {
                      time: Date.now(),
                      title: mutation.type,
                      data: data,
                    },
                  });
                });

                store.subscribeAction({
                  before: function (action, state) {
                    var data = {};
                    if (action.payload) {
                      data.payload = action.payload;
                    }
                    action._id = actionId++;
                    action._time = Date.now();
                    data.state = state;

                    api.addTimelineEvent({
                      layerId: ACTIONS_LAYER_ID,
                      event: {
                        time: action._time,
                        title: action.type,
                        groupId: action._id,
                        subtitle: "start",
                        data: data,
                      },
                    });
                  },
                  after: function (action, state) {
                    var data = {};
                    var duration = Date.now() - action._time;
                    data.duration = {
                      _custom: {
                        type: "duration",
                        display: duration + "ms",
                        tooltip: "Action duration",
                        value: duration,
                      },
                    };
                    if (action.payload) {
                      data.payload = action.payload;
                    }
                    data.state = state;

                    api.addTimelineEvent({
                      layerId: ACTIONS_LAYER_ID,
                      event: {
                        time: Date.now(),
                        title: action.type,
                        groupId: action._id,
                        subtitle: "end",
                        data: data,
                      },
                    });
                  },
                });
              }
            );
          }

          // extracted from tailwind palette
          var COLOR_LIME_500 = 0x84cc16;
          var COLOR_DARK = 0x666666;
          var COLOR_WHITE = 0xffffff;

          var TAG_NAMESPACED = {
            label: "namespaced",
            textColor: COLOR_WHITE,
            backgroundColor: COLOR_DARK,
          };

          /**
           * @param {string} path
           */
          function extractNameFromPath(path) {
            return path && path !== "root"
              ? path.split("/").slice(-2, -1)[0]
              : "Root";
          }

          /**
           * @param {*} module
           * @return {import('@vue/devtools-api').CustomInspectorNode}
           */
          function formatStoreForInspectorTree(module, path) {
            return {
              id: path || "root",
              // all modules end with a `/`, we want the last segment only
              // cart/ -> cart
              // nested/cart/ -> cart
              label: extractNameFromPath(path),
              tags: module.namespaced ? [TAG_NAMESPACED] : [],
              children: Object.keys(module._children).map(function (
                moduleName
              ) {
                return formatStoreForInspectorTree(
                  module._children[moduleName],
                  path + moduleName + "/"
                );
              }),
            };
          }

          /**
           * @param {import('@vue/devtools-api').CustomInspectorNode[]} result
           * @param {*} module
           * @param {string} filter
           * @param {string} path
           */
          function flattenStoreForInspectorTree(result, module, filter, path) {
            if (path.includes(filter)) {
              result.push({
                id: path || "root",
                label: path.endsWith("/")
                  ? path.slice(0, path.length - 1)
                  : path || "Root",
                tags: module.namespaced ? [TAG_NAMESPACED] : [],
              });
            }
            Object.keys(module._children).forEach(function (moduleName) {
              flattenStoreForInspectorTree(
                result,
                module._children[moduleName],
                filter,
                path + moduleName + "/"
              );
            });
          }

          /**
           * @param {*} module
           * @return {import('@vue/devtools-api').CustomInspectorState}
           */
          function formatStoreForInspectorState(module, getters, path) {
            getters = path === "root" ? getters : getters[path];
            var gettersKeys = Object.keys(getters);
            var storeState = {
              state: Object.keys(module.state).map(function (key) {
                return {
                  key: key,
                  editable: true,
                  value: module.state[key],
                };
              }),
            };

            if (gettersKeys.length) {
              var tree = transformPathsToObjectTree(getters);
              storeState.getters = Object.keys(tree).map(function (key) {
                return {
                  key: key.endsWith("/") ? extractNameFromPath(key) : key,
                  editable: false,
                  value: canThrow(function () {
                    return tree[key];
                  }),
                };
              });
            }

            return storeState;
          }

          function transformPathsToObjectTree(getters) {
            var result = {};
            Object.keys(getters).forEach(function (key) {
              var path = key.split("/");
              if (path.length > 1) {
                var target = result;
                var leafKey = path.pop();
                path.forEach(function (p) {
                  if (!target[p]) {
                    target[p] = {
                      _custom: {
                        value: {},
                        display: p,
                        tooltip: "Module",
                        abstract: true,
                      },
                    };
                  }
                  target = target[p]._custom.value;
                });
                target[leafKey] = canThrow(function () {
                  return getters[key];
                });
              } else {
                result[key] = canThrow(function () {
                  return getters[key];
                });
              }
            });
            return result;
          }

          function getStoreModule(moduleMap, path) {
            var names = path.split("/").filter(function (n) {
              return n;
            });
            return names.reduce(
              function (module, moduleName, i) {
                var child = module[moduleName];
                if (!child) {
                  throw new Error(
                    'Missing module "' +
                      moduleName +
                      '" for path "' +
                      path +
                      '".'
                  );
                }
                return i === names.length - 1 ? child : child._children;
              },
              path === "root" ? moduleMap : moduleMap.root._children
            );
          }

          function canThrow(cb) {
            try {
              return cb();
            } catch (e) {
              return e;
            }
          }

          // Base data struct for store's module, package with some attribute and method
          var Module = function Module(rawModule, runtime) {
            this.runtime = runtime;
            // Store some children item
            this._children = Object.create(null);
            // Store the origin module object which passed by programmer
            this._rawModule = rawModule;
            var rawState = rawModule.state;

            // Store the origin module's state
            this.state =
              (typeof rawState === "function" ? rawState() : rawState) || {};
          };

          var prototypeAccessors$1 = { namespaced: { configurable: true } };

          prototypeAccessors$1.namespaced.get = function () {
            return !!this._rawModule.namespaced;
          };

          Module.prototype.addChild = function addChild(key, module) {
            this._children[key] = module;
          };

          Module.prototype.removeChild = function removeChild(key) {
            delete this._children[key];
          };

          Module.prototype.getChild = function getChild(key) {
            return this._children[key];
          };

          Module.prototype.hasChild = function hasChild(key) {
            return key in this._children;
          };

          Module.prototype.update = function update(rawModule) {
            this._rawModule.namespaced = rawModule.namespaced;
            if (rawModule.actions) {
              this._rawModule.actions = rawModule.actions;
            }
            if (rawModule.mutations) {
              this._rawModule.mutations = rawModule.mutations;
            }
            if (rawModule.getters) {
              this._rawModule.getters = rawModule.getters;
            }
          };

          Module.prototype.forEachChild = function forEachChild(fn) {
            forEachValue(this._children, fn);
          };

          Module.prototype.forEachGetter = function forEachGetter(fn) {
            if (this._rawModule.getters) {
              forEachValue(this._rawModule.getters, fn);
            }
          };

          Module.prototype.forEachAction = function forEachAction(fn) {
            if (this._rawModule.actions) {
              forEachValue(this._rawModule.actions, fn);
            }
          };

          Module.prototype.forEachMutation = function forEachMutation(fn) {
            if (this._rawModule.mutations) {
              forEachValue(this._rawModule.mutations, fn);
            }
          };

          Object.defineProperties(Module.prototype, prototypeAccessors$1);

          var ModuleCollection = function ModuleCollection(rawRootModule) {
            // register root module (Vuex.Store options)
            this.register([], rawRootModule, false);
          };

          ModuleCollection.prototype.get = function get(path) {
            return path.reduce(function (module, key) {
              return module.getChild(key);
            }, this.root);
          };

          ModuleCollection.prototype.getNamespace = function getNamespace(
            path
          ) {
            var module = this.root;
            return path.reduce(function (namespace, key) {
              module = module.getChild(key);
              return namespace + (module.namespaced ? key + "/" : "");
            }, "");
          };

          ModuleCollection.prototype.update = function update$1(rawRootModule) {
            update([], this.root, rawRootModule);
          };

          ModuleCollection.prototype.register = function register(
            path,
            rawModule,
            runtime
          ) {
            var this$1$1 = this;
            if (runtime === void 0) runtime = true;

            {
              assertRawModule(path, rawModule);
            }

            var newModule = new Module(rawModule, runtime);
            if (path.length === 0) {
              this.root = newModule;
            } else {
              var parent = this.get(path.slice(0, -1));
              parent.addChild(path[path.length - 1], newModule);
            }

            // register nested modules
            if (rawModule.modules) {
              forEachValue(rawModule.modules, function (rawChildModule, key) {
                this$1$1.register(path.concat(key), rawChildModule, runtime);
              });
            }
          };

          ModuleCollection.prototype.unregister = function unregister(path) {
            var parent = this.get(path.slice(0, -1));
            var key = path[path.length - 1];
            var child = parent.getChild(key);

            if (!child) {
              {
                console.warn(
                  "[vuex] trying to unregister module '" +
                    key +
                    "', which is " +
                    "not registered"
                );
              }
              return;
            }

            if (!child.runtime) {
              return;
            }

            parent.removeChild(key);
          };

          ModuleCollection.prototype.isRegistered = function isRegistered(
            path
          ) {
            var parent = this.get(path.slice(0, -1));
            var key = path[path.length - 1];

            if (parent) {
              return parent.hasChild(key);
            }

            return false;
          };

          function update(path, targetModule, newModule) {
            {
              assertRawModule(path, newModule);
            }

            // update target module
            targetModule.update(newModule);

            // update nested modules
            if (newModule.modules) {
              for (var key in newModule.modules) {
                if (!targetModule.getChild(key)) {
                  {
                    console.warn(
                      "[vuex] trying to add a new module '" +
                        key +
                        "' on hot reloading, " +
                        "manual reload is needed"
                    );
                  }
                  return;
                }
                update(
                  path.concat(key),
                  targetModule.getChild(key),
                  newModule.modules[key]
                );
              }
            }
          }

          var functionAssert = {
            assert: function (value) {
              return typeof value === "function";
            },
            expected: "function",
          };

          var objectAssert = {
            assert: function (value) {
              return (
                typeof value === "function" ||
                (typeof value === "object" &&
                  typeof value.handler === "function")
              );
            },
            expected: 'function or object with "handler" function',
          };

          var assertTypes = {
            getters: functionAssert,
            mutations: functionAssert,
            actions: objectAssert,
          };

          function assertRawModule(path, rawModule) {
            Object.keys(assertTypes).forEach(function (key) {
              if (!rawModule[key]) {
                return;
              }

              var assertOptions = assertTypes[key];

              forEachValue(rawModule[key], function (value, type) {
                assert(
                  assertOptions.assert(value),
                  makeAssertionMessage(
                    path,
                    key,
                    type,
                    value,
                    assertOptions.expected
                  )
                );
              });
            });
          }

          function makeAssertionMessage(path, key, type, value, expected) {
            var buf =
              key +
              " should be " +
              expected +
              ' but "' +
              key +
              "." +
              type +
              '"';
            if (path.length > 0) {
              buf += ' in module "' + path.join(".") + '"';
            }
            buf += " is " + JSON.stringify(value) + ".";
            return buf;
          }

          function createStore(options) {
            return new Store(options);
          }

          var Store = function Store(options) {
            var this$1$1 = this;
            if (options === void 0) options = {};

            {
              assert(
                typeof Promise !== "undefined",
                "vuex requires a Promise polyfill in this browser."
              );
              assert(
                this instanceof Store,
                "store must be called with the new operator."
              );
            }

            var plugins = options.plugins;
            if (plugins === void 0) plugins = [];
            var strict = options.strict;
            if (strict === void 0) strict = false;
            var devtools = options.devtools;

            // store internal state
            this._committing = false;
            this._actions = Object.create(null);
            this._actionSubscribers = [];
            this._mutations = Object.create(null);
            this._wrappedGetters = Object.create(null);
            this._modules = new ModuleCollection(options);
            this._modulesNamespaceMap = Object.create(null);
            this._subscribers = [];
            this._makeLocalGettersCache = Object.create(null);
            this._devtools = devtools;

            // bind commit and dispatch to self
            var store = this;
            var ref = this;
            var dispatch = ref.dispatch;
            var commit = ref.commit;
            this.dispatch = function boundDispatch(type, payload) {
              return dispatch.call(store, type, payload);
            };
            this.commit = function boundCommit(type, payload, options) {
              return commit.call(store, type, payload, options);
            };

            // strict mode
            this.strict = strict;

            var state = this._modules.root.state;

            // init root module.
            // this also recursively registers all sub-modules
            // and collects all module getters inside this._wrappedGetters
            installModule(this, state, [], this._modules.root);

            // initialize the store state, which is responsible for the reactivity
            // (also registers _wrappedGetters as computed properties)
            resetStoreState(this, state);

            // apply plugins
            plugins.forEach(function (plugin) {
              return plugin(this$1$1);
            });
          };

          var prototypeAccessors = { state: { configurable: true } };

          Store.prototype.install = function install(app, injectKey) {
            app.provide(injectKey || storeKey, this);
            app.config.globalProperties.$store = this;

            var useDevtools =
              this._devtools !== undefined ? this._devtools : true;

            if (useDevtools) {
              addDevtools(app, this);
            }
          };

          prototypeAccessors.state.get = function () {
            return this._state.data;
          };

          prototypeAccessors.state.set = function (v) {
            {
              assert(
                false,
                "use store.replaceState() to explicit replace store state."
              );
            }
          };

          Store.prototype.commit = function commit(_type, _payload, _options) {
            var this$1$1 = this;

            // check object-style commit
            var ref = unifyObjectStyle(_type, _payload, _options);
            var type = ref.type;
            var payload = ref.payload;
            var options = ref.options;

            var mutation = { type: type, payload: payload };
            var entry = this._mutations[type];
            if (!entry) {
              {
                console.error("[vuex] unknown mutation type: " + type);
              }
              return;
            }
            this._withCommit(function () {
              entry.forEach(function commitIterator(handler) {
                handler(payload);
              });
            });

            this._subscribers
              .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
              .forEach(function (sub) {
                return sub(mutation, this$1$1.state);
              });

            if (options && options.silent) {
              console.warn(
                "[vuex] mutation type: " +
                  type +
                  ". Silent option has been removed. " +
                  "Use the filter functionality in the vue-devtools"
              );
            }
          };

          Store.prototype.dispatch = function dispatch(_type, _payload) {
            var this$1$1 = this;

            // check object-style dispatch
            var ref = unifyObjectStyle(_type, _payload);
            var type = ref.type;
            var payload = ref.payload;

            var action = { type: type, payload: payload };
            var entry = this._actions[type];
            if (!entry) {
              {
                console.error("[vuex] unknown action type: " + type);
              }
              return;
            }

            try {
              this._actionSubscribers
                .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
                .filter(function (sub) {
                  return sub.before;
                })
                .forEach(function (sub) {
                  return sub.before(action, this$1$1.state);
                });
            } catch (e) {
              {
                console.warn("[vuex] error in before action subscribers: ");
                console.error(e);
              }
            }

            var result =
              entry.length > 1
                ? Promise.all(
                    entry.map(function (handler) {
                      return handler(payload);
                    })
                  )
                : entry[0](payload);

            return new Promise(function (resolve, reject) {
              result.then(
                function (res) {
                  try {
                    this$1$1._actionSubscribers
                      .filter(function (sub) {
                        return sub.after;
                      })
                      .forEach(function (sub) {
                        return sub.after(action, this$1$1.state);
                      });
                  } catch (e) {
                    {
                      console.warn(
                        "[vuex] error in after action subscribers: "
                      );
                      console.error(e);
                    }
                  }
                  resolve(res);
                },
                function (error) {
                  try {
                    this$1$1._actionSubscribers
                      .filter(function (sub) {
                        return sub.error;
                      })
                      .forEach(function (sub) {
                        return sub.error(action, this$1$1.state, error);
                      });
                  } catch (e) {
                    {
                      console.warn(
                        "[vuex] error in error action subscribers: "
                      );
                      console.error(e);
                    }
                  }
                  reject(error);
                }
              );
            });
          };

          Store.prototype.subscribe = function subscribe(fn, options) {
            return genericSubscribe(fn, this._subscribers, options);
          };

          Store.prototype.subscribeAction = function subscribeAction(
            fn,
            options
          ) {
            var subs = typeof fn === "function" ? { before: fn } : fn;
            return genericSubscribe(subs, this._actionSubscribers, options);
          };

          Store.prototype.watch = function watch$1(getter, cb, options) {
            var this$1$1 = this;

            {
              assert(
                typeof getter === "function",
                "store.watch only accepts a function."
              );
            }
            return Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["watch"]
            )(
              function () {
                return getter(this$1$1.state, this$1$1.getters);
              },
              cb,
              Object.assign({}, options)
            );
          };

          Store.prototype.replaceState = function replaceState(state) {
            var this$1$1 = this;

            this._withCommit(function () {
              this$1$1._state.data = state;
            });
          };

          Store.prototype.registerModule = function registerModule(
            path,
            rawModule,
            options
          ) {
            if (options === void 0) options = {};

            if (typeof path === "string") {
              path = [path];
            }

            {
              assert(
                Array.isArray(path),
                "module path must be a string or an Array."
              );
              assert(
                path.length > 0,
                "cannot register the root module by using registerModule."
              );
            }

            this._modules.register(path, rawModule);
            installModule(
              this,
              this.state,
              path,
              this._modules.get(path),
              options.preserveState
            );
            // reset store to update getters...
            resetStoreState(this, this.state);
          };

          Store.prototype.unregisterModule = function unregisterModule(path) {
            var this$1$1 = this;

            if (typeof path === "string") {
              path = [path];
            }

            {
              assert(
                Array.isArray(path),
                "module path must be a string or an Array."
              );
            }

            this._modules.unregister(path);
            this._withCommit(function () {
              var parentState = getNestedState(
                this$1$1.state,
                path.slice(0, -1)
              );
              delete parentState[path[path.length - 1]];
            });
            resetStore(this);
          };

          Store.prototype.hasModule = function hasModule(path) {
            if (typeof path === "string") {
              path = [path];
            }

            {
              assert(
                Array.isArray(path),
                "module path must be a string or an Array."
              );
            }

            return this._modules.isRegistered(path);
          };

          Store.prototype.hotUpdate = function hotUpdate(newOptions) {
            this._modules.update(newOptions);
            resetStore(this, true);
          };

          Store.prototype._withCommit = function _withCommit(fn) {
            var committing = this._committing;
            this._committing = true;
            fn();
            this._committing = committing;
          };

          Object.defineProperties(Store.prototype, prototypeAccessors);

          /**
           * Reduce the code which written in Vue.js for getting the state.
           * @param {String} [namespace] - Module's namespace
           * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
           * @param {Object}
           */
          var mapState = normalizeNamespace(function (namespace, states) {
            var res = {};
            if (!isValidMap(states)) {
              console.error(
                "[vuex] mapState: mapper parameter must be either an Array or an Object"
              );
            }
            normalizeMap(states).forEach(function (ref) {
              var key = ref.key;
              var val = ref.val;

              res[key] = function mappedState() {
                var state = this.$store.state;
                var getters = this.$store.getters;
                if (namespace) {
                  var module = getModuleByNamespace(
                    this.$store,
                    "mapState",
                    namespace
                  );
                  if (!module) {
                    return;
                  }
                  state = module.context.state;
                  getters = module.context.getters;
                }
                return typeof val === "function"
                  ? val.call(this, state, getters)
                  : state[val];
              };
              // mark vuex getter for devtools
              res[key].vuex = true;
            });
            return res;
          });

          /**
           * Reduce the code which written in Vue.js for committing the mutation
           * @param {String} [namespace] - Module's namespace
           * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
           * @return {Object}
           */
          var mapMutations = normalizeNamespace(function (
            namespace,
            mutations
          ) {
            var res = {};
            if (!isValidMap(mutations)) {
              console.error(
                "[vuex] mapMutations: mapper parameter must be either an Array or an Object"
              );
            }
            normalizeMap(mutations).forEach(function (ref) {
              var key = ref.key;
              var val = ref.val;

              res[key] = function mappedMutation() {
                var args = [],
                  len = arguments.length;
                while (len--) args[len] = arguments[len];

                // Get the commit method from store
                var commit = this.$store.commit;
                if (namespace) {
                  var module = getModuleByNamespace(
                    this.$store,
                    "mapMutations",
                    namespace
                  );
                  if (!module) {
                    return;
                  }
                  commit = module.context.commit;
                }
                return typeof val === "function"
                  ? val.apply(this, [commit].concat(args))
                  : commit.apply(this.$store, [val].concat(args));
              };
            });
            return res;
          });

          /**
           * Reduce the code which written in Vue.js for getting the getters
           * @param {String} [namespace] - Module's namespace
           * @param {Object|Array} getters
           * @return {Object}
           */
          var mapGetters = normalizeNamespace(function (namespace, getters) {
            var res = {};
            if (!isValidMap(getters)) {
              console.error(
                "[vuex] mapGetters: mapper parameter must be either an Array or an Object"
              );
            }
            normalizeMap(getters).forEach(function (ref) {
              var key = ref.key;
              var val = ref.val;

              // The namespace has been mutated by normalizeNamespace
              val = namespace + val;
              res[key] = function mappedGetter() {
                if (
                  namespace &&
                  !getModuleByNamespace(this.$store, "mapGetters", namespace)
                ) {
                  return;
                }
                if (!(val in this.$store.getters)) {
                  console.error("[vuex] unknown getter: " + val);
                  return;
                }
                return this.$store.getters[val];
              };
              // mark vuex getter for devtools
              res[key].vuex = true;
            });
            return res;
          });

          /**
           * Reduce the code which written in Vue.js for dispatch the action
           * @param {String} [namespace] - Module's namespace
           * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
           * @return {Object}
           */
          var mapActions = normalizeNamespace(function (namespace, actions) {
            var res = {};
            if (!isValidMap(actions)) {
              console.error(
                "[vuex] mapActions: mapper parameter must be either an Array or an Object"
              );
            }
            normalizeMap(actions).forEach(function (ref) {
              var key = ref.key;
              var val = ref.val;

              res[key] = function mappedAction() {
                var args = [],
                  len = arguments.length;
                while (len--) args[len] = arguments[len];

                // get dispatch function from store
                var dispatch = this.$store.dispatch;
                if (namespace) {
                  var module = getModuleByNamespace(
                    this.$store,
                    "mapActions",
                    namespace
                  );
                  if (!module) {
                    return;
                  }
                  dispatch = module.context.dispatch;
                }
                return typeof val === "function"
                  ? val.apply(this, [dispatch].concat(args))
                  : dispatch.apply(this.$store, [val].concat(args));
              };
            });
            return res;
          });

          /**
           * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
           * @param {String} namespace
           * @return {Object}
           */
          var createNamespacedHelpers = function (namespace) {
            return {
              mapState: mapState.bind(null, namespace),
              mapGetters: mapGetters.bind(null, namespace),
              mapMutations: mapMutations.bind(null, namespace),
              mapActions: mapActions.bind(null, namespace),
            };
          };

          /**
           * Normalize the map
           * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
           * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
           * @param {Array|Object} map
           * @return {Object}
           */
          function normalizeMap(map) {
            if (!isValidMap(map)) {
              return [];
            }
            return Array.isArray(map)
              ? map.map(function (key) {
                  return { key: key, val: key };
                })
              : Object.keys(map).map(function (key) {
                  return { key: key, val: map[key] };
                });
          }

          /**
           * Validate whether given map is valid or not
           * @param {*} map
           * @return {Boolean}
           */
          function isValidMap(map) {
            return Array.isArray(map) || isObject(map);
          }

          /**
           * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
           * @param {Function} fn
           * @return {Function}
           */
          function normalizeNamespace(fn) {
            return function (namespace, map) {
              if (typeof namespace !== "string") {
                map = namespace;
                namespace = "";
              } else if (namespace.charAt(namespace.length - 1) !== "/") {
                namespace += "/";
              }
              return fn(namespace, map);
            };
          }

          /**
           * Search a special module from store by namespace. if module not exist, print error message.
           * @param {Object} store
           * @param {String} helper
           * @param {String} namespace
           * @return {Object}
           */
          function getModuleByNamespace(store, helper, namespace) {
            var module = store._modulesNamespaceMap[namespace];
            if (!module) {
              console.error(
                "[vuex] module namespace not found in " +
                  helper +
                  "(): " +
                  namespace
              );
            }
            return module;
          }

          // Credits: borrowed code from fcomb/redux-logger

          function createLogger(ref) {
            if (ref === void 0) ref = {};
            var collapsed = ref.collapsed;
            if (collapsed === void 0) collapsed = true;
            var filter = ref.filter;
            if (filter === void 0)
              filter = function (mutation, stateBefore, stateAfter) {
                return true;
              };
            var transformer = ref.transformer;
            if (transformer === void 0)
              transformer = function (state) {
                return state;
              };
            var mutationTransformer = ref.mutationTransformer;
            if (mutationTransformer === void 0)
              mutationTransformer = function (mut) {
                return mut;
              };
            var actionFilter = ref.actionFilter;
            if (actionFilter === void 0)
              actionFilter = function (action, state) {
                return true;
              };
            var actionTransformer = ref.actionTransformer;
            if (actionTransformer === void 0)
              actionTransformer = function (act) {
                return act;
              };
            var logMutations = ref.logMutations;
            if (logMutations === void 0) logMutations = true;
            var logActions = ref.logActions;
            if (logActions === void 0) logActions = true;
            var logger = ref.logger;
            if (logger === void 0) logger = console;

            return function (store) {
              var prevState = deepCopy(store.state);

              if (typeof logger === "undefined") {
                return;
              }

              if (logMutations) {
                store.subscribe(function (mutation, state) {
                  var nextState = deepCopy(state);

                  if (filter(mutation, prevState, nextState)) {
                    var formattedTime = getFormattedTime();
                    var formattedMutation = mutationTransformer(mutation);
                    var message = "mutation " + mutation.type + formattedTime;

                    startMessage(logger, message, collapsed);
                    logger.log(
                      "%c prev state",
                      "color: #9E9E9E; font-weight: bold",
                      transformer(prevState)
                    );
                    logger.log(
                      "%c mutation",
                      "color: #03A9F4; font-weight: bold",
                      formattedMutation
                    );
                    logger.log(
                      "%c next state",
                      "color: #4CAF50; font-weight: bold",
                      transformer(nextState)
                    );
                    endMessage(logger);
                  }

                  prevState = nextState;
                });
              }

              if (logActions) {
                store.subscribeAction(function (action, state) {
                  if (actionFilter(action, state)) {
                    var formattedTime = getFormattedTime();
                    var formattedAction = actionTransformer(action);
                    var message = "action " + action.type + formattedTime;

                    startMessage(logger, message, collapsed);
                    logger.log(
                      "%c action",
                      "color: #03A9F4; font-weight: bold",
                      formattedAction
                    );
                    endMessage(logger);
                  }
                });
              }
            };
          }

          function startMessage(logger, message, collapsed) {
            var startMessage = collapsed ? logger.groupCollapsed : logger.group;

            // render
            try {
              startMessage.call(logger, message);
            } catch (e) {
              logger.log(message);
            }
          }

          function endMessage(logger) {
            try {
              logger.groupEnd();
            } catch (e) {
              logger.log("—— log end ——");
            }
          }

          function getFormattedTime() {
            var time = new Date();
            return (
              " @ " +
              pad(time.getHours(), 2) +
              ":" +
              pad(time.getMinutes(), 2) +
              ":" +
              pad(time.getSeconds(), 2) +
              "." +
              pad(time.getMilliseconds(), 3)
            );
          }

          function repeat(str, times) {
            return new Array(times + 1).join(str);
          }

          function pad(num, maxLength) {
            return repeat("0", maxLength - num.toString().length) + num;
          }

          var vuex_esm_browser_index = {
            version: "4.0.2",
            Store: Store,
            storeKey: storeKey,
            createStore: createStore,
            useStore: useStore,
            mapState: mapState,
            mapMutations: mapMutations,
            mapGetters: mapGetters,
            mapActions: mapActions,
            createNamespacedHelpers: createNamespacedHelpers,
            createLogger: createLogger,
          };

          /* harmony default export */ var vuex_esm_browser =
            vuex_esm_browser_index;

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.assign.js
          var es_object_assign = __webpack_require__("cca6");

          // CONCATENATED MODULE: ./src/store/Editor/mutations/mutation-type.ts
          var MUTATION_TYPE;

          (function (MUTATION_TYPE) {
            MUTATION_TYPE["ADD_PAGE"] = "ADD_PAGE";
            MUTATION_TYPE["REMOVE_PAGE"] = "REMOVE_PAGE";
            MUTATION_TYPE["SELECT_PAGE"] = "SELECT_PAGE";
            MUTATION_TYPE["CHANGE_PAGE"] = "CHANGE_PAGE";
            MUTATION_TYPE["ADD_COMPONENT"] = "ADD_COMPONENT";
            MUTATION_TYPE["REMOVE_COMPONENT"] = "REMOVE_COMPONENT";
            MUTATION_TYPE["SELECT_COMPONENT"] = "SELECT_COMPONENT";
            MUTATION_TYPE["EXTRACT_COMPONENT"] = "EXTRACT_COMPONENT";
            MUTATION_TYPE["UNDO"] = "UNDO";
            MUTATION_TYPE["REDO"] = "REDO";
            MUTATION_TYPE["INIT"] = "INIT";
            MUTATION_TYPE["UPDATE_COMPONENT"] = "UPDATE_COMPONENT";
            MUTATION_TYPE["RESIZE"] = "RESIZE";
            MUTATION_TYPE["ADD_EVENT"] = "ADD_EVENT";
            MUTATION_TYPE["REMOVE_EVENT"] = "REMOVE_EVENT";
            MUTATION_TYPE["UPDATE_EVENT"] = "UPDATE_EVENT";
            MUTATION_TYPE["DRAG_COMPONENT"] = "DRAG_COMPONENT";
            MUTATION_TYPE["DRAG_TREE"] = "DRAG_TREE";
            MUTATION_TYPE["ENTER_CONTAINER"] = "ENTER_CONTAINER";
            MUTATION_TYPE["LEAVE_CONTAINER"] = "LEAVE_CONTAINER";
          })(MUTATION_TYPE || (MUTATION_TYPE = {}));
          // CONCATENATED MODULE: ./src/hooks/useEventBus.ts

          var EventType;

          (function (EventType) {
            EventType[(EventType["updateBorder"] = 0)] = "updateBorder";
          })(EventType || (EventType = {}));

          var useEventBus_EventBus = /*#__PURE__*/ (function () {
            function EventBus() {
              _classCallCheck(this, EventBus);

              _defineProperty(this, "pool", void 0);

              this.pool = {};
            }

            _createClass(EventBus, [
              {
                key: "$on",
                value: function $on(name, handle) {
                  this.pool[name] = this.pool[name] || [];
                  this.pool[name].push(handle);
                },
              },
              {
                key: "$emit",
                value: function $emit(name, payload) {
                  if (this.pool[name]) {
                    this.pool[name].forEach(function (item) {
                      item(payload);
                    });
                  }
                },
              },
              {
                key: "$off",
                value: function $off(name) {
                  if (this.pool[name]) {
                    delete this.pool[name];
                  }
                },
              },
            ]);

            return EventBus;
          })();

          var eventBus = new useEventBus_EventBus();
          /* harmony default export */ var useEventBus = eventBus;
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js
          var es_array_slice = __webpack_require__("fb6a");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.starts-with.js
          var es_string_starts_with = __webpack_require__("2ca0");

          // EXTERNAL MODULE: ./node_modules/jsondiffpatch/dist/jsondiffpatch.umd.js
          var jsondiffpatch_umd = __webpack_require__("e811");

          // CONCATENATED MODULE: ./src/util/diffpatch/index.ts

          var diffPatcher = Object(jsondiffpatch_umd["create"])({
            // used to match objects when diffing arrays, by default only === operator is used
            // 在对象数组中，根据objectHash来匹配对象
            objectHash: function objectHash(obj) {
              // this function is used only to when objects are not equal by ref
              return obj._id || obj.id;
            },
            arrays: {
              // default true, detect items moved inside the array (otherwise they will be registered as remove+add)
              detectMove: true,
              // default false, the value of items moved is not included in deltas
              includeValueOnMove: false,
            },
            textDiff: {
              // default 60, minimum string length (left and right sides) to use text diff algorythm: google-diff-match-patch
              minLength: 60,
            },
            // 过滤掉不需要监听的属性
            propertyFilter: function propertyFilter(name, context) {
              /*
    this optional function can be specified to ignore object properties (eg. volatile data)
    name: property name, present in either context.left or context.right objects
    context: the diff context (has context.left and context.right objects)
    */
              return name.slice(0, 1) !== "$";
            },
            cloneDiffValues: true,
            /* default false. if true, values in the obtained delta will be cloned
  (using jsondiffpatch.clone by default), to ensure delta keeps no references to left or right objects. this becomes useful if you're diffing and patching the same objects multiple times without serializing deltas.
  instead of true, a function can be specified here to provide a custom clone(value)
  */
          });
          var ModifyAction;

          (function (ModifyAction) {
            ModifyAction["Create"] = "create";
            ModifyAction["Remove"] = "remove";
            ModifyAction["Move"] = "moveIndex";
            ModifyAction["Update"] = "update";
            ModifyAction["Null"] = "null";
          })(ModifyAction || (ModifyAction = {}));

          var diffpatch_DiffPatcher = /*#__PURE__*/ (function () {
            // 快照
            // 快照索引
            // 最后一次更改的行为
            // 存储快照最大数
            function DiffPatcher() {
              var props =
                arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : 20;

              _classCallCheck(this, DiffPatcher);

              _defineProperty(this, "snapshots", []);

              _defineProperty(this, "index", -1);

              _defineProperty(this, "lastModifyAction", ModifyAction.Null);

              _defineProperty(this, "maxSnapshotLength", void 0);

              _defineProperty(this, "current", void 0);

              if (typeof props === "number") {
                this.maxSnapshotLength = props;
              } else {
                var snapshots = props.snapshots,
                  maxSnapshotLength = props.maxSnapshotLength,
                  index = props.index,
                  current = props.current;
                this.snapshots = snapshots;
                this.index = index;
                this.maxSnapshotLength = maxSnapshotLength;
                this.current = current;
              }
            } // 静态clone函数

            _createClass(
              DiffPatcher,
              [
                {
                  key: "redo",
                  value:
                    /**
                     * 重做
                     */
                    function redo() {
                      // 如果索引在最后一位，无法继续重做
                      if (this.index === this.snapshots.length - 1)
                        return false; // 取下一个补丁

                      this.index += 1;
                      var delta = this.snapshots[this.index];
                      var current = diffPatcher.clone(this.current);
                      this.lastModifyAction = DiffPatcher.getModifyType(delta); // 打补丁

                      this.current = diffPatcher.patch(current, delta);
                      return this.current;
                    },
                  /**
                   * 撤销
                   */
                },
                {
                  key: "undo",
                  value: function undo() {
                    // 已经撤回到第一步 或者 没有快照
                    if (this.index < 0 || this.snapshots.length < 1)
                      return false;
                    var current = diffPatcher.clone(this.current); // 获取当前索引快照

                    var delta = this.snapshots[this.index];
                    this.lastModifyAction = DiffPatcher.getModifyType(delta); // 卸载布丁

                    this.current = diffPatcher.unpatch(current, delta); // 索引位 - 1

                    this.index -= 1;
                    return this.current;
                  },
                  /**
                   *存储diff快照
                   * @param left 原始值
                   * @param right 新值
                   */
                },
                {
                  key: "saveSnapshots",
                  value: function saveSnapshots(left, right) {
                    var delta = diffPatcher.diff(left, right);
                    if (!delta) return; // 如果当前快照索引不在最后一个

                    if (this.index !== this.snapshots.length - 1) {
                      // 删掉当前索引之后的所有快照
                      this.snapshots = this.snapshots.slice(0, this.index + 1);
                    }

                    this.snapshots.push(delta); // 如果超出最大快照数，截取掉前面部分

                    if (this.snapshots.length > this.maxSnapshotLength) {
                      this.snapshots = this.snapshots.slice(
                        -this.maxSnapshotLength
                      );
                    } // 最后再设置索引

                    this.index = this.snapshots.length - 1;
                    this.current = right;
                  },
                },
                {
                  key: "getModifyType",
                  value: function getModifyType() {
                    return this.lastModifyAction;
                  },
                },
                {
                  key: "allowRedo",
                  value: function allowRedo() {
                    return this.index < this.snapshots.length - 1;
                  },
                },
                {
                  key: "allowUndo",
                  value: function allowUndo() {
                    return this.index > -1 && this.snapshots.length > 0;
                  },
                },
              ],
              [
                {
                  key: "clone",
                  value: function clone(value) {
                    return diffPatcher.clone(value);
                  },
                  /**
                   * 判断此次补丁的行为
                   * @param delta 补丁
                   * @return ModifyAction
                   */
                },
                {
                  key: "getModifyType",
                  value: function getModifyType(delta) {
                    if (!delta) return ModifyAction.Null;
                    var originType = delta._t;
                    delete delta._t; //  获取key

                    var key = Object.keys(delta)[0];
                    var firstDelta = delta[key]; // 新增 或 修改某个属性

                    if (!key.startsWith("_")) {
                      var modify = firstDelta[Object.keys(firstDelta)[0]]; // 新增

                      if (Array.isArray(modify)) {
                        return ModifyAction.Update;
                      }

                      return ModifyAction.Remove;
                    } else {
                      var _modify = firstDelta;

                      if (_modify[1] === 0 && _modify[2] === 0) {
                        // 删除
                        return ModifyAction.Create;
                      }

                      return ModifyAction.Move;
                    }
                  },
                },
              ]
            );

            return DiffPatcher;
          })();
          // CONCATENATED MODULE: ./src/store/Editor/util.ts

          // 缓存key

          var CACHE_KEY = "editorData";
          var cache = getCache(CACHE_KEY); // 实例化diffPatcher

          var util_diffPatcher = new diffpatch_DiffPatcher(
            cache === null || cache === void 0 ? void 0 : cache.diffPatcher
          );
          /**
           * 新增一页
           * @param state
           */

          var util_addPage = function addPage(state) {
            var id = esm_browser_v4();
            state.pages.push({
              order: 0,
              components: [],
              id: id,
              name: "\u9875\u9762".concat(state.pages.length + 1),
            });
            state.pageActive = id;
            state.pages
              .find(function (item) {
                return item.id === id;
              })
              .components.push(
                Factory_ComponentFactory.createComponent(
                  ComponentType.Container,
                  {
                    id: "root",
                    width: 375,
                    height: "",
                    position: "relative",
                    isRoot: true,
                  }
                )
              );
            state.selectedComponents = null;
          };
          /**
           * 更新当前选中的组件（目的是同步右侧与画布中的属性设置）
           * @param state
           */

          var util_updateSelectedComponent = function updateSelectedComponent(
            state
          ) {
            if (state.selectedComponents) {
              var currentPage = state.pages.find(function (item) {
                return item.id === state.pageActive;
              });
              var find = findItemById(
                currentPage.components,
                state.selectedComponents.id
              );

              if (find) {
                state.selectedComponents = _objectSpread2({}, find);
              } else {
                state.selectedComponents = null;
              }
            }
          };
          /**
           * 更新撤销重做状态，以标识当前是否可以撤销/重做
           * @param state
           */

          var updateRedoUndoState = function updateRedoUndoState(state) {
            state.allowUndo = util_diffPatcher.allowUndo();
            state.allowRedo = util_diffPatcher.allowRedo();
          };
          /**
           * 带快照的mutation
           * @param state
           * @param callback
           */

          var util_mutationWithSnapshot = function mutationWithSnapshot(
            state,
            callback
          ) {
            var left = diffpatch_DiffPatcher.clone(state.pages);
            callback(); // 记录快照

            util_diffPatcher.saveSnapshots(left, state.pages);
            updateRedoUndoState(state);
          };
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.splice.js
          var es_array_splice = __webpack_require__("a434");

          // EXTERNAL MODULE: ./node_modules/@vue/shared/dist/shared.esm-bundler.js
          var shared_esm_bundler = __webpack_require__("9ff4");

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/isServer.js
          /* harmony default export */ var isServer =
            typeof window === "undefined";

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/with-install.js

          const withInstall = (main, extra) => {
            main.install = (app) => {
              for (const comp of [
                main,
                ...Object.values(
                  extra !== null && extra !== void 0 ? extra : {}
                ),
              ]) {
                app.component(comp.name, comp);
              }
            };
            if (extra) {
              for (const [key, comp] of Object.entries(extra)) {
                main[key] = comp;
              }
            }
            return main;
          };
          const withInstallFunction = (fn, name) => {
            fn.install = (app) => {
              app.config.globalProperties[name] = fn;
            };
            return fn;
          };
          const withNoopInstall = (component) => {
            component.install = shared_esm_bundler["a" /* NOOP */];
            return component;
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/form.js
          const elFormKey = Symbol("elForm");
          const elFormItemKey = Symbol("elFormItem");

          // EXTERNAL MODULE: ./node_modules/lodash/mapValues.js
          var mapValues = __webpack_require__("9e86");
          var mapValues_default =
            /*#__PURE__*/ __webpack_require__.n(mapValues);

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/error.js
          class ElementPlusError extends Error {
            constructor(m) {
              super(m);
              this.name = "ElementPlusError";
            }
          }
          function throwError(scope, m) {
            throw new ElementPlusError(`[${scope}] ${m}`);
          }
          function debugWarn(scope, message) {
            if (false) {
            }
          }

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/props.js

          const wrapperKey = Symbol();
          const propKey = Symbol();
          function buildProp(option) {
            var _a;
            if (
              !Object(shared_esm_bundler["h" /* isObject */])(option) ||
              !!option[propKey]
            )
              return option;
            const {
              values,
              required,
              default: defaultValue,
              type,
              validator,
            } = option;
            const _validator =
              values || validator
                ? (val) => {
                    let valid = false;
                    let allowedValues = [];
                    if (values) {
                      allowedValues = [...values, defaultValue];
                      valid || (valid = allowedValues.includes(val));
                    }
                    if (validator) valid || (valid = validator(val));
                    if (!valid && allowedValues.length > 0) {
                      debugWarn(
                        `Vue warn`,
                        `Invalid prop: Expected one of (${allowedValues.join(
                          ", "
                        )}), got value ${val}`
                      );
                    }
                    return valid;
                  }
                : undefined;
            return {
              type:
                ((_a = type) === null || _a === void 0
                  ? void 0
                  : _a[wrapperKey]) || type,
              required: !!required,
              default: defaultValue,
              validator: _validator,
              [propKey]: true,
            };
          }
          const buildProps = (options) =>
            mapValues_default()(options, (option) => buildProp(option));
          const definePropType = (val) => ({ [wrapperKey]: val });
          const keyOf = (arr) => Object.keys(arr);
          const mutable = (val) => val;
          const componentSize = ["large", "medium", "small", "mini"];

          // EXTERNAL MODULE: ./node_modules/lodash/isEqualWith.js
          var isEqualWith = __webpack_require__("b6ad");
          var isEqualWith_default =
            /*#__PURE__*/ __webpack_require__.n(isEqualWith);

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/util.js

          const SCOPE = "Util";
          function toObject(arr) {
            const res = {};
            for (let i = 0; i < arr.length; i++) {
              if (arr[i]) {
                Object(shared_esm_bundler["c" /* extend */])(res, arr[i]);
              }
            }
            return res;
          }
          const getValueByPath = (obj, paths = "") => {
            let ret = obj;
            paths.split(".").map((path) => {
              ret = ret === null || ret === void 0 ? void 0 : ret[path];
            });
            return ret;
          };
          function getPropByPath(obj, path, strict) {
            let tempObj = obj;
            let key, value;
            if (
              obj &&
              Object(shared_esm_bundler["d" /* hasOwn */])(obj, path)
            ) {
              key = path;
              value =
                tempObj === null || tempObj === void 0 ? void 0 : tempObj[path];
            } else {
              path = path.replace(/\[(\w+)\]/g, ".$1");
              path = path.replace(/^\./, "");
              const keyArr = path.split(".");
              let i = 0;
              for (i; i < keyArr.length - 1; i++) {
                if (!tempObj && !strict) break;
                const key = keyArr[i];
                if (key in tempObj) {
                  tempObj = tempObj[key];
                } else {
                  if (strict) {
                    throw new Error(
                      "please transfer a valid prop path to form item!"
                    );
                  }
                  break;
                }
              }
              key = keyArr[i];
              value =
                tempObj === null || tempObj === void 0
                  ? void 0
                  : tempObj[keyArr[i]];
            }
            return {
              o: tempObj,
              k: key,
              v: value,
            };
          }
          const generateId = () => Math.floor(Math.random() * 10000);
          const escapeRegexpString = (value = "") =>
            String(value).replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
          const coerceTruthyValueToArray = (arr) => {
            if (!arr && arr !== 0) {
              return [];
            }
            return Array.isArray(arr) ? arr : [arr];
          };
          const isFirefox = function () {
            return !isServer && !!window.navigator.userAgent.match(/firefox/i);
          };
          const autoprefixer = function (style) {
            const rules = ["transform", "transition", "animation"];
            const prefixes = ["ms-", "webkit-"];
            rules.forEach((rule) => {
              const value = style[rule];
              if (rule && value) {
                prefixes.forEach((prefix) => {
                  style[prefix + rule] = value;
                });
              }
            });
            return style;
          };
          const kebabCase = shared_esm_bundler["e" /* hyphenate */];

          const isBool = (val) => typeof val === "boolean";
          const isNumber = (val) => typeof val === "number";
          const isHTMLElement = (val) =>
            Object(shared_esm_bundler["j" /* toRawType */])(val).startsWith(
              "HTML"
            );
          function rafThrottle(fn) {
            let locked = false;
            return function (...args) {
              if (locked) return;
              locked = true;
              window.requestAnimationFrame(() => {
                fn.apply(this, args);
                locked = false;
              });
            };
          }
          const clearTimer = (timer) => {
            clearTimeout(timer.value);
            timer.value = null;
          };
          function getRandomInt(max) {
            return Math.floor(Math.random() * Math.floor(max));
          }
          function isUndefined(val) {
            return val === undefined;
          }
          function useGlobalConfig() {
            const vm = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_[
                "getCurrentInstance"
              ]
            )();
            if ("$ELEMENT" in vm.proxy) {
              return vm.proxy.$ELEMENT;
            }
            return {};
          }
          function isEmpty(val) {
            if (
              (!val && val !== 0) ||
              (Object(shared_esm_bundler["f" /* isArray */])(val) &&
                !val.length) ||
              (Object(shared_esm_bundler["h" /* isObject */])(val) &&
                !Object.keys(val).length)
            )
              return true;
            return false;
          }
          function arrayFlat(arr) {
            return arr.reduce((acm, item) => {
              const val = Array.isArray(item) ? arrayFlat(item) : item;
              return acm.concat(val);
            }, []);
          }
          function deduplicate(arr) {
            return Array.from(new Set(arr));
          }
          function $(ref) {
            return ref.value;
          }
          function addUnit(value) {
            if (Object(shared_esm_bundler["i" /* isString */])(value)) {
              return value;
            } else if (isNumber(value)) {
              return `${value}px`;
            }
            debugWarn(SCOPE, "binding value must be a string or number");
            return "";
          }
          function isEqualWithFunction(obj, other) {
            return isEqualWith_default()(obj, other, (objVal, otherVal) => {
              return Object(shared_esm_bundler["g" /* isFunction */])(objVal) &&
                Object(shared_esm_bundler["g" /* isFunction */])(otherVal)
                ? `${objVal}` === `${otherVal}`
                : undefined;
            });
          }
          const refAttacher = (ref) => {
            return (val) => {
              ref.value = val;
            };
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-form-item/index.js

          const sizes = ["", "large", "medium", "small", "mini"];
          const useFormItemProps = buildProps({
            size: {
              type: String,
              values: sizes,
              default: "",
            },
            disabled: Boolean,
          });
          const useFormItem = ({ size, disabled }) => {
            const vm = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_[
                "getCurrentInstance"
              ]
            )();
            const $ELEMENT = useGlobalConfig();
            const props = vm.proxy.$props;
            const form = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["inject"]
            )(elFormKey, undefined);
            const formItem = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["inject"]
            )(elFormItemKey, undefined);
            return {
              size: Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => {
                return (
                  props.size ||
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["unref"]
                  )(size) ||
                  (formItem === null || formItem === void 0
                    ? void 0
                    : formItem.size) ||
                  (form === null || form === void 0 ? void 0 : form.size) ||
                  $ELEMENT.size ||
                  ""
                );
              }),
              disabled: Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => {
                return (
                  props.disabled === true ||
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["unref"]
                  )(disabled) ||
                  (form === null || form === void 0 ? void 0 : form.disabled) ||
                  false
                );
              }),
            };
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/button.js
          const elButtonGroupKey = Symbol();

          // CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/index.js

          var __defProp = Object.defineProperty;
          var __defProps = Object.defineProperties;
          var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
          var __getOwnPropSymbols = Object.getOwnPropertySymbols;
          var __hasOwnProp = Object.prototype.hasOwnProperty;
          var __propIsEnum = Object.prototype.propertyIsEnumerable;
          var __defNormalProp = (obj, key, value) =>
            key in obj
              ? __defProp(obj, key, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value,
                })
              : (obj[key] = value);
          var __spreadValues = (a, b) => {
            for (var prop in b || (b = {}))
              if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
            if (__getOwnPropSymbols)
              for (var prop of __getOwnPropSymbols(b)) {
                if (__propIsEnum.call(b, prop))
                  __defNormalProp(a, prop, b[prop]);
              }
            return a;
          };
          var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
          const button_buttonType = [
            "default",
            "primary",
            "success",
            "warning",
            "info",
            "danger",
            "text",
            "",
          ];
          const button_buttonSize = ["", "large", "medium", "small", "mini"];
          const buttonNativeType = ["button", "submit", "reset"];
          const buttonProps = buildProps(
            __spreadProps(__spreadValues({}, useFormItemProps), {
              type: {
                type: String,
                values: button_buttonType,
                default: "",
              },
              icon: {
                type: String,
                default: "",
              },
              nativeType: {
                type: String,
                values: buttonNativeType,
                default: "button",
              },
              loading: Boolean,
              plain: Boolean,
              autofocus: Boolean,
              round: Boolean,
              circle: Boolean,
            })
          );
          const buttonEmits = {
            click: (evt) => evt instanceof MouseEvent,
          };

          var script$1 = Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
          )({
            name: "ElButton",
            props: buttonProps,
            emits: buttonEmits,
            setup(props, { emit }) {
              const elBtnGroup = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["inject"]
              )(elButtonGroupKey, void 0);
              const { size: buttonSize, disabled: buttonDisabled } =
                useFormItem({
                  size: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
                  )(() => (elBtnGroup == null ? void 0 : elBtnGroup.size)),
                });
              const buttonType = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(
                () =>
                  props.type ||
                  (elBtnGroup == null ? void 0 : elBtnGroup.type) ||
                  "default"
              );
              const elForm = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["inject"]
              )(elFormKey, void 0);
              const handleClick = (evt) => {
                if (props.nativeType === "reset") {
                  elForm == null ? void 0 : elForm.resetFields();
                }
                emit("click", evt);
              };
              return {
                buttonSize,
                buttonType,
                buttonDisabled,
                handleClick,
              };
            },
          });

          const _hoisted_1$1 = ["disabled", "autofocus", "type"];
          const button_hoisted_2 = {
            key: 0,
            class: "el-icon-loading",
          };
          const button_hoisted_3 = { key: 2 };
          function render$1(_ctx, _cache, $props, $setup, $data, $options) {
            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )(
                "button",
                {
                  class: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "normalizeClass"
                    ]
                  )([
                    "el-button",
                    _ctx.buttonType ? "el-button--" + _ctx.buttonType : "",
                    _ctx.buttonSize ? "el-button--" + _ctx.buttonSize : "",
                    {
                      "is-disabled": _ctx.buttonDisabled,
                      "is-loading": _ctx.loading,
                      "is-plain": _ctx.plain,
                      "is-round": _ctx.round,
                      "is-circle": _ctx.circle,
                    },
                  ]),
                  disabled: _ctx.buttonDisabled || _ctx.loading,
                  autofocus: _ctx.autofocus,
                  type: _ctx.nativeType,
                  onClick:
                    _cache[0] ||
                    (_cache[0] = (...args) =>
                      _ctx.handleClick && _ctx.handleClick(...args)),
                },
                [
                  _ctx.loading
                    ? (Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "openBlock"
                        ]
                      )(),
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createElementBlock"
                        ]
                      )("i", button_hoisted_2))
                    : Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createCommentVNode"
                        ]
                      )("v-if", true),
                  _ctx.icon && !_ctx.loading
                    ? (Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "openBlock"
                        ]
                      )(),
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createElementBlock"
                        ]
                      )(
                        "i",
                        {
                          key: 1,
                          class: Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "normalizeClass"
                            ]
                          )(_ctx.icon),
                        },
                        null,
                        2
                      ))
                    : Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createCommentVNode"
                        ]
                      )("v-if", true),
                  _ctx.$slots.default
                    ? (Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "openBlock"
                        ]
                      )(),
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createElementBlock"
                        ]
                      )("span", button_hoisted_3, [
                        Object(
                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                            "renderSlot"
                          ]
                        )(_ctx.$slots, "default"),
                      ]))
                    : Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createCommentVNode"
                        ]
                      )("v-if", true),
                ],
                10,
                _hoisted_1$1
              )
            );
          }

          script$1.render = render$1;
          script$1.__file = "packages/components/button/src/button.vue";

          const buttonGroupProps = {
            size: buttonProps.size,
            type: buttonProps.type,
          };

          var script = Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
          )({
            name: "ElButtonGroup",
            props: buttonGroupProps,
            setup(props) {
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["provide"])(
                elButtonGroupKey,
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["reactive"]
                )({
                  size: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["toRef"]
                  )(props, "size"),
                  type: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["toRef"]
                  )(props, "type"),
                })
              );
            },
          });

          const button_hoisted_1 = { class: "el-button-group" };
          function button_render(
            _ctx,
            _cache,
            $props,
            $setup,
            $data,
            $options
          ) {
            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )("div", button_hoisted_1, [
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"]
                )(_ctx.$slots, "default"),
              ])
            );
          }

          script.render = button_render;
          script.__file = "packages/components/button/src/button-group.vue";

          const ElButton = withInstall(script$1, {
            ButtonGroup: script,
          });
          const ElButtonGroup = withNoopInstall(script);

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom.js

          const trim = function (s) {
            return (s || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
          };
          const on = function (element, event, handler, useCapture = false) {
            if (element && event && handler) {
              element === null || element === void 0
                ? void 0
                : element.addEventListener(event, handler, useCapture);
            }
          };
          const off = function (element, event, handler, useCapture = false) {
            if (element && event && handler) {
              element === null || element === void 0
                ? void 0
                : element.removeEventListener(event, handler, useCapture);
            }
          };
          const once = function (el, event, fn) {
            const listener = function (...args) {
              if (fn) {
                fn.apply(this, args);
              }
              off(el, event, listener);
            };
            on(el, event, listener);
          };
          function hasClass(el, cls) {
            if (!el || !cls) return false;
            if (cls.indexOf(" ") !== -1)
              throw new Error("className should not contain space.");
            if (el.classList) {
              return el.classList.contains(cls);
            } else {
              return ` ${el.className} `.indexOf(` ${cls} `) > -1;
            }
          }
          function addClass(el, cls) {
            if (!el) return;
            let curClass = el.className;
            const classes = (cls || "").split(" ");
            for (let i = 0, j = classes.length; i < j; i++) {
              const clsName = classes[i];
              if (!clsName) continue;
              if (el.classList) {
                el.classList.add(clsName);
              } else if (!hasClass(el, clsName)) {
                curClass += ` ${clsName}`;
              }
            }
            if (!el.classList) {
              el.className = curClass;
            }
          }
          function removeClass(el, cls) {
            if (!el || !cls) return;
            const classes = cls.split(" ");
            let curClass = ` ${el.className} `;
            for (let i = 0, j = classes.length; i < j; i++) {
              const clsName = classes[i];
              if (!clsName) continue;
              if (el.classList) {
                el.classList.remove(clsName);
              } else if (hasClass(el, clsName)) {
                curClass = curClass.replace(` ${clsName} `, " ");
              }
            }
            if (!el.classList) {
              el.className = trim(curClass);
            }
          }
          const getStyle = function (element, styleName) {
            if (isServer) return;
            if (!element || !styleName) return null;
            styleName = Object(shared_esm_bundler["b" /* camelize */])(
              styleName
            );
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            try {
              const style = element.style[styleName];
              if (style) return style;
              const computed = document.defaultView.getComputedStyle(
                element,
                ""
              );
              return computed ? computed[styleName] : "";
            } catch (e) {
              return element.style[styleName];
            }
          };
          function setStyle(element, styleName, value) {
            if (!element || !styleName) return;
            if (Object(shared_esm_bundler["h" /* isObject */])(styleName)) {
              Object.keys(styleName).forEach((prop) => {
                setStyle(element, prop, styleName[prop]);
              });
            } else {
              styleName = Object(shared_esm_bundler["b" /* camelize */])(
                styleName
              );
              element.style[styleName] = value;
            }
          }
          function removeStyle(element, style) {
            if (!element || !style) return;
            if (Object(shared_esm_bundler["h" /* isObject */])(style)) {
              Object.keys(style).forEach((prop) => {
                setStyle(element, prop, "");
              });
            } else {
              setStyle(element, style, "");
            }
          }
          const isScroll = (el, isVertical) => {
            if (isServer) return;
            const determinedDirection =
              isVertical === null || isVertical === undefined;
            const overflow = determinedDirection
              ? getStyle(el, "overflow")
              : isVertical
              ? getStyle(el, "overflow-y")
              : getStyle(el, "overflow-x");
            return overflow.match(/(scroll|auto|overlay)/);
          };
          const getScrollContainer = (el, isVertical) => {
            if (isServer) return;
            let parent = el;
            while (parent) {
              if (
                [window, document, document.documentElement].includes(parent)
              ) {
                return window;
              }
              if (isScroll(parent, isVertical)) {
                return parent;
              }
              parent = parent.parentNode;
            }
            return parent;
          };
          const isInContainer = (el, container) => {
            if (isServer || !el || !container) return false;
            const elRect = el.getBoundingClientRect();
            let containerRect;
            if (container instanceof Element) {
              containerRect = container.getBoundingClientRect();
            } else {
              containerRect = {
                top: 0,
                right: window.innerWidth,
                bottom: window.innerHeight,
                left: 0,
              };
            }
            return (
              elRect.top < containerRect.bottom &&
              elRect.bottom > containerRect.top &&
              elRect.right > containerRect.left &&
              elRect.left < containerRect.right
            );
          };
          const getOffsetTop = (el) => {
            let offset = 0;
            let parent = el;
            while (parent) {
              offset += parent.offsetTop;
              parent = parent.offsetParent;
            }
            return offset;
          };
          const getOffsetTopDistance = (el, containerEl) => {
            return Math.abs(getOffsetTop(el) - getOffsetTop(containerEl));
          };
          const stop = (e) => e.stopPropagation();

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/aria.js
          const EVENT_CODE = {
            tab: "Tab",
            enter: "Enter",
            space: "Space",
            left: "ArrowLeft",
            up: "ArrowUp",
            right: "ArrowRight",
            down: "ArrowDown",
            esc: "Escape",
            delete: "Delete",
            backspace: "Backspace",
          };
          const FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])`;
          const isVisible = (element) => {
            if (false) {
            }
            const computed = getComputedStyle(element);
            return computed.position === "fixed"
              ? false
              : element.offsetParent !== null;
          };
          const obtainAllFocusableElements = (element) => {
            return Array.from(
              element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)
            ).filter((item) => isFocusable(item) && isVisible(item));
          };
          const isFocusable = (element) => {
            if (
              element.tabIndex > 0 ||
              (element.tabIndex === 0 &&
                element.getAttribute("tabIndex") !== null)
            ) {
              return true;
            }
            if (element.disabled) {
              return false;
            }
            switch (element.nodeName) {
              case "A": {
                return !!element.href && element.rel !== "ignore";
              }
              case "INPUT": {
                return !(element.type === "hidden" || element.type === "file");
              }
              case "BUTTON":
              case "SELECT":
              case "TEXTAREA": {
                return true;
              }
              default: {
                return false;
              }
            }
          };
          const attemptFocus = (element) => {
            var _a;
            if (!isFocusable(element)) {
              return false;
            }
            Utils.IgnoreUtilFocusChanges = true;
            (_a = element.focus) === null || _a === void 0
              ? void 0
              : _a.call(element);
            Utils.IgnoreUtilFocusChanges = false;
            return document.activeElement === element;
          };
          const triggerEvent = function (elm, name, ...opts) {
            let eventName;
            if (name.includes("mouse") || name.includes("click")) {
              eventName = "MouseEvents";
            } else if (name.includes("key")) {
              eventName = "KeyboardEvent";
            } else {
              eventName = "HTMLEvents";
            }
            const evt = document.createEvent(eventName);
            evt.initEvent(name, ...opts);
            elm.dispatchEvent(evt);
            return elm;
          };
          const Utils = {
            IgnoreUtilFocusChanges: false,
            focusFirstDescendant(element) {
              for (let i = 0; i < element.childNodes.length; i++) {
                const child = element.childNodes[i];
                if (attemptFocus(child) || this.focusFirstDescendant(child)) {
                  return true;
                }
              }
              return false;
            },
            focusLastDescendant(element) {
              for (let i = element.childNodes.length - 1; i >= 0; i--) {
                const child = element.childNodes[i];
                if (attemptFocus(child) || this.focusLastDescendant(child)) {
                  return true;
                }
              }
              return false;
            },
          };
          /* harmony default export */ var aria = Utils;

          // CONCATENATED MODULE: ./node_modules/element-plus/es/directives/trap-focus/index.js

          const FOCUSABLE_CHILDREN = "_trap-focus-children";
          const TRAP_FOCUS_HANDLER = "_trap-focus-handler";
          const FOCUS_STACK = [];
          const FOCUS_HANDLER = (e) => {
            var _a;
            if (FOCUS_STACK.length === 0) return;
            const focusableElement =
              FOCUS_STACK[FOCUS_STACK.length - 1][FOCUSABLE_CHILDREN];
            if (focusableElement.length > 0 && e.code === EVENT_CODE.tab) {
              if (focusableElement.length === 1) {
                e.preventDefault();
                if (document.activeElement !== focusableElement[0]) {
                  focusableElement[0].focus();
                }
                return;
              }
              const goingBackward = e.shiftKey;
              const isFirst = e.target === focusableElement[0];
              const isLast =
                e.target === focusableElement[focusableElement.length - 1];
              if (isFirst && goingBackward) {
                e.preventDefault();
                focusableElement[focusableElement.length - 1].focus();
              }
              if (isLast && !goingBackward) {
                e.preventDefault();
                focusableElement[0].focus();
              }
              if (false) {
              }
            }
          };
          const TrapFocus = {
            beforeMount(el) {
              el[FOCUSABLE_CHILDREN] = obtainAllFocusableElements(el);
              FOCUS_STACK.push(el);
              if (FOCUS_STACK.length <= 1) {
                on(document, "keydown", FOCUS_HANDLER);
              }
            },
            updated(el) {
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"])(
                () => {
                  el[FOCUSABLE_CHILDREN] = obtainAllFocusableElements(el);
                }
              );
            },
            unmounted() {
              FOCUS_STACK.shift();
              if (FOCUS_STACK.length === 0) {
                off(document, "keydown", FOCUS_HANDLER);
              }
            },
          };
          /* harmony default export */ var trap_focus = TrapFocus;

          // CONCATENATED MODULE: ./node_modules/element-plus/es/locale/lang/en.js
          /* harmony default export */ var en = {
            name: "en",
            el: {
              colorpicker: {
                confirm: "OK",
                clear: "Clear",
              },
              datepicker: {
                now: "Now",
                today: "Today",
                cancel: "Cancel",
                clear: "Clear",
                confirm: "OK",
                selectDate: "Select date",
                selectTime: "Select time",
                startDate: "Start Date",
                startTime: "Start Time",
                endDate: "End Date",
                endTime: "End Time",
                prevYear: "Previous Year",
                nextYear: "Next Year",
                prevMonth: "Previous Month",
                nextMonth: "Next Month",
                year: "",
                month1: "January",
                month2: "February",
                month3: "March",
                month4: "April",
                month5: "May",
                month6: "June",
                month7: "July",
                month8: "August",
                month9: "September",
                month10: "October",
                month11: "November",
                month12: "December",
                week: "week",
                weeks: {
                  sun: "Sun",
                  mon: "Mon",
                  tue: "Tue",
                  wed: "Wed",
                  thu: "Thu",
                  fri: "Fri",
                  sat: "Sat",
                },
                months: {
                  jan: "Jan",
                  feb: "Feb",
                  mar: "Mar",
                  apr: "Apr",
                  may: "May",
                  jun: "Jun",
                  jul: "Jul",
                  aug: "Aug",
                  sep: "Sep",
                  oct: "Oct",
                  nov: "Nov",
                  dec: "Dec",
                },
              },
              select: {
                loading: "Loading",
                noMatch: "No matching data",
                noData: "No data",
                placeholder: "Select",
              },
              cascader: {
                noMatch: "No matching data",
                loading: "Loading",
                placeholder: "Select",
                noData: "No data",
              },
              pagination: {
                goto: "Go to",
                pagesize: "/page",
                total: "Total {total}",
                pageClassifier: "",
                deprecationWarning:
                  "Deprecated usages detected, please refer to the el-pagination documentation for more details",
              },
              messagebox: {
                title: "Message",
                confirm: "OK",
                cancel: "Cancel",
                error: "Illegal input",
              },
              upload: {
                deleteTip: "press delete to remove",
                delete: "Delete",
                preview: "Preview",
                continue: "Continue",
              },
              table: {
                emptyText: "No Data",
                confirmFilter: "Confirm",
                resetFilter: "Reset",
                clearFilter: "All",
                sumText: "Sum",
              },
              tree: {
                emptyText: "No Data",
              },
              transfer: {
                noMatch: "No matching data",
                noData: "No data",
                titles: ["List 1", "List 2"],
                filterPlaceholder: "Enter keyword",
                noCheckedFormat: "{total} items",
                hasCheckedFormat: "{checked}/{total} checked",
              },
              image: {
                error: "FAILED",
              },
              pageHeader: {
                title: "Back",
              },
              popconfirm: {
                confirmButtonText: "Yes",
                cancelButtonText: "No",
              },
            },
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-locale/index.js

          const useLocaleProps = {
            locale: {
              type: Object,
            },
          };
          const LocaleInjectionKey = "ElLocaleInjection";
          let localeObjCache;
          function translate(path, option, current) {
            const paths = path.split(".");
            let value;
            for (let i = 0, j = paths.length; i < j; i++) {
              const property = paths[i];
              value = current[property];
              if (i === j - 1) return template(value, option);
              if (!value) return "";
              current = value;
            }
          }
          const useLocale = () => {
            const vm = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_[
                "getCurrentInstance"
              ]
            )();
            const props = vm.props;
            const locale = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
            )(() => props.locale || en);
            const lang = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
            )(() => locale.value.name);
            const _translator = (...args) => {
              const [path, option] = args;
              return translate(path, option, locale.value);
            };
            const t = (...args) => {
              return _translator(...args);
            };
            const provides = {
              locale,
              lang,
              t,
            };
            localeObjCache = provides;
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["provide"])(
              LocaleInjectionKey,
              provides
            );
          };
          function template(str, option) {
            if (!str || !option) return str;
            return str.replace(/\{(\w+)\}/g, (_, key) => {
              return option[key];
            });
          }
          const localeProviderMaker = (locale = en) => {
            const lang = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
            )(locale.name);
            const localeRef = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
            )(locale);
            return {
              lang,
              locale: localeRef,
              t: (...args) => {
                const [path, option] = args;
                return translate(path, option, localeRef.value);
              },
            };
          };
          const useLocaleInject = () => {
            return Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["inject"]
            )(
              LocaleInjectionKey,
              localeObjCache || {
                lang: Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
                )(en.name),
                locale: Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
                )(en),
                t: (...args) => {
                  const [path, option] = args;
                  return translate(path, option, en);
                },
              }
            );
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-modal/index.js

          const use_modal_modalStack = [];
          const closeModal = (e) => {
            if (use_modal_modalStack.length === 0) return;
            if (e.code === EVENT_CODE.esc) {
              e.stopPropagation();
              const topModal =
                use_modal_modalStack[use_modal_modalStack.length - 1];
              topModal.handleClose();
            }
          };
          /* harmony default export */ var use_modal = (
            instance,
            visibleRef
          ) => {
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
              () => visibleRef.value,
              (val) => {
                if (val) {
                  use_modal_modalStack.push(instance);
                } else {
                  use_modal_modalStack.splice(
                    use_modal_modalStack.findIndex(
                      (modal) => modal === instance
                    ),
                    1
                  );
                }
              }
            );
          };
          if (!isServer) {
            on(document, "keydown", closeModal);
          }

          // CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-prevent-global/index.js

          /* harmony default export */ var use_prevent_global = (
            indicator,
            evt,
            cb
          ) => {
            const prevent = (e) => {
              if (cb(e)) {
                e.stopImmediatePropagation();
              }
            };
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
              () => indicator.value,
              (val) => {
                if (val) {
                  on(document, evt, prevent, true);
                } else {
                  off(document, evt, prevent, true);
                }
              },
              { immediate: true }
            );
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/scrollbar-width.js

          let scrollbar_width_scrollBarWidth;
          /* harmony default export */ var scrollbar_width = function () {
            var _a;
            if (isServer) return 0;
            if (scrollbar_width_scrollBarWidth !== undefined)
              return scrollbar_width_scrollBarWidth;
            const outer = document.createElement("div");
            outer.className = "el-scrollbar__wrap";
            outer.style.visibility = "hidden";
            outer.style.width = "100px";
            outer.style.position = "absolute";
            outer.style.top = "-9999px";
            document.body.appendChild(outer);
            const widthNoScroll = outer.offsetWidth;
            outer.style.overflow = "scroll";
            const inner = document.createElement("div");
            inner.style.width = "100%";
            outer.appendChild(inner);
            const widthWithScroll = inner.offsetWidth;
            (_a = outer.parentNode) === null || _a === void 0
              ? void 0
              : _a.removeChild(outer);
            scrollbar_width_scrollBarWidth = widthNoScroll - widthWithScroll;
            return scrollbar_width_scrollBarWidth;
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-lockscreen/index.js

          /* harmony default export */ var use_lockscreen = (trigger) => {
            if (
              !Object(external_commonjs_vue_commonjs2_vue_root_Vue_["isRef"])(
                trigger
              )
            ) {
              throwError(
                "[useLockScreen]",
                "You need to pass a ref param to this function"
              );
            }
            let scrollBarWidth = 0;
            let withoutHiddenClass = false;
            let bodyPaddingRight = "0";
            let computedBodyPaddingRight = 0;
            Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["onUnmounted"]
            )(() => {
              cleanup();
            });
            const cleanup = () => {
              removeClass(document.body, "el-popup-parent--hidden");
              if (withoutHiddenClass) {
                document.body.style.paddingRight = bodyPaddingRight;
              }
            };
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
              trigger,
              (val) => {
                if (val) {
                  withoutHiddenClass = !hasClass(
                    document.body,
                    "el-popup-parent--hidden"
                  );
                  if (withoutHiddenClass) {
                    bodyPaddingRight = document.body.style.paddingRight;
                    computedBodyPaddingRight = parseInt(
                      getStyle(document.body, "paddingRight"),
                      10
                    );
                  }
                  scrollBarWidth = scrollbar_width();
                  const bodyHasOverflow =
                    document.documentElement.clientHeight <
                    document.body.scrollHeight;
                  const bodyOverflowY = getStyle(document.body, "overflowY");
                  if (
                    scrollBarWidth > 0 &&
                    (bodyHasOverflow || bodyOverflowY === "scroll") &&
                    withoutHiddenClass
                  ) {
                    document.body.style.paddingRight = `${
                      computedBodyPaddingRight + scrollBarWidth
                    }px`;
                  }
                  addClass(document.body, "el-popup-parent--hidden");
                } else {
                  cleanup();
                }
              }
            );
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-restore-active/index.js

          /* harmony default export */ var use_restore_active = (
            toggle,
            initialFocus
          ) => {
            let previousActive;
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
              () => toggle.value,
              (val) => {
                var _a, _b;
                if (val) {
                  previousActive = document.activeElement;
                  if (
                    Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_["isRef"]
                    )(initialFocus)
                  ) {
                    (_b = (_a = initialFocus.value).focus) === null ||
                    _b === void 0
                      ? void 0
                      : _b.call(_a);
                  }
                } else {
                  if (false) {
                  } else {
                    previousActive.focus();
                  }
                }
              }
            );
          };

          // EXTERNAL MODULE: ./node_modules/lodash/fromPairs.js
          var fromPairs = __webpack_require__("3bb8");
          var fromPairs_default =
            /*#__PURE__*/ __webpack_require__.n(fromPairs);

          // CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-attrs/index.js

          const DEFAULT_EXCLUDE_KEYS = ["class", "style"];
          const LISTENER_PREFIX = /^on[A-Z]/;
          /* harmony default export */ var use_attrs = (params = {}) => {
            const { excludeListeners = false, excludeKeys = [] } = params;
            const allExcludeKeys = excludeKeys.concat(DEFAULT_EXCLUDE_KEYS);
            const instance = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_[
                "getCurrentInstance"
              ]
            )();
            if (!instance) {
              debugWarn(
                "use-attrs",
                "getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function"
              );
              return Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => ({}));
            }
            return Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
            )(() => {
              var _a;
              return fromPairs_default()(
                Object.entries(
                  (_a = instance.proxy) === null || _a === void 0
                    ? void 0
                    : _a.$attrs
                ).filter(
                  ([key]) =>
                    !allExcludeKeys.includes(key) &&
                    !(excludeListeners && LISTENER_PREFIX.test(key))
                )
              );
            });
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/constants.js
          const UPDATE_MODEL_EVENT = "update:modelValue";
          const CHANGE_EVENT = "change";
          const INPUT_EVENT = "input";
          const VALIDATE_STATE_MAP = {
            validating: "el-icon-loading",
            success: "el-icon-circle-check",
            error: "el-icon-circle-close",
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/isDef.js
          function isKorean(text) {
            const reg = /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi;
            return reg.test(text);
          }

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/validators.js

          const isValidWidthUnit = (val) => {
            if (isNumber(val)) {
              return true;
            } else {
              return (
                ["px", "rem", "em", "vw", "%", "vmin", "vmax"].some((unit) =>
                  val.endsWith(unit)
                ) || val.startsWith("calc")
              );
            }
          };
          const isValidComponentSize = (val) =>
            ["", "large", "medium", "small", "mini"].includes(val);
          const isValidDatePickType = (val) =>
            [
              "year",
              "month",
              "date",
              "dates",
              "week",
              "datetime",
              "datetimerange",
              "daterange",
              "monthrange",
            ].includes(val);

          // CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/index.js

          let hiddenTextarea;
          const HIDDEN_STYLE = `
  height:0 !important;
  visibility:hidden !important;
  overflow:hidden !important;
  position:absolute !important;
  z-index:-1000 !important;
  top:0 !important;
  right:0 !important;
`;
          const CONTEXT_STYLE = [
            "letter-spacing",
            "line-height",
            "padding-top",
            "padding-bottom",
            "font-family",
            "font-weight",
            "font-size",
            "text-rendering",
            "text-transform",
            "width",
            "text-indent",
            "padding-left",
            "padding-right",
            "border-width",
            "box-sizing",
          ];
          function calculateNodeStyling(targetElement) {
            const style = window.getComputedStyle(targetElement);
            const boxSizing = style.getPropertyValue("box-sizing");
            const paddingSize =
              parseFloat(style.getPropertyValue("padding-bottom")) +
              parseFloat(style.getPropertyValue("padding-top"));
            const borderSize =
              parseFloat(style.getPropertyValue("border-bottom-width")) +
              parseFloat(style.getPropertyValue("border-top-width"));
            const contextStyle = CONTEXT_STYLE.map(
              (name) => `${name}:${style.getPropertyValue(name)}`
            ).join(";");
            return { contextStyle, paddingSize, borderSize, boxSizing };
          }
          function calcTextareaHeight(
            targetElement,
            minRows = 1,
            maxRows = null
          ) {
            var _a;
            if (!hiddenTextarea) {
              hiddenTextarea = document.createElement("textarea");
              document.body.appendChild(hiddenTextarea);
            }
            const { paddingSize, borderSize, boxSizing, contextStyle } =
              calculateNodeStyling(targetElement);
            hiddenTextarea.setAttribute(
              "style",
              `${contextStyle};${HIDDEN_STYLE}`
            );
            hiddenTextarea.value =
              targetElement.value || targetElement.placeholder || "";
            let height = hiddenTextarea.scrollHeight;
            const result = {};
            if (boxSizing === "border-box") {
              height = height + borderSize;
            } else if (boxSizing === "content-box") {
              height = height - paddingSize;
            }
            hiddenTextarea.value = "";
            const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
            if (minRows !== null) {
              let minHeight = singleRowHeight * minRows;
              if (boxSizing === "border-box") {
                minHeight = minHeight + paddingSize + borderSize;
              }
              height = Math.max(minHeight, height);
              result.minHeight = `${minHeight}px`;
            }
            if (maxRows !== null) {
              let maxHeight = singleRowHeight * maxRows;
              if (boxSizing === "border-box") {
                maxHeight = maxHeight + paddingSize + borderSize;
              }
              height = Math.min(maxHeight, height);
            }
            result.height = `${height}px`;
            (_a = hiddenTextarea.parentNode) == null
              ? void 0
              : _a.removeChild(hiddenTextarea);
            hiddenTextarea = null;
            return result;
          }

          var input_defProp = Object.defineProperty;
          var input_defProps = Object.defineProperties;
          var input_getOwnPropDescs = Object.getOwnPropertyDescriptors;
          var input_getOwnPropSymbols = Object.getOwnPropertySymbols;
          var input_hasOwnProp = Object.prototype.hasOwnProperty;
          var input_propIsEnum = Object.prototype.propertyIsEnumerable;
          var input_defNormalProp = (obj, key, value) =>
            key in obj
              ? input_defProp(obj, key, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value,
                })
              : (obj[key] = value);
          var input_spreadValues = (a, b) => {
            for (var prop in b || (b = {}))
              if (input_hasOwnProp.call(b, prop))
                input_defNormalProp(a, prop, b[prop]);
            if (input_getOwnPropSymbols)
              for (var prop of input_getOwnPropSymbols(b)) {
                if (input_propIsEnum.call(b, prop))
                  input_defNormalProp(a, prop, b[prop]);
              }
            return a;
          };
          var input_spreadProps = (a, b) =>
            input_defProps(a, input_getOwnPropDescs(b));
          const PENDANT_MAP = {
            suffix: "append",
            prefix: "prepend",
          };
          var input_script = Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
          )({
            name: "ElInput",
            inheritAttrs: false,
            props: {
              modelValue: {
                type: [String, Number],
                default: "",
              },
              type: {
                type: String,
                default: "text",
              },
              size: {
                type: String,
                validator: isValidComponentSize,
              },
              resize: {
                type: String,
                validator: (val) =>
                  ["none", "both", "horizontal", "vertical"].includes(val),
              },
              autosize: {
                type: [Boolean, Object],
                default: false,
              },
              autocomplete: {
                type: String,
                default: "off",
              },
              placeholder: {
                type: String,
              },
              form: {
                type: String,
                default: "",
              },
              disabled: {
                type: Boolean,
                default: false,
              },
              readonly: {
                type: Boolean,
                default: false,
              },
              clearable: {
                type: Boolean,
                default: false,
              },
              showPassword: {
                type: Boolean,
                default: false,
              },
              showWordLimit: {
                type: Boolean,
                default: false,
              },
              suffixIcon: {
                type: String,
                default: "",
              },
              prefixIcon: {
                type: String,
                default: "",
              },
              label: {
                type: String,
              },
              tabindex: {
                type: [Number, String],
              },
              validateEvent: {
                type: Boolean,
                default: true,
              },
              inputStyle: {
                type: Object,
                default: () => ({}),
              },
              maxlength: {
                type: [Number, String],
              },
            },
            emits: [
              UPDATE_MODEL_EVENT,
              "input",
              "change",
              "focus",
              "blur",
              "clear",
              "mouseleave",
              "mouseenter",
              "keydown",
              "compositionstart",
              "compositionupdate",
              "compositionend",
            ],
            setup(props, ctx) {
              const instance = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "getCurrentInstance"
                ]
              )();
              const attrs = use_attrs();
              const $ELEMENT = useGlobalConfig();
              const elForm = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["inject"]
              )(elFormKey, {});
              const elFormItem = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["inject"]
              )(elFormItemKey, {});
              const input = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(null);
              const textarea = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(null);
              const focused = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(false);
              const hovering = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(false);
              const isComposing = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(false);
              const passwordVisible = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(false);
              const _textareaCalcStyle = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["shallowRef"]
              )(props.inputStyle);
              const inputOrTextarea = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => input.value || textarea.value);
              const inputSize = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => props.size || elFormItem.size || $ELEMENT.size);
              const needStatusIcon = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => elForm.statusIcon);
              const validateState = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => elFormItem.validateState || "");
              const validateIcon = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => VALIDATE_STATE_MAP[validateState.value]);
              const computedTextareaStyle = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() =>
                input_spreadProps(
                  input_spreadValues(
                    input_spreadValues({}, props.inputStyle),
                    _textareaCalcStyle.value
                  ),
                  {
                    resize: props.resize,
                  }
                )
              );
              const inputDisabled = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => props.disabled || elForm.disabled);
              const nativeInputValue = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() =>
                props.modelValue === null || props.modelValue === void 0
                  ? ""
                  : String(props.modelValue)
              );
              const showClear = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => {
                return (
                  props.clearable &&
                  !inputDisabled.value &&
                  !props.readonly &&
                  nativeInputValue.value &&
                  (focused.value || hovering.value)
                );
              });
              const showPwdVisible = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => {
                return (
                  props.showPassword &&
                  !inputDisabled.value &&
                  !props.readonly &&
                  (!!nativeInputValue.value || focused.value)
                );
              });
              const isWordLimitVisible = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => {
                return (
                  props.showWordLimit &&
                  props.maxlength &&
                  (props.type === "text" || props.type === "textarea") &&
                  !inputDisabled.value &&
                  !props.readonly &&
                  !props.showPassword
                );
              });
              const textLength = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => {
                return Array.from(nativeInputValue.value).length;
              });
              const inputExceed = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => {
                return (
                  isWordLimitVisible.value &&
                  textLength.value > Number(props.maxlength)
                );
              });
              const resizeTextarea = () => {
                const { type, autosize } = props;
                if (isServer || type !== "textarea") return;
                if (autosize) {
                  const minRows = Object(
                    shared_esm_bundler["h" /* isObject */]
                  )(autosize)
                    ? autosize.minRows
                    : void 0;
                  const maxRows = Object(
                    shared_esm_bundler["h" /* isObject */]
                  )(autosize)
                    ? autosize.maxRows
                    : void 0;
                  _textareaCalcStyle.value = input_spreadValues(
                    {},
                    calcTextareaHeight(textarea.value, minRows, maxRows)
                  );
                } else {
                  _textareaCalcStyle.value = {
                    minHeight: calcTextareaHeight(textarea.value).minHeight,
                  };
                }
              };
              const setNativeInputValue = () => {
                const input2 = inputOrTextarea.value;
                if (!input2 || input2.value === nativeInputValue.value) return;
                input2.value = nativeInputValue.value;
              };
              const calcIconOffset = (place) => {
                const { el } = instance.vnode;
                const elList = Array.from(
                  el.querySelectorAll(`.el-input__${place}`)
                );
                const target = elList.find((item) => item.parentNode === el);
                if (!target) return;
                const pendant = PENDANT_MAP[place];
                if (ctx.slots[pendant]) {
                  target.style.transform = `translateX(${
                    place === "suffix" ? "-" : ""
                  }${
                    el.querySelector(`.el-input-group__${pendant}`).offsetWidth
                  }px)`;
                } else {
                  target.removeAttribute("style");
                }
              };
              const updateIconOffset = () => {
                calcIconOffset("prefix");
                calcIconOffset("suffix");
              };
              const handleInput = (event) => {
                let { value } = event.target;
                if (isComposing.value) return;
                if (value === nativeInputValue.value) return;
                if (props.maxlength) {
                  const sliceIndex = inputExceed.value
                    ? textLength.value
                    : props.maxlength;
                  value = Array.from(value)
                    .slice(0, Number(sliceIndex))
                    .join("");
                }
                ctx.emit(UPDATE_MODEL_EVENT, value);
                ctx.emit("input", value);
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                )(setNativeInputValue);
              };
              const handleChange = (event) => {
                ctx.emit("change", event.target.value);
              };
              const focus = () => {
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                )(() => {
                  inputOrTextarea.value.focus();
                });
              };
              const blur = () => {
                inputOrTextarea.value.blur();
              };
              const handleFocus = (event) => {
                focused.value = true;
                ctx.emit("focus", event);
              };
              const handleBlur = (event) => {
                var _a;
                focused.value = false;
                ctx.emit("blur", event);
                if (props.validateEvent) {
                  (_a = elFormItem.validate) == null
                    ? void 0
                    : _a.call(elFormItem, "blur");
                }
              };
              const select = () => {
                inputOrTextarea.value.select();
              };
              const handleCompositionStart = (event) => {
                ctx.emit("compositionstart", event);
                isComposing.value = true;
              };
              const handleCompositionUpdate = (event) => {
                var _a;
                ctx.emit("compositionupdate", event);
                const text = (_a = event.target) == null ? void 0 : _a.value;
                const lastCharacter = text[text.length - 1] || "";
                isComposing.value = !isKorean(lastCharacter);
              };
              const handleCompositionEnd = (event) => {
                ctx.emit("compositionend", event);
                if (isComposing.value) {
                  isComposing.value = false;
                  handleInput(event);
                }
              };
              const clear = () => {
                ctx.emit(UPDATE_MODEL_EVENT, "");
                ctx.emit("change", "");
                ctx.emit("clear");
                ctx.emit("input", "");
              };
              const handlePasswordVisible = () => {
                passwordVisible.value = !passwordVisible.value;
                focus();
              };
              const getSuffixVisible = () => {
                return (
                  ctx.slots.suffix ||
                  props.suffixIcon ||
                  showClear.value ||
                  props.showPassword ||
                  isWordLimitVisible.value ||
                  (validateState.value && needStatusIcon.value)
                );
              };
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
                () => props.modelValue,
                () => {
                  var _a;
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                  )(resizeTextarea);
                  if (props.validateEvent) {
                    (_a = elFormItem.validate) == null
                      ? void 0
                      : _a.call(elFormItem, "change");
                  }
                }
              );
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
                nativeInputValue,
                () => {
                  setNativeInputValue();
                }
              );
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
                () => props.type,
                () => {
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                  )(() => {
                    setNativeInputValue();
                    resizeTextarea();
                    updateIconOffset();
                  });
                }
              );
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["onMounted"]
              )(() => {
                setNativeInputValue();
                updateIconOffset();
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                )(resizeTextarea);
              });
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["onUpdated"]
              )(() => {
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                )(updateIconOffset);
              });
              const onMouseLeave = (e) => {
                hovering.value = false;
                ctx.emit("mouseleave", e);
              };
              const onMouseEnter = (e) => {
                hovering.value = true;
                ctx.emit("mouseenter", e);
              };
              const handleKeydown = (e) => {
                ctx.emit("keydown", e);
              };
              return {
                input,
                textarea,
                attrs,
                inputSize,
                validateState,
                validateIcon,
                computedTextareaStyle,
                resizeTextarea,
                inputDisabled,
                showClear,
                showPwdVisible,
                isWordLimitVisible,
                textLength,
                hovering,
                inputExceed,
                passwordVisible,
                inputOrTextarea,
                handleInput,
                handleChange,
                handleFocus,
                handleBlur,
                handleCompositionStart,
                handleCompositionUpdate,
                handleCompositionEnd,
                handlePasswordVisible,
                clear,
                select,
                focus,
                blur,
                getSuffixVisible,
                onMouseLeave,
                onMouseEnter,
                handleKeydown,
              };
            },
          });

          const input_hoisted_1 = {
            key: 0,
            class: "el-input-group__prepend",
          };
          const input_hoisted_2 = [
            "type",
            "disabled",
            "readonly",
            "autocomplete",
            "tabindex",
            "aria-label",
            "placeholder",
          ];
          const input_hoisted_3 = {
            key: 2,
            class: "el-input__prefix",
          };
          const input_hoisted_4 = {
            key: 3,
            class: "el-input__suffix",
          };
          const input_hoisted_5 = { class: "el-input__suffix-inner" };
          const _hoisted_6 = {
            key: 3,
            class: "el-input__count",
          };
          const _hoisted_7 = { class: "el-input__count-inner" };
          const _hoisted_8 = {
            key: 4,
            class: "el-input-group__append",
          };
          const _hoisted_9 = [
            "tabindex",
            "disabled",
            "readonly",
            "autocomplete",
            "aria-label",
            "placeholder",
          ];
          const _hoisted_10 = {
            key: 2,
            class: "el-input__count",
          };
          function input_render(_ctx, _cache, $props, $setup, $data, $options) {
            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_[
                  "createElementBlock"
                ]
              )(
                "div",
                {
                  class: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "normalizeClass"
                    ]
                  )([
                    _ctx.type === "textarea" ? "el-textarea" : "el-input",
                    _ctx.inputSize ? "el-input--" + _ctx.inputSize : "",
                    {
                      "is-disabled": _ctx.inputDisabled,
                      "is-exceed": _ctx.inputExceed,
                      "el-input-group":
                        _ctx.$slots.prepend || _ctx.$slots.append,
                      "el-input-group--append": _ctx.$slots.append,
                      "el-input-group--prepend": _ctx.$slots.prepend,
                      "el-input--prefix": _ctx.$slots.prefix || _ctx.prefixIcon,
                      "el-input--suffix":
                        _ctx.$slots.suffix ||
                        _ctx.suffixIcon ||
                        _ctx.clearable ||
                        _ctx.showPassword,
                      "el-input--suffix--password-clear":
                        _ctx.clearable && _ctx.showPassword,
                    },
                    _ctx.$attrs.class,
                  ]),
                  style: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                      "normalizeStyle"
                    ]
                  )(_ctx.$attrs.style),
                  onMouseenter:
                    _cache[19] ||
                    (_cache[19] = (...args) =>
                      _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),
                  onMouseleave:
                    _cache[20] ||
                    (_cache[20] = (...args) =>
                      _ctx.onMouseLeave && _ctx.onMouseLeave(...args)),
                },
                [
                  _ctx.type !== "textarea"
                    ? (Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "openBlock"
                        ]
                      )(),
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createElementBlock"
                        ]
                      )(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "Fragment"
                        ],
                        { key: 0 },
                        [
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "createCommentVNode"
                            ]
                          )(" \u524D\u7F6E\u5143\u7D20 "),
                          _ctx.$slots.prepend
                            ? (Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "openBlock"
                                ]
                              )(),
                              Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createElementBlock"
                                ]
                              )("div", input_hoisted_1, [
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "renderSlot"
                                  ]
                                )(_ctx.$slots, "prepend"),
                              ]))
                            : Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createCommentVNode"
                                ]
                              )("v-if", true),
                          _ctx.type !== "textarea"
                            ? (Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "openBlock"
                                ]
                              )(),
                              Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createElementBlock"
                                ]
                              )(
                                "input",
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "mergeProps"
                                  ]
                                )(
                                  {
                                    key: 1,
                                    ref: "input",
                                    class: "el-input__inner",
                                  },
                                  _ctx.attrs,
                                  {
                                    type: _ctx.showPassword
                                      ? _ctx.passwordVisible
                                        ? "text"
                                        : "password"
                                      : _ctx.type,
                                    disabled: _ctx.inputDisabled,
                                    readonly: _ctx.readonly,
                                    autocomplete: _ctx.autocomplete,
                                    tabindex: _ctx.tabindex,
                                    "aria-label": _ctx.label,
                                    placeholder: _ctx.placeholder,
                                    style: _ctx.inputStyle,
                                    onCompositionstart:
                                      _cache[0] ||
                                      (_cache[0] = (...args) =>
                                        _ctx.handleCompositionStart &&
                                        _ctx.handleCompositionStart(...args)),
                                    onCompositionupdate:
                                      _cache[1] ||
                                      (_cache[1] = (...args) =>
                                        _ctx.handleCompositionUpdate &&
                                        _ctx.handleCompositionUpdate(...args)),
                                    onCompositionend:
                                      _cache[2] ||
                                      (_cache[2] = (...args) =>
                                        _ctx.handleCompositionEnd &&
                                        _ctx.handleCompositionEnd(...args)),
                                    onInput:
                                      _cache[3] ||
                                      (_cache[3] = (...args) =>
                                        _ctx.handleInput &&
                                        _ctx.handleInput(...args)),
                                    onFocus:
                                      _cache[4] ||
                                      (_cache[4] = (...args) =>
                                        _ctx.handleFocus &&
                                        _ctx.handleFocus(...args)),
                                    onBlur:
                                      _cache[5] ||
                                      (_cache[5] = (...args) =>
                                        _ctx.handleBlur &&
                                        _ctx.handleBlur(...args)),
                                    onChange:
                                      _cache[6] ||
                                      (_cache[6] = (...args) =>
                                        _ctx.handleChange &&
                                        _ctx.handleChange(...args)),
                                    onKeydown:
                                      _cache[7] ||
                                      (_cache[7] = (...args) =>
                                        _ctx.handleKeydown &&
                                        _ctx.handleKeydown(...args)),
                                  }
                                ),
                                null,
                                16,
                                input_hoisted_2
                              ))
                            : Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createCommentVNode"
                                ]
                              )("v-if", true),
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "createCommentVNode"
                            ]
                          )(" \u524D\u7F6E\u5185\u5BB9 "),
                          _ctx.$slots.prefix || _ctx.prefixIcon
                            ? (Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "openBlock"
                                ]
                              )(),
                              Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createElementBlock"
                                ]
                              )("span", input_hoisted_3, [
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "renderSlot"
                                  ]
                                )(_ctx.$slots, "prefix"),
                                _ctx.prefixIcon
                                  ? (Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "openBlock"
                                      ]
                                    )(),
                                    Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "createElementBlock"
                                      ]
                                    )(
                                      "i",
                                      {
                                        key: 0,
                                        class: Object(
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "normalizeClass"
                                          ]
                                        )(["el-input__icon", _ctx.prefixIcon]),
                                      },
                                      null,
                                      2
                                    ))
                                  : Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "createCommentVNode"
                                      ]
                                    )("v-if", true),
                              ]))
                            : Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createCommentVNode"
                                ]
                              )("v-if", true),
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "createCommentVNode"
                            ]
                          )(" \u540E\u7F6E\u5185\u5BB9 "),
                          _ctx.getSuffixVisible()
                            ? (Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "openBlock"
                                ]
                              )(),
                              Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createElementBlock"
                                ]
                              )("span", input_hoisted_4, [
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "createElementVNode"
                                  ]
                                )("span", input_hoisted_5, [
                                  !_ctx.showClear ||
                                  !_ctx.showPwdVisible ||
                                  !_ctx.isWordLimitVisible
                                    ? (Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "openBlock"
                                        ]
                                      )(),
                                      Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createElementBlock"
                                        ]
                                      )(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "Fragment"
                                        ],
                                        { key: 0 },
                                        [
                                          Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "renderSlot"
                                            ]
                                          )(_ctx.$slots, "suffix"),
                                          _ctx.suffixIcon
                                            ? (Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "openBlock"
                                                ]
                                              )(),
                                              Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "createElementBlock"
                                                ]
                                              )(
                                                "i",
                                                {
                                                  key: 0,
                                                  class: Object(
                                                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                      "normalizeClass"
                                                    ]
                                                  )([
                                                    "el-input__icon",
                                                    _ctx.suffixIcon,
                                                  ]),
                                                },
                                                null,
                                                2
                                              ))
                                            : Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "createCommentVNode"
                                                ]
                                              )("v-if", true),
                                        ],
                                        64
                                      ))
                                    : Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createCommentVNode"
                                        ]
                                      )("v-if", true),
                                  _ctx.showClear
                                    ? (Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "openBlock"
                                        ]
                                      )(),
                                      Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createElementBlock"
                                        ]
                                      )(
                                        "i",
                                        {
                                          key: 1,
                                          class:
                                            "el-input__icon el-icon-circle-close el-input__clear",
                                          onMousedown:
                                            _cache[8] ||
                                            (_cache[8] = Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "withModifiers"
                                              ]
                                            )(() => {}, ["prevent"])),
                                          onClick:
                                            _cache[9] ||
                                            (_cache[9] = (...args) =>
                                              _ctx.clear &&
                                              _ctx.clear(...args)),
                                        },
                                        null,
                                        32
                                      ))
                                    : Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createCommentVNode"
                                        ]
                                      )("v-if", true),
                                  _ctx.showPwdVisible
                                    ? (Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "openBlock"
                                        ]
                                      )(),
                                      Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createElementBlock"
                                        ]
                                      )("i", {
                                        key: 2,
                                        class:
                                          "el-input__icon el-icon-view el-input__clear",
                                        onClick:
                                          _cache[10] ||
                                          (_cache[10] = (...args) =>
                                            _ctx.handlePasswordVisible &&
                                            _ctx.handlePasswordVisible(
                                              ...args
                                            )),
                                      }))
                                    : Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createCommentVNode"
                                        ]
                                      )("v-if", true),
                                  _ctx.isWordLimitVisible
                                    ? (Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "openBlock"
                                        ]
                                      )(),
                                      Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createElementBlock"
                                        ]
                                      )("span", _hoisted_6, [
                                        Object(
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "createElementVNode"
                                          ]
                                        )(
                                          "span",
                                          _hoisted_7,
                                          Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "toDisplayString"
                                            ]
                                          )(_ctx.textLength) +
                                            "/" +
                                            Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "toDisplayString"
                                              ]
                                            )(_ctx.maxlength),
                                          1
                                        ),
                                      ]))
                                    : Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createCommentVNode"
                                        ]
                                      )("v-if", true),
                                ]),
                                _ctx.validateState
                                  ? (Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "openBlock"
                                      ]
                                    )(),
                                    Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "createElementBlock"
                                      ]
                                    )(
                                      "i",
                                      {
                                        key: 0,
                                        class: Object(
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "normalizeClass"
                                          ]
                                        )([
                                          "el-input__icon",
                                          "el-input__validateIcon",
                                          _ctx.validateIcon,
                                        ]),
                                      },
                                      null,
                                      2
                                    ))
                                  : Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "createCommentVNode"
                                      ]
                                    )("v-if", true),
                              ]))
                            : Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createCommentVNode"
                                ]
                              )("v-if", true),
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "createCommentVNode"
                            ]
                          )(" \u540E\u7F6E\u5143\u7D20 "),
                          _ctx.$slots.append
                            ? (Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "openBlock"
                                ]
                              )(),
                              Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createElementBlock"
                                ]
                              )("div", _hoisted_8, [
                                Object(
                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                    "renderSlot"
                                  ]
                                )(_ctx.$slots, "append"),
                              ]))
                            : Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createCommentVNode"
                                ]
                              )("v-if", true),
                        ],
                        64
                      ))
                    : (Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "openBlock"
                        ]
                      )(),
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createElementBlock"
                        ]
                      )(
                        "textarea",
                        Object(
                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                            "mergeProps"
                          ]
                        )(
                          {
                            key: 1,
                            ref: "textarea",
                            class: "el-textarea__inner",
                          },
                          _ctx.attrs,
                          {
                            tabindex: _ctx.tabindex,
                            disabled: _ctx.inputDisabled,
                            readonly: _ctx.readonly,
                            autocomplete: _ctx.autocomplete,
                            style: _ctx.computedTextareaStyle,
                            "aria-label": _ctx.label,
                            placeholder: _ctx.placeholder,
                            onCompositionstart:
                              _cache[11] ||
                              (_cache[11] = (...args) =>
                                _ctx.handleCompositionStart &&
                                _ctx.handleCompositionStart(...args)),
                            onCompositionupdate:
                              _cache[12] ||
                              (_cache[12] = (...args) =>
                                _ctx.handleCompositionUpdate &&
                                _ctx.handleCompositionUpdate(...args)),
                            onCompositionend:
                              _cache[13] ||
                              (_cache[13] = (...args) =>
                                _ctx.handleCompositionEnd &&
                                _ctx.handleCompositionEnd(...args)),
                            onInput:
                              _cache[14] ||
                              (_cache[14] = (...args) =>
                                _ctx.handleInput && _ctx.handleInput(...args)),
                            onFocus:
                              _cache[15] ||
                              (_cache[15] = (...args) =>
                                _ctx.handleFocus && _ctx.handleFocus(...args)),
                            onBlur:
                              _cache[16] ||
                              (_cache[16] = (...args) =>
                                _ctx.handleBlur && _ctx.handleBlur(...args)),
                            onChange:
                              _cache[17] ||
                              (_cache[17] = (...args) =>
                                _ctx.handleChange &&
                                _ctx.handleChange(...args)),
                            onKeydown:
                              _cache[18] ||
                              (_cache[18] = (...args) =>
                                _ctx.handleKeydown &&
                                _ctx.handleKeydown(...args)),
                          }
                        ),
                        "\n    ",
                        16,
                        _hoisted_9
                      )),
                  _ctx.isWordLimitVisible && _ctx.type === "textarea"
                    ? (Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "openBlock"
                        ]
                      )(),
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createElementBlock"
                        ]
                      )(
                        "span",
                        _hoisted_10,
                        Object(
                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                            "toDisplayString"
                          ]
                        )(_ctx.textLength) +
                          "/" +
                          Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "toDisplayString"
                            ]
                          )(_ctx.maxlength),
                        1
                      ))
                    : Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createCommentVNode"
                        ]
                      )("v-if", true),
                ],
                38
              )
            );
          }

          input_script.render = input_render;
          input_script.__file = "packages/components/input/src/index.vue";

          input_script.install = (app) => {
            app.component(input_script.name, input_script);
          };
          const _Input = input_script;
          const ElInput = _Input;

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vnode.js

          const TEMPLATE = "template";
          const vnode_SCOPE = "VNode";
          var PatchFlags;
          (function (PatchFlags) {
            PatchFlags[(PatchFlags["TEXT"] = 1)] = "TEXT";
            PatchFlags[(PatchFlags["CLASS"] = 2)] = "CLASS";
            PatchFlags[(PatchFlags["STYLE"] = 4)] = "STYLE";
            PatchFlags[(PatchFlags["PROPS"] = 8)] = "PROPS";
            PatchFlags[(PatchFlags["FULL_PROPS"] = 16)] = "FULL_PROPS";
            PatchFlags[(PatchFlags["HYDRATE_EVENTS"] = 32)] = "HYDRATE_EVENTS";
            PatchFlags[(PatchFlags["STABLE_FRAGMENT"] = 64)] =
              "STABLE_FRAGMENT";
            PatchFlags[(PatchFlags["KEYED_FRAGMENT"] = 128)] = "KEYED_FRAGMENT";
            PatchFlags[(PatchFlags["UNKEYED_FRAGMENT"] = 256)] =
              "UNKEYED_FRAGMENT";
            PatchFlags[(PatchFlags["NEED_PATCH"] = 512)] = "NEED_PATCH";
            PatchFlags[(PatchFlags["DYNAMIC_SLOTS"] = 1024)] = "DYNAMIC_SLOTS";
            PatchFlags[(PatchFlags["HOISTED"] = -1)] = "HOISTED";
            PatchFlags[(PatchFlags["BAIL"] = -2)] = "BAIL";
          })(PatchFlags || (PatchFlags = {}));
          const isFragment = (node) =>
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["isVNode"])(
              node
            ) &&
            node.type ===
              external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"];
          const isText = (node) =>
            node.type === external_commonjs_vue_commonjs2_vue_root_Vue_["Text"];
          const isComment = (node) =>
            node.type ===
            external_commonjs_vue_commonjs2_vue_root_Vue_["Comment"];
          const isTemplate = (node) => node.type === TEMPLATE;
          function getChildren(node, depth) {
            if (isComment(node)) return;
            if (isFragment(node) || isTemplate(node)) {
              return depth > 0
                ? getFirstValidNode(node.children, depth - 1)
                : undefined;
            }
            return node;
          }
          const isValidElementNode = (node) =>
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["isVNode"])(
              node
            ) &&
            !isFragment(node) &&
            !isComment(node);
          const getFirstValidNode = (nodes, maxDepth = 3) => {
            if (Array.isArray(nodes)) {
              return getChildren(nodes[0], maxDepth);
            } else {
              return getChildren(nodes, maxDepth);
            }
          };
          function renderIf(
            condition,
            node,
            props,
            children,
            patchFlag,
            patchProps
          ) {
            return condition
              ? renderBlock(node, props, children, patchFlag, patchProps)
              : Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                    "createCommentVNode"
                  ]
                )("v-if", true);
          }
          function renderBlock(node, props, children, patchFlag, patchProps) {
            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"]
              )(node, props, children, patchFlag, patchProps)
            );
          }
          const getNormalizedProps = (node) => {
            if (
              !Object(external_commonjs_vue_commonjs2_vue_root_Vue_["isVNode"])(
                node
              )
            ) {
              debugWarn(vnode_SCOPE, "value must be a VNode");
              return;
            }
            const raw = node.props || {};
            const type = node.type.props || {};
            const props = {};
            Object.keys(type).forEach((key) => {
              if (
                Object(shared_esm_bundler["d" /* hasOwn */])(
                  type[key],
                  "default"
                )
              ) {
                props[key] = type[key].default;
              }
            });
            Object.keys(raw).forEach((key) => {
              props[
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["camelize"]
                )(key)
              ] = raw[key];
            });
            return props;
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-same-target/index.js

          const useSameTarget = (handleClick) => {
            if (!handleClick) {
              return {
                onClick: shared_esm_bundler["a" /* NOOP */],
                onMousedown: shared_esm_bundler["a" /* NOOP */],
                onMouseup: shared_esm_bundler["a" /* NOOP */],
              };
            }
            let mousedownTarget = false;
            let mouseupTarget = false;
            const onClick = (e) => {
              if (mousedownTarget && mouseupTarget) {
                handleClick(e);
              }
              mousedownTarget = mouseupTarget = false;
            };
            const onMousedown = (e) => {
              mousedownTarget = e.target === e.currentTarget;
            };
            const onMouseup = (e) => {
              mouseupTarget = e.target === e.currentTarget;
            };
            return { onClick, onMousedown, onMouseup };
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/components/overlay/index.js

          const overlayProps = buildProps({
            mask: {
              type: Boolean,
              default: true,
            },
            customMaskEvent: {
              type: Boolean,
              default: false,
            },
            overlayClass: {
              type: definePropType([String, Array, Object]),
            },
            zIndex: {
              type: definePropType([String, Number]),
            },
          });
          const overlayEmits = {
            click: (evt) => evt instanceof MouseEvent,
          };
          var Overlay = Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
          )({
            name: "ElOverlay",
            props: overlayProps,
            emits: overlayEmits,
            setup(props, { slots, emit }) {
              const onMaskClick = (e) => {
                emit("click", e);
              };
              const { onClick, onMousedown, onMouseup } = useSameTarget(
                props.customMaskEvent ? void 0 : onMaskClick
              );
              return () => {
                return props.mask
                  ? Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                        "createVNode"
                      ]
                    )(
                      "div",
                      {
                        class: ["el-overlay", props.overlayClass],
                        style: {
                          zIndex: props.zIndex,
                        },
                        onClick,
                        onMousedown,
                        onMouseup,
                      },
                      [
                        Object(
                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                            "renderSlot"
                          ]
                        )(slots, "default"),
                      ],
                      PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS,
                      ["onClick", "onMouseup", "onMousedown"]
                    )
                  : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["h"])(
                      "div",
                      {
                        class: props.overlayClass,
                        style: {
                          zIndex: props.zIndex,
                          position: "fixed",
                          top: "0px",
                          right: "0px",
                          bottom: "0px",
                          left: "0px",
                        },
                      },
                      [
                        Object(
                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                            "renderSlot"
                          ]
                        )(slots, "default"),
                      ]
                    );
              };
            },
          });

          const ElOverlay = Overlay;

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/config.js
          let config_$ELEMENT = {};
          const setConfig = (option) => {
            config_$ELEMENT = option;
          };
          const getConfig = (key) => {
            return config_$ELEMENT[key];
          };

          // CONCATENATED MODULE: ./node_modules/element-plus/es/utils/popup-manager.js

          const onTouchMove = (e) => {
            e.preventDefault();
            e.stopPropagation();
          };
          const onModalClick = () => {
            PopupManager === null || PopupManager === void 0
              ? void 0
              : PopupManager.doOnModalClick();
          };
          let hasModal = false;
          let popup_manager_zIndex;
          const getModal = function () {
            if (isServer) return;
            let modalDom = PopupManager.modalDom;
            if (modalDom) {
              hasModal = true;
            } else {
              hasModal = false;
              modalDom = document.createElement("div");
              PopupManager.modalDom = modalDom;
              on(modalDom, "touchmove", onTouchMove);
              on(modalDom, "click", onModalClick);
            }
            return modalDom;
          };
          const instances = {};
          const PopupManager = {
            modalFade: true,
            modalDom: undefined,
            zIndex: popup_manager_zIndex,
            getInstance(id) {
              return instances[id];
            },
            register(id, instance) {
              if (id && instance) {
                instances[id] = instance;
              }
            },
            deregister(id) {
              if (id) {
                instances[id] = null;
                delete instances[id];
              }
            },
            nextZIndex() {
              return ++PopupManager.zIndex;
            },
            modalStack: [],
            doOnModalClick() {
              const topItem =
                PopupManager.modalStack[PopupManager.modalStack.length - 1];
              if (!topItem) return;
              const instance = PopupManager.getInstance(topItem.id);
              if (instance && instance.closeOnClickModal.value) {
                instance.close();
              }
            },
            openModal(id, zIndex, dom, modalClass, modalFade) {
              if (isServer) return;
              if (!id || zIndex === undefined) return;
              this.modalFade = modalFade;
              const modalStack = this.modalStack;
              for (let i = 0, j = modalStack.length; i < j; i++) {
                const item = modalStack[i];
                if (item.id === id) {
                  return;
                }
              }
              const modalDom = getModal();
              addClass(modalDom, "v-modal");
              if (this.modalFade && !hasModal) {
                addClass(modalDom, "v-modal-enter");
              }
              if (modalClass) {
                const classArr = modalClass.trim().split(/\s+/);
                classArr.forEach((item) => addClass(modalDom, item));
              }
              setTimeout(() => {
                removeClass(modalDom, "v-modal-enter");
              }, 200);
              if (dom && dom.parentNode && dom.parentNode.nodeType !== 11) {
                dom.parentNode.appendChild(modalDom);
              } else {
                document.body.appendChild(modalDom);
              }
              if (zIndex) {
                modalDom.style.zIndex = String(zIndex);
              }
              modalDom.tabIndex = 0;
              modalDom.style.display = "";
              this.modalStack.push({ id, zIndex, modalClass });
            },
            closeModal(id) {
              const modalStack = this.modalStack;
              const modalDom = getModal();
              if (modalStack.length > 0) {
                const topItem = modalStack[modalStack.length - 1];
                if (topItem.id === id) {
                  if (topItem.modalClass) {
                    const classArr = topItem.modalClass.trim().split(/\s+/);
                    classArr.forEach((item) => removeClass(modalDom, item));
                  }
                  modalStack.pop();
                  if (modalStack.length > 0) {
                    modalDom.style.zIndex =
                      modalStack[modalStack.length - 1].zIndex;
                  }
                } else {
                  for (let i = modalStack.length - 1; i >= 0; i--) {
                    if (modalStack[i].id === id) {
                      modalStack.splice(i, 1);
                      break;
                    }
                  }
                }
              }
              if (modalStack.length === 0) {
                if (this.modalFade) {
                  addClass(modalDom, "v-modal-leave");
                }
                setTimeout(() => {
                  if (modalStack.length === 0) {
                    if (modalDom.parentNode)
                      modalDom.parentNode.removeChild(modalDom);
                    modalDom.style.display = "none";
                    PopupManager.modalDom = undefined;
                  }
                  removeClass(modalDom, "v-modal-leave");
                }, 200);
              }
            },
          };
          Object.defineProperty(PopupManager, "zIndex", {
            configurable: true,
            get() {
              if (popup_manager_zIndex === undefined) {
                popup_manager_zIndex = getConfig("zIndex") || 2000;
              }
              return popup_manager_zIndex;
            },
            set(value) {
              popup_manager_zIndex = value;
            },
          });
          const getTopPopup = function () {
            if (isServer) return;
            if (PopupManager.modalStack.length > 0) {
              const topPopup =
                PopupManager.modalStack[PopupManager.modalStack.length - 1];
              if (!topPopup) return;
              const instance = PopupManager.getInstance(topPopup.id);
              return instance;
            }
          };
          if (!isServer) {
            on(window, "keydown", function (event) {
              if (event.code === EVENT_CODE.esc) {
                const topPopup = getTopPopup();
                if (topPopup && topPopup.closeOnPressEscape.value) {
                  topPopup.handleClose
                    ? topPopup.handleClose()
                    : topPopup.handleAction
                    ? topPopup.handleAction("cancel")
                    : topPopup.close();
                }
              }
            });
          }
          /* harmony default export */ var popup_manager = PopupManager;

          // CONCATENATED MODULE: ./node_modules/element-plus/es/components/message-box/index.js

          var message_box_defProp = Object.defineProperty;
          var message_box_defProps = Object.defineProperties;
          var message_box_getOwnPropDescs = Object.getOwnPropertyDescriptors;
          var message_box_getOwnPropSymbols = Object.getOwnPropertySymbols;
          var message_box_hasOwnProp = Object.prototype.hasOwnProperty;
          var message_box_propIsEnum = Object.prototype.propertyIsEnumerable;
          var message_box_defNormalProp = (obj, key, value) =>
            key in obj
              ? message_box_defProp(obj, key, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value,
                })
              : (obj[key] = value);
          var message_box_spreadValues = (a, b) => {
            for (var prop in b || (b = {}))
              if (message_box_hasOwnProp.call(b, prop))
                message_box_defNormalProp(a, prop, b[prop]);
            if (message_box_getOwnPropSymbols)
              for (var prop of message_box_getOwnPropSymbols(b)) {
                if (message_box_propIsEnum.call(b, prop))
                  message_box_defNormalProp(a, prop, b[prop]);
              }
            return a;
          };
          var message_box_spreadProps = (a, b) =>
            message_box_defProps(a, message_box_getOwnPropDescs(b));
          var __async = (__this, __arguments, generator) => {
            return new Promise((resolve, reject) => {
              var fulfilled = (value) => {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              };
              var rejected = (value) => {
                try {
                  step(generator.throw(value));
                } catch (e) {
                  reject(e);
                }
              };
              var step = (x) =>
                x.done
                  ? resolve(x.value)
                  : Promise.resolve(x.value).then(fulfilled, rejected);
              step((generator = generator.apply(__this, __arguments)).next());
            });
          };
          const TypeMap = {
            success: "success",
            info: "info",
            warning: "warning",
            error: "error",
          };
          var message_box_script = Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
          )({
            name: "ElMessageBox",
            directives: {
              TrapFocus: trap_focus,
            },
            components: {
              ElButton: ElButton,
              ElInput: _Input,
              ElOverlay: ElOverlay,
            },
            inheritAttrs: false,
            props: {
              buttonSize: {
                type: String,
                validator: isValidComponentSize,
              },
              modal: {
                type: Boolean,
                default: true,
              },
              lockScroll: {
                type: Boolean,
                default: true,
              },
              showClose: {
                type: Boolean,
                default: true,
              },
              closeOnClickModal: {
                type: Boolean,
                default: true,
              },
              closeOnPressEscape: {
                type: Boolean,
                default: true,
              },
              closeOnHashChange: {
                type: Boolean,
                default: true,
              },
              center: Boolean,
              roundButton: {
                default: false,
                type: Boolean,
              },
              container: {
                type: String,
                default: "body",
              },
              boxType: {
                type: String,
                default: "",
              },
            },
            emits: ["vanish", "action"],
            setup(props, { emit }) {
              const { t } = useLocaleInject();
              const visible = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(false);
              const state = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["reactive"]
              )({
                beforeClose: null,
                callback: null,
                cancelButtonText: "",
                cancelButtonClass: "",
                confirmButtonText: "",
                confirmButtonClass: "",
                customClass: "",
                customStyle: {},
                dangerouslyUseHTMLString: false,
                distinguishCancelAndClose: false,
                iconClass: "",
                inputPattern: null,
                inputPlaceholder: "",
                inputType: "text",
                inputValue: null,
                inputValidator: null,
                inputErrorMessage: "",
                message: null,
                modalFade: true,
                modalClass: "",
                showCancelButton: false,
                showConfirmButton: true,
                type: "",
                title: void 0,
                showInput: false,
                action: "",
                confirmButtonLoading: false,
                cancelButtonLoading: false,
                confirmButtonDisabled: false,
                editorErrorMessage: "",
                validateError: false,
                zIndex: popup_manager.nextZIndex(),
              });
              const icon = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(
                () =>
                  state.iconClass ||
                  (state.type && TypeMap[state.type]
                    ? `el-icon-${TypeMap[state.type]}`
                    : "")
              );
              const hasMessage = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => !!state.message);
              const inputRef = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(null);
              const confirmRef = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(null);
              const confirmButtonClasses = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(() => `el-button--primary ${state.confirmButtonClass}`);
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
                () => state.inputValue,
                (val) =>
                  __async(this, null, function* () {
                    yield Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                    )();
                    if (props.boxType === "prompt" && val !== null) {
                      validate();
                    }
                  }),
                { immediate: true }
              );
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
                () => visible.value,
                (val) => {
                  if (val) {
                    if (
                      props.boxType === "alert" ||
                      props.boxType === "confirm"
                    ) {
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "nextTick"
                        ]
                      )().then(() => {
                        var _a, _b, _c;
                        (_c =
                          (_b =
                            (_a = confirmRef.value) == null
                              ? void 0
                              : _a.$el) == null
                            ? void 0
                            : _b.focus) == null
                          ? void 0
                          : _c.call(_b);
                      });
                    }
                    state.zIndex = popup_manager.nextZIndex();
                  }
                  if (props.boxType !== "prompt") return;
                  if (val) {
                    Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                    )().then(() => {
                      if (inputRef.value && inputRef.value.$el) {
                        getInputElement().focus();
                      }
                    });
                  } else {
                    state.editorErrorMessage = "";
                    state.validateError = false;
                  }
                }
              );
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["onMounted"]
              )(() =>
                __async(this, null, function* () {
                  yield Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                  )();
                  if (props.closeOnHashChange) {
                    on(window, "hashchange", doClose);
                  }
                })
              );
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["onBeforeUnmount"]
              )(() => {
                if (props.closeOnHashChange) {
                  off(window, "hashchange", doClose);
                }
              });
              function doClose() {
                if (!visible.value) return;
                visible.value = false;
                Object(
                  external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"]
                )(() => {
                  if (state.action) emit("action", state.action);
                });
              }
              const handleWrapperClick = () => {
                if (props.closeOnClickModal) {
                  handleAction(
                    state.distinguishCancelAndClose ? "close" : "cancel"
                  );
                }
              };
              const handleInputEnter = () => {
                if (state.inputType !== "textarea") {
                  return handleAction("confirm");
                }
              };
              const handleAction = (action) => {
                var _a;
                if (
                  props.boxType === "prompt" &&
                  action === "confirm" &&
                  !validate()
                ) {
                  return;
                }
                state.action = action;
                if (state.beforeClose) {
                  (_a = state.beforeClose) == null
                    ? void 0
                    : _a.call(state, action, state, doClose);
                } else {
                  doClose();
                }
              };
              const validate = () => {
                if (props.boxType === "prompt") {
                  const inputPattern = state.inputPattern;
                  if (
                    inputPattern &&
                    !inputPattern.test(state.inputValue || "")
                  ) {
                    state.editorErrorMessage =
                      state.inputErrorMessage || t("el.messagebox.error");
                    state.validateError = true;
                    return false;
                  }
                  const inputValidator = state.inputValidator;
                  if (typeof inputValidator === "function") {
                    const validateResult = inputValidator(state.inputValue);
                    if (validateResult === false) {
                      state.editorErrorMessage =
                        state.inputErrorMessage || t("el.messagebox.error");
                      state.validateError = true;
                      return false;
                    }
                    if (typeof validateResult === "string") {
                      state.editorErrorMessage = validateResult;
                      state.validateError = true;
                      return false;
                    }
                  }
                }
                state.editorErrorMessage = "";
                state.validateError = false;
                return true;
              };
              const getInputElement = () => {
                const inputRefs = inputRef.value.$refs;
                return inputRefs.input || inputRefs.textarea;
              };
              const handleClose = () => {
                handleAction("close");
              };
              if (props.closeOnPressEscape) {
                use_modal(
                  {
                    handleClose,
                  },
                  visible
                );
              } else {
                use_prevent_global(
                  visible,
                  "keydown",
                  (e) => e.code === EVENT_CODE.esc
                );
              }
              if (props.lockScroll) {
                use_lockscreen(visible);
              }
              use_restore_active(visible);
              return message_box_spreadProps(
                message_box_spreadValues(
                  {},
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["toRefs"]
                  )(state)
                ),
                {
                  visible,
                  hasMessage,
                  icon,
                  confirmButtonClasses,
                  inputRef,
                  confirmRef,
                  doClose,
                  handleClose,
                  handleWrapperClick,
                  handleInputEnter,
                  handleAction,
                  t,
                }
              );
            },
          });

          const message_box_hoisted_1 = ["aria-label"];
          const message_box_hoisted_2 = {
            key: 0,
            class: "el-message-box__header",
          };
          const message_box_hoisted_3 = { class: "el-message-box__title" };
          const message_box_hoisted_4 = /* @__PURE__ */ Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["createElementVNode"]
          )("i", { class: "el-message-box__close el-icon-close" }, null, -1);
          const message_box_hoisted_5 = [message_box_hoisted_4];
          const message_box_hoisted_6 = { class: "el-message-box__content" };
          const message_box_hoisted_7 = { class: "el-message-box__container" };
          const message_box_hoisted_8 = {
            key: 1,
            class: "el-message-box__message",
          };
          const message_box_hoisted_9 = { key: 0 };
          const message_box_hoisted_10 = ["innerHTML"];
          const _hoisted_11 = { class: "el-message-box__input" };
          const _hoisted_12 = { class: "el-message-box__btns" };
          function message_box_render(
            _ctx,
            _cache,
            $props,
            $setup,
            $data,
            $options
          ) {
            const _component_el_input = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"]
            )("el-input");
            const _component_el_button = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"]
            )("el-button");
            const _component_el_overlay = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"]
            )("el-overlay");
            const _directive_trap_focus = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["resolveDirective"]
            )("trap-focus");
            return (
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"]
              )(),
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"]
              )(
                external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"],
                {
                  name: "fade-in-linear",
                  onAfterLeave:
                    _cache[7] || (_cache[7] = ($event) => _ctx.$emit("vanish")),
                },
                {
                  default: Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"]
                  )(() => [
                    Object(
                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                        "withDirectives"
                      ]
                    )(
                      Object(
                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                          "createVNode"
                        ]
                      )(
                        _component_el_overlay,
                        {
                          "z-index": _ctx.zIndex,
                          "overlay-class": ["is-message-box", _ctx.modalClass],
                          mask: _ctx.modal,
                          onClick: Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "withModifiers"
                            ]
                          )(_ctx.handleWrapperClick, ["self"]),
                        },
                        {
                          default: Object(
                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                              "withCtx"
                            ]
                          )(() => [
                            Object(
                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                "withDirectives"
                              ]
                            )(
                              Object(
                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                  "createElementVNode"
                                ]
                              )(
                                "div",
                                {
                                  ref: "root",
                                  "aria-label": _ctx.title || "dialog",
                                  "aria-modal": "true",
                                  class: Object(
                                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                                      "normalizeClass"
                                    ]
                                  )([
                                    "el-message-box",
                                    _ctx.customClass,
                                    { "el-message-box--center": _ctx.center },
                                  ]),
                                  style: Object(
                                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                                      "normalizeStyle"
                                    ]
                                  )(_ctx.customStyle),
                                },
                                [
                                  _ctx.title !== null && _ctx.title !== void 0
                                    ? (Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "openBlock"
                                        ]
                                      )(),
                                      Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createElementBlock"
                                        ]
                                      )("div", message_box_hoisted_2, [
                                        Object(
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "createElementVNode"
                                          ]
                                        )("div", message_box_hoisted_3, [
                                          _ctx.icon && _ctx.center
                                            ? (Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "openBlock"
                                                ]
                                              )(),
                                              Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "createElementBlock"
                                                ]
                                              )(
                                                "div",
                                                {
                                                  key: 0,
                                                  class: Object(
                                                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                      "normalizeClass"
                                                    ]
                                                  )([
                                                    "el-message-box__status",
                                                    _ctx.icon,
                                                  ]),
                                                },
                                                null,
                                                2
                                              ))
                                            : Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "createCommentVNode"
                                                ]
                                              )("v-if", true),
                                          Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "createElementVNode"
                                            ]
                                          )(
                                            "span",
                                            null,
                                            Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "toDisplayString"
                                              ]
                                            )(_ctx.title),
                                            1
                                          ),
                                        ]),
                                        _ctx.showClose
                                          ? (Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "openBlock"
                                              ]
                                            )(),
                                            Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "createElementBlock"
                                              ]
                                            )(
                                              "button",
                                              {
                                                key: 0,
                                                type: "button",
                                                class:
                                                  "el-message-box__headerbtn",
                                                "aria-label": "Close",
                                                onClick:
                                                  _cache[0] ||
                                                  (_cache[0] = ($event) =>
                                                    _ctx.handleAction(
                                                      _ctx.distinguishCancelAndClose
                                                        ? "close"
                                                        : "cancel"
                                                    )),
                                                onKeydown:
                                                  _cache[1] ||
                                                  (_cache[1] = Object(
                                                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                      "withKeys"
                                                    ]
                                                  )(
                                                    Object(
                                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                        "withModifiers"
                                                      ]
                                                    )(
                                                      ($event) =>
                                                        _ctx.handleAction(
                                                          _ctx.distinguishCancelAndClose
                                                            ? "close"
                                                            : "cancel"
                                                        ),
                                                      ["prevent"]
                                                    ),
                                                    ["enter"]
                                                  )),
                                              },
                                              message_box_hoisted_5,
                                              32
                                            ))
                                          : Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "createCommentVNode"
                                              ]
                                            )("v-if", true),
                                      ]))
                                    : Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createCommentVNode"
                                        ]
                                      )("v-if", true),
                                  Object(
                                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                                      "createElementVNode"
                                    ]
                                  )("div", message_box_hoisted_6, [
                                    Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "createElementVNode"
                                      ]
                                    )("div", message_box_hoisted_7, [
                                      _ctx.icon &&
                                      !_ctx.center &&
                                      _ctx.hasMessage
                                        ? (Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "openBlock"
                                            ]
                                          )(),
                                          Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "createElementBlock"
                                            ]
                                          )(
                                            "div",
                                            {
                                              key: 0,
                                              class: Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "normalizeClass"
                                                ]
                                              )([
                                                "el-message-box__status",
                                                _ctx.icon,
                                              ]),
                                            },
                                            null,
                                            2
                                          ))
                                        : Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "createCommentVNode"
                                            ]
                                          )("v-if", true),
                                      _ctx.hasMessage
                                        ? (Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "openBlock"
                                            ]
                                          )(),
                                          Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "createElementBlock"
                                            ]
                                          )("div", message_box_hoisted_8, [
                                            Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "renderSlot"
                                              ]
                                            )(
                                              _ctx.$slots,
                                              "default",
                                              {},
                                              () => [
                                                !_ctx.dangerouslyUseHTMLString
                                                  ? (Object(
                                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                        "openBlock"
                                                      ]
                                                    )(),
                                                    Object(
                                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                        "createElementBlock"
                                                      ]
                                                    )(
                                                      "p",
                                                      message_box_hoisted_9,
                                                      Object(
                                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                          "toDisplayString"
                                                        ]
                                                      )(_ctx.message),
                                                      1
                                                    ))
                                                  : (Object(
                                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                        "openBlock"
                                                      ]
                                                    )(),
                                                    Object(
                                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                        "createElementBlock"
                                                      ]
                                                    )(
                                                      "p",
                                                      {
                                                        key: 1,
                                                        innerHTML: _ctx.message,
                                                      },
                                                      null,
                                                      8,
                                                      message_box_hoisted_10
                                                    )),
                                              ]
                                            ),
                                          ]))
                                        : Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "createCommentVNode"
                                            ]
                                          )("v-if", true),
                                    ]),
                                    Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "withDirectives"
                                      ]
                                    )(
                                      Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createElementVNode"
                                        ]
                                      )(
                                        "div",
                                        _hoisted_11,
                                        [
                                          Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "createVNode"
                                            ]
                                          )(
                                            _component_el_input,
                                            {
                                              ref: "inputRef",
                                              modelValue: _ctx.inputValue,
                                              "onUpdate:modelValue":
                                                _cache[2] ||
                                                (_cache[2] = ($event) =>
                                                  (_ctx.inputValue = $event)),
                                              type: _ctx.inputType,
                                              placeholder:
                                                _ctx.inputPlaceholder,
                                              class: Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "normalizeClass"
                                                ]
                                              )({
                                                invalid: _ctx.validateError,
                                              }),
                                              onKeydown: Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "withKeys"
                                                ]
                                              )(
                                                Object(
                                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                    "withModifiers"
                                                  ]
                                                )(_ctx.handleInputEnter, [
                                                  "prevent",
                                                ]),
                                                ["enter"]
                                              ),
                                            },
                                            null,
                                            8,
                                            [
                                              "modelValue",
                                              "type",
                                              "placeholder",
                                              "class",
                                              "onKeydown",
                                            ]
                                          ),
                                          Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "createElementVNode"
                                            ]
                                          )(
                                            "div",
                                            {
                                              class: "el-message-box__errormsg",
                                              style: Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "normalizeStyle"
                                                ]
                                              )({
                                                visibility:
                                                  !!_ctx.editorErrorMessage
                                                    ? "visible"
                                                    : "hidden",
                                              }),
                                            },
                                            Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "toDisplayString"
                                              ]
                                            )(_ctx.editorErrorMessage),
                                            5
                                          ),
                                        ],
                                        512
                                      ),
                                      [
                                        [
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "vShow"
                                          ],
                                          _ctx.showInput,
                                        ],
                                      ]
                                    ),
                                  ]),
                                  Object(
                                    external_commonjs_vue_commonjs2_vue_root_Vue_[
                                      "createElementVNode"
                                    ]
                                  )("div", _hoisted_12, [
                                    _ctx.showCancelButton
                                      ? (Object(
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "openBlock"
                                          ]
                                        )(),
                                        Object(
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "createBlock"
                                          ]
                                        )(
                                          _component_el_button,
                                          {
                                            key: 0,
                                            loading: _ctx.cancelButtonLoading,
                                            class: Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "normalizeClass"
                                              ]
                                            )([_ctx.cancelButtonClass]),
                                            round: _ctx.roundButton,
                                            size: _ctx.buttonSize || "small",
                                            onClick:
                                              _cache[3] ||
                                              (_cache[3] = ($event) =>
                                                _ctx.handleAction("cancel")),
                                            onKeydown:
                                              _cache[4] ||
                                              (_cache[4] = Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "withKeys"
                                                ]
                                              )(
                                                Object(
                                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                    "withModifiers"
                                                  ]
                                                )(
                                                  ($event) =>
                                                    _ctx.handleAction("cancel"),
                                                  ["prevent"]
                                                ),
                                                ["enter"]
                                              )),
                                          },
                                          {
                                            default: Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "withCtx"
                                              ]
                                            )(() => [
                                              Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "createTextVNode"
                                                ]
                                              )(
                                                Object(
                                                  external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                    "toDisplayString"
                                                  ]
                                                )(
                                                  _ctx.cancelButtonText ||
                                                    _ctx.t(
                                                      "el.messagebox.cancel"
                                                    )
                                                ),
                                                1
                                              ),
                                            ]),
                                            _: 1,
                                          },
                                          8,
                                          ["loading", "class", "round", "size"]
                                        ))
                                      : Object(
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "createCommentVNode"
                                          ]
                                        )("v-if", true),
                                    Object(
                                      external_commonjs_vue_commonjs2_vue_root_Vue_[
                                        "withDirectives"
                                      ]
                                    )(
                                      Object(
                                        external_commonjs_vue_commonjs2_vue_root_Vue_[
                                          "createVNode"
                                        ]
                                      )(
                                        _component_el_button,
                                        {
                                          ref: "confirmRef",
                                          loading: _ctx.confirmButtonLoading,
                                          class: Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "normalizeClass"
                                            ]
                                          )([_ctx.confirmButtonClasses]),
                                          round: _ctx.roundButton,
                                          disabled: _ctx.confirmButtonDisabled,
                                          size: _ctx.buttonSize || "small",
                                          onClick:
                                            _cache[5] ||
                                            (_cache[5] = ($event) =>
                                              _ctx.handleAction("confirm")),
                                          onKeydown:
                                            _cache[6] ||
                                            (_cache[6] = Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "withKeys"
                                              ]
                                            )(
                                              Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "withModifiers"
                                                ]
                                              )(
                                                ($event) =>
                                                  _ctx.handleAction("confirm"),
                                                ["prevent"]
                                              ),
                                              ["enter"]
                                            )),
                                        },
                                        {
                                          default: Object(
                                            external_commonjs_vue_commonjs2_vue_root_Vue_[
                                              "withCtx"
                                            ]
                                          )(() => [
                                            Object(
                                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                "createTextVNode"
                                              ]
                                            )(
                                              Object(
                                                external_commonjs_vue_commonjs2_vue_root_Vue_[
                                                  "toDisplayString"
                                                ]
                                              )(
                                                _ctx.confirmButtonText ||
                                                  _ctx.t(
                                                    "el.messagebox.confirm"
                                                  )
                                              ),
                                              1
                                            ),
                                          ]),
                                          _: 1,
                                        },
                                        8,
                                        [
                                          "loading",
                                          "class",
                                          "round",
                                          "disabled",
                                          "size",
                                        ]
                                      ),
                                      [
                                        [
                                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                                            "vShow"
                                          ],
                                          _ctx.showConfirmButton,
                                        ],
                                      ]
                                    ),
                                  ]),
                                ],
                                14,
                                message_box_hoisted_1
                              ),
                              [[_directive_trap_focus]]
                            ),
                          ]),
                          _: 3,
                        },
                        8,
                        ["z-index", "overlay-class", "mask", "onClick"]
                      ),
                      [
                        [
                          external_commonjs_vue_commonjs2_vue_root_Vue_[
                            "vShow"
                          ],
                          _ctx.visible,
                        ],
                      ]
                    ),
                  ]),
                  _: 3,
                }
              )
            );
          }

          message_box_script.render = message_box_render;
          message_box_script.__file =
            "packages/components/message-box/src/index.vue";

          const messageInstance = new Map();
          const initInstance = (props, container) => {
            const vnode = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["h"]
            )(message_box_script, props);
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["render"])(
              vnode,
              container
            );
            document.body.appendChild(container.firstElementChild);
            return vnode.component;
          };
          const genContainer = () => {
            return document.createElement("div");
          };
          const showMessage = (options) => {
            const container = genContainer();
            options.onVanish = () => {
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["render"])(
                null,
                container
              );
              messageInstance.delete(vm);
            };
            options.onAction = (action) => {
              const currentMsg = messageInstance.get(vm);
              let resolve;
              if (options.showInput) {
                resolve = { value: vm.inputValue, action };
              } else {
                resolve = action;
              }
              if (options.callback) {
                options.callback(resolve, instance.proxy);
              } else {
                if (action === "cancel" || action === "close") {
                  if (
                    options.distinguishCancelAndClose &&
                    action !== "cancel"
                  ) {
                    currentMsg.reject("close");
                  } else {
                    currentMsg.reject("cancel");
                  }
                } else {
                  currentMsg.resolve(resolve);
                }
              }
            };
            const instance = initInstance(options, container);
            const vm = instance.proxy;
            for (const prop in options) {
              if (
                Object(shared_esm_bundler["d" /* hasOwn */])(options, prop) &&
                !Object(shared_esm_bundler["d" /* hasOwn */])(vm.$props, prop)
              ) {
                vm[prop] = options[prop];
              }
            }
            Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
              () => vm.message,
              (newVal, oldVal) => {
                if (
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["isVNode"]
                  )(newVal)
                ) {
                  instance.slots.default = () => [newVal];
                } else if (
                  Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["isVNode"]
                  )(oldVal) &&
                  !Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["isVNode"]
                  )(newVal)
                ) {
                  delete instance.slots.default;
                }
              },
              {
                immediate: true,
              }
            );
            vm.visible = true;
            return vm;
          };
          function MessageBox(options) {
            if (isServer) return;
            let callback;
            if (
              Object(shared_esm_bundler["i" /* isString */])(options) ||
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["isVNode"])(
                options
              )
            ) {
              options = {
                message: options,
              };
            } else {
              callback = options.callback;
            }
            return new Promise((resolve, reject) => {
              const vm = showMessage(options);
              messageInstance.set(vm, {
                options,
                callback,
                resolve,
                reject,
              });
            });
          }
          MessageBox.alert = (message, title, options) => {
            if (typeof title === "object") {
              options = title;
              title = "";
            } else if (title === void 0) {
              title = "";
            }
            return MessageBox(
              Object.assign(
                {
                  title,
                  message,
                  type: "",
                  closeOnPressEscape: false,
                  closeOnClickModal: false,
                },
                options,
                {
                  boxType: "alert",
                }
              )
            );
          };
          MessageBox.confirm = (message, title, options) => {
            if (typeof title === "object") {
              options = title;
              title = "";
            } else if (title === void 0) {
              title = "";
            }
            return MessageBox(
              Object.assign(
                {
                  title,
                  message,
                  type: "",
                  showCancelButton: true,
                },
                options,
                {
                  boxType: "confirm",
                }
              )
            );
          };
          MessageBox.prompt = (message, title, options) => {
            if (typeof title === "object") {
              options = title;
              title = "";
            } else if (title === void 0) {
              title = "";
            }
            return MessageBox(
              Object.assign(
                {
                  title,
                  message,
                  showCancelButton: true,
                  showInput: true,
                  type: "",
                },
                options,
                {
                  boxType: "prompt",
                }
              )
            );
          };
          MessageBox.close = () => {
            messageInstance.forEach((_, vm) => {
              vm.doClose();
            });
            messageInstance.clear();
          };

          const _MessageBox = MessageBox;
          _MessageBox.install = (app) => {
            app.config.globalProperties.$msgbox = _MessageBox;
            app.config.globalProperties.$messageBox = _MessageBox;
            app.config.globalProperties.$alert = _MessageBox.alert;
            app.config.globalProperties.$confirm = _MessageBox.confirm;
            app.config.globalProperties.$prompt = _MessageBox.prompt;
          };
          const ElMessageBox = _MessageBox;

          // CONCATENATED MODULE: ./src/store/Editor/mutations/components.ts

          var _componentMutations;

          var componentMutations =
            ((_componentMutations = {}),
            _defineProperty(
              _componentMutations,
              MUTATION_TYPE.ADD_COMPONENT,
              function (state, _ref) {
                var targetComponent = _ref.targetComponent,
                  component = _ref.component;
                util_mutationWithSnapshot(state, function () {
                  var page = state.pages.find(function (item) {
                    return item.id === state.pageActive;
                  }); // 是否添加到目标容器

                  if (targetComponent) {
                    var _target = targetComponent;

                    if (targetComponent.type === ComponentType.Tab) {
                      _target =
                        targetComponent.children[targetComponent.active];
                    }

                    component.parentId = _target.id;

                    _target.children.push(component);
                  } else {
                    page.components.push(component);
                  }
                });
                state.enterContainer = null;
                state.isDrag = false;
              }
            ),
            _defineProperty(
              _componentMutations,
              MUTATION_TYPE.DRAG_COMPONENT,
              function (state) {
                var payload =
                  arguments.length > 1 && arguments[1] !== undefined
                    ? arguments[1]
                    : true;
                state.isDrag = payload;
                state.enterContainer = null;
              }
            ),
            _defineProperty(
              _componentMutations,
              MUTATION_TYPE.UPDATE_COMPONENT,
              function (state, payload) {
                util_mutationWithSnapshot(state, function () {
                  var currentPage = state.pages.find(function (item) {
                    return item.id === state.pageActive;
                  });
                  var target = findItemById(currentPage.components, payload.id);

                  if (target) {
                    Object.assign(target, _objectSpread2({}, payload));
                    util_updateSelectedComponent(state);
                  }
                });
              }
            ),
            _defineProperty(
              _componentMutations,
              MUTATION_TYPE.SELECT_COMPONENT,
              function (state, payload) {
                if (payload) {
                  var _state$selectedCompon;

                  // 如果选中的id和当前已选一致
                  if (
                    payload.id ===
                    ((_state$selectedCompon = state.selectedComponents) ===
                      null || _state$selectedCompon === void 0
                      ? void 0
                      : _state$selectedCompon.id)
                  )
                    return;
                } else {
                  payload = state.selectedComponents;
                } // 如果不存在

                if (!payload) return; // 设置当前选中的组件

                state.selectedComponents = _objectSpread2({}, payload); // 通知更新虚拟边框

                useEventBus.$emit(EventType.updateBorder, payload.id);
              }
            ),
            _defineProperty(
              _componentMutations,
              MUTATION_TYPE.REMOVE_COMPONENT,
              function (state) {
                // 前提是当前已经有选中的组件
                if (state.selectedComponents) {
                  util_mutationWithSnapshot(state, function () {
                    // 查询当前所在页面
                    var currentPage = state.pages.find(function (item) {
                      return item.id === state.pageActive;
                    }); // 找到容器

                    var target = findItemAndParentById(
                      currentPage.components,
                      state.selectedComponents.id
                    );

                    if (target) {
                      // 删除
                      target.parent.splice(target.index, 1);
                    } // 更新选中的组件信息

                    util_updateSelectedComponent(state);
                  });
                }
              }
            ),
            _defineProperty(
              _componentMutations,
              MUTATION_TYPE.ENTER_CONTAINER,
              function (state, target) {
                state.enterContainer = target;
              }
            ),
            _defineProperty(
              _componentMutations,
              MUTATION_TYPE.LEAVE_CONTAINER,
              function (state) {
                state.enterContainer = null;
              }
            ),
            _defineProperty(
              _componentMutations,
              MUTATION_TYPE.EXTRACT_COMPONENT,
              function (state, _ref2) {
                var name = _ref2.name,
                  component = _ref2.component;

                if (
                  state.extractComponents.find(function (item) {
                    return item.name === name;
                  })
                ) {
                  return ElMessageBox({
                    type: "warning",
                    title: "错误",
                    message: "".concat(name, "\u7EC4\u4EF6\u5DF2\u5B58\u5728"),
                  });
                }

                component.alias = name;
                state.extractComponents.push({
                  name: name,
                  payload: component,
                });
              }
            ),
            _componentMutations);
          /* harmony default export */ var components = componentMutations;
          // CONCATENATED MODULE: ./src/store/Editor/mutations/event.ts

          var _eventMutations;

          var eventMutations =
            ((_eventMutations = {}),
            _defineProperty(
              _eventMutations,
              MUTATION_TYPE.ADD_EVENT,
              function (state, event) {
                util_mutationWithSnapshot(state, function () {
                  var currentPage = state.pages.find(function (item) {
                    return item.id === state.pageActive;
                  });
                  var target = findItemById(
                    currentPage.components,
                    state.selectedComponents.id
                  );

                  if (target) {
                    var events = target.events || [];
                    events.push(event);
                    target.events = events;
                    util_updateSelectedComponent(state);
                  }
                });
              }
            ),
            _defineProperty(
              _eventMutations,
              MUTATION_TYPE.REMOVE_EVENT,
              function (state, eventIndex) {
                util_mutationWithSnapshot(state, function () {
                  var currentPage = state.pages.find(function (item) {
                    return item.id === state.pageActive;
                  });
                  var target = findItemById(
                    currentPage.components,
                    state.selectedComponents.id
                  );

                  if (target) {
                    var events = target.events;
                    events === null || events === void 0
                      ? void 0
                      : events.splice(eventIndex, 1);
                  }

                  util_updateSelectedComponent(state);
                });
              }
            ),
            _defineProperty(
              _eventMutations,
              MUTATION_TYPE.UPDATE_EVENT,
              function (state, _ref) {
                var eventIndex = _ref.eventIndex,
                  event = _ref.event;
                util_mutationWithSnapshot(state, function () {
                  var currentPage = state.pages.find(function (item) {
                    return item.id === state.pageActive;
                  });
                  var target = findItemById(
                    currentPage.components,
                    state.selectedComponents.id
                  );

                  if (target) {
                    var events = target.events;
                    events[eventIndex] = _objectSpread2({}, event);
                  }

                  util_updateSelectedComponent(state);
                });
              }
            ),
            _eventMutations);
          /* harmony default export */ var mutations_event = eventMutations;
          // CONCATENATED MODULE: ./src/store/Editor/mutations/page.ts

          var _pageMutations;

          var pageMutations =
            ((_pageMutations = {}),
            _defineProperty(
              _pageMutations,
              MUTATION_TYPE.ADD_PAGE,
              function (state) {
                util_mutationWithSnapshot(state, function () {
                  util_addPage(state);
                });
              }
            ),
            _defineProperty(
              _pageMutations,
              MUTATION_TYPE.SELECT_PAGE,
              function (state, payload) {
                if (payload === state.pageActive) return;
                state.selectedComponents = null;
                state.pageActive = payload;
              }
            ),
            _pageMutations);
          /* harmony default export */ var mutations_page = pageMutations;
          // CONCATENATED MODULE: ./src/store/Editor/mutations/index.ts

          var mutations_objectSpread2;

          var mutations = _objectSpread2(
            _objectSpread2(
              _objectSpread2(_objectSpread2({}, components), mutations_event),
              mutations_page
            ),
            {},
            ((mutations_objectSpread2 = {}),
            _defineProperty(
              mutations_objectSpread2,
              MUTATION_TYPE.UNDO,
              function (state) {
                var result = util_diffPatcher.undo();

                if (result) {
                  state.pages = result;
                  util_updateSelectedComponent(state);
                  updateRedoUndoState(state);
                }
              }
            ),
            _defineProperty(
              mutations_objectSpread2,
              MUTATION_TYPE.REDO,
              function (state) {
                var result = util_diffPatcher.redo();

                if (result) {
                  state.pages = result;
                  util_updateSelectedComponent(state);
                  updateRedoUndoState(state);
                }
              }
            ),
            _defineProperty(
              mutations_objectSpread2,
              MUTATION_TYPE.INIT,
              function (state) {
                // 如果已经存在，不需要在初始化
                if (state.pages.length > 0) return;
                state.pages = [];
                util_addPage(state);
              }
            ),
            _defineProperty(
              mutations_objectSpread2,
              MUTATION_TYPE.RESIZE,
              function (state, payload) {
                var currentPage = state.pages.find(function (item) {
                  return item.id === state.pageActive;
                });
                var target = findItemById(currentPage.components, payload.id);

                if (target) {
                  Object.assign(target, _objectSpread2({}, payload));
                  util_updateSelectedComponent(state);
                  useEventBus.$emit(EventType.updateBorder);
                }
              }
            ),
            _defineProperty(
              mutations_objectSpread2,
              MUTATION_TYPE.DRAG_TREE,
              function (state, payload) {
                util_mutationWithSnapshot(state, function () {
                  var currentPage = state.pages.find(function (item) {
                    return item.id === state.pageActive;
                  });
                  currentPage.components = payload;
                });
                useEventBus.$emit(EventType.updateBorder);
              }
            ),
            mutations_objectSpread2)
          );

          /* harmony default export */ var Editor_mutations = mutations;
          // CONCATENATED MODULE: ./src/store/Editor/getters.ts

          var getters = {
            currentPage: function currentPage(state) {
              return state.pages.find(function (item) {
                return item.id === state.pageActive;
              });
            },
            isSelectRoot: function isSelectRoot(state) {
              var _state$selectedCompon;

              return (
                ((_state$selectedCompon = state.selectedComponents) === null ||
                _state$selectedCompon === void 0
                  ? void 0
                  : _state$selectedCompon.id) === "root"
              );
            },
            extractComponents: function extractComponents(state) {
              return state.extractComponents;
            },
          };
          /* harmony default export */ var Editor_getters = getters;
          // CONCATENATED MODULE: ./src/store/Editor/index.ts

          var Editor_module = {
            state: {
              pageActive: "",
              pages: [],
              selectedComponents: null,
              allowRedo: false,
              allowUndo: false,
              isDrag: false,
              enterContainer: null,
              extractComponents: [],
            },
            mutations: _objectSpread2(
              _objectSpread2({}, Editor_mutations),
              {},
              {
                load: function load(state, payload) {
                  state.pages = payload;
                },
                loadByCache: function loadByCache(state, payload) {
                  state.pageActive = payload.pageActive;
                  state.pages = payload.pages;
                  state.selectedComponents = payload.selectedComponents;
                  state.allowRedo = payload.allowRedo;
                  state.allowUndo = payload.allowUndo;
                  state.isDrag = payload.isDrag;
                  state.enterContainer = payload.enterContainer;
                  state.extractComponents = payload.extractComponents;
                },
              }
            ),
            getters: _objectSpread2({}, Editor_getters),
          };
          /* harmony default export */ var Editor = Editor_module;
          // CONCATENATED MODULE: ./src/store/index.ts

          /* harmony default export */ var src_store = createStore({
            strict: true,
            modules: {
              editor: Editor,
            },
            getters: {
              a: function a() {
                return 1;
              },
            },
            plugins: [
              function (store) {
                var needCacheMutations = [
                  MUTATION_TYPE.ADD_PAGE,
                  MUTATION_TYPE.ADD_EVENT,
                  MUTATION_TYPE.REMOVE_EVENT,
                  MUTATION_TYPE.UPDATE_EVENT,
                  MUTATION_TYPE.UPDATE_COMPONENT,
                  MUTATION_TYPE.REMOVE_COMPONENT,
                  MUTATION_TYPE.REDO,
                  MUTATION_TYPE.UNDO,
                  MUTATION_TYPE.RESIZE,
                  MUTATION_TYPE.DRAG_TREE,
                  MUTATION_TYPE.ADD_COMPONENT,
                  MUTATION_TYPE.DRAG_COMPONENT,
                  MUTATION_TYPE.SELECT_COMPONENT,
                ];
                store.subscribe(function (mutation, state) {
                  if (needCacheMutations.includes(mutation.type)) {
                    console.log("cc", mutation.type);
                    localStorage.setItem(
                      CACHE_KEY,
                      JSON.stringify({
                        editorData: state.editor,
                        diffPatcher: util_diffPatcher,
                      })
                    );
                  }
                });
              },
            ],
          });
          var store_key = Symbol();
          function store_useStore() {
            return useStore(store_key);
          }
          // CONCATENATED MODULE: ./src/hooks/useDrag.ts

          function componentsCopy(component) {
            var parentId =
              arguments.length > 1 && arguments[1] !== undefined
                ? arguments[1]
                : "";
            var depth =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : 0;
            component.id = esm_browser_v4();

            if (parentId) {
              component.parentId = parentId;
              component.lock = true;
            }

            if (component.children) {
              component.children.forEach(function (item) {
                componentsCopy(item, component.id, ++depth);
              });
            } else {
              if (!depth) return component;
            }

            return component;
          }

          /* harmony default export */ var useDrag = function () {
            var store = store_useStore();

            var dragstart = function dragstart(e, item) {
              var isExtractCom =
                arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : false;
              var data = isExtractCom
                ? {
                    type: "extract",
                    name: item.name,
                  }
                : {
                    type: item.type,
                  };
              e.dataTransfer.setData("dragInfo", JSON.stringify(data));
              store.commit(MUTATION_TYPE.DRAG_COMPONENT);
            };

            var dragenter = function dragenter(e, targetComponent) {
              e.stopPropagation();

              if (
                targetComponent !== null &&
                targetComponent !== void 0 &&
                targetComponent.isContainer
              ) {
                store.commit(MUTATION_TYPE.ENTER_CONTAINER, targetComponent);
              }
            };

            var dragleave = function dragleave(e) {
              e.stopPropagation();
            };

            var drop = function drop(e, targetComponent) {
              e.stopPropagation();
              var dragInfo = JSON.parse(e.dataTransfer.getData("dragInfo"));
              var type = dragInfo.type,
                name = dragInfo.name;

              if (
                targetComponent !== null &&
                targetComponent !== void 0 &&
                targetComponent.isContainer
              ) {
                var component;

                if (type === "extract") {
                  component = store.state.editor.extractComponents.find(
                    function (item) {
                      return item.name === name;
                    }
                  ).payload;
                  component = componentsCopy(
                    Object(lodash["cloneDeep"])(component)
                  );
                } else {
                  component = Factory_ComponentFactory.createComponent(type);
                }

                store.commit("".concat(MUTATION_TYPE.ADD_COMPONENT), {
                  targetComponent: targetComponent,
                  component: component,
                });
                store.commit(MUTATION_TYPE.SELECT_COMPONENT, component);
              }
            };

            var dragover = function dragover(e) {
              e.preventDefault();
            };

            return {
              dragstart: dragstart,
              dragenter: dragenter,
              dragleave: dragleave,
              drop: drop,
              dragover: dragover,
            };
          };
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/ComponentWrapper/index.vue?vue&type=script&lang=ts

          /* harmony default export */ var ComponentWrappervue_type_script_lang_ts =
            Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
            )({
              name: "ComponentWrapper",
              inheritAttrs: false,
              props: {
                property: {
                  type: Object,
                  required: true,
                },
              },
              components: {},
              setup: function setup(props) {
                var _toRefs = Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["toRefs"]
                  )(props),
                  property = _toRefs.property;

                var style = useStyle(property); // 拖拽添加组件

                var _useDragEffect = useDrag(),
                  dragenter = _useDragEffect.dragenter,
                  dragleave = _useDragEffect.dragleave,
                  dragover = _useDragEffect.dragover,
                  drop = _useDragEffect.drop;

                return {
                  style: style,
                  dragenter: dragenter,
                  dragleave: dragleave,
                  dragover: dragover,
                  drop: drop,
                };
              },
            });
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/ComponentWrapper/index.vue?vue&type=script&lang=ts

          // EXTERNAL MODULE: ./src/components/Editor/RenderComponent/ComponentWrapper/index.vue?vue&type=style&index=0&id=1f6e38c2&lang=less
          var ComponentWrappervue_type_style_index_0_id_1f6e38c2_lang_less =
            __webpack_require__("9cc9");

          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/ComponentWrapper/index.vue

          const ComponentWrapper_exports_ =
            /*#__PURE__*/ exportHelper_default()(
              ComponentWrappervue_type_script_lang_ts,
              [
                [
                  "render",
                  ComponentWrappervue_type_template_id_1f6e38c2_ts_true_render,
                ],
              ]
            );

          /* harmony default export */ var ComponentWrapper =
            ComponentWrapper_exports_;
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Editor/RenderComponent/Tab/Tab.vue?vue&type=script&lang=ts

          /* harmony default export */ var Tabvue_type_script_lang_ts = Object(
            external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
          )({
            inheritAttrs: false,
            name: ComponentType.Tab,
            props: {
              children: {
                type: Array,
                required: true,
              },
              active: {
                type: Number,
                required: true,
              },
            },
            components: {
              ComponentWrapper: ComponentWrapper,
            },
            setup: function setup(props) {
              var privateActive = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )(props.active);
              var tabTitleRefs = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )([]);
              var transform = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
              )("");

              var getTransform = /*#__PURE__*/ (function () {
                var _ref = _asyncToGenerator(
                  /*#__PURE__*/ regeneratorRuntime.mark(function _callee() {
                    var $ref, offsetLeft, offsetWidth;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch ((_context.prev = _context.next)) {
                          case 0:
                            _context.next = 2;
                            return Object(
                              external_commonjs_vue_commonjs2_vue_root_Vue_[
                                "nextTick"
                              ]
                            )();

                          case 2:
                            $ref = tabTitleRefs.value[privateActive.value];
                            (offsetLeft = $ref.offsetLeft),
                              (offsetWidth = $ref.offsetWidth);
                            transform.value = "translateX(".concat(
                              offsetLeft + offsetWidth / 2,
                              "px) translateX(-50%)"
                            );

                          case 5:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  })
                );

                return function getTransform() {
                  return _ref.apply(this, arguments);
                };
              })();

              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
                privateActive,
                getTransform
              );
              var tabsLength = Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["computed"]
              )(function () {
                return props.children.length;
              });
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
                tabsLength,
                function () {
                  privateActive.value =
                    privateActive.value > tabsLength.value - 1
                      ? tabsLength.value - 1
                      : privateActive.value;
                }
              );
              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["onMounted"]
              )(function () {
                getTransform();
              });
              return {
                transform: transform,
                privateActive: privateActive,
                tabTitleRefs: tabTitleRefs,
                change: function change(index) {
                  privateActive.value = index;
                },
              };
            },
          });
          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Tab/Tab.vue?vue&type=script&lang=ts

          // EXTERNAL MODULE: ./src/components/Editor/RenderComponent/Tab/Tab.vue?vue&type=style&index=0&id=19c2e5e0&scoped=true&lang=less
          var Tabvue_type_style_index_0_id_19c2e5e0_scoped_true_lang_less =
            __webpack_require__("0746");

          // CONCATENATED MODULE: ./src/components/Editor/RenderComponent/Tab/Tab.vue

          const Tab_exports_ = /*#__PURE__*/ exportHelper_default()(
            Tabvue_type_script_lang_ts,
            [
              [
                "render",
                Tabvue_type_template_id_19c2e5e0_scoped_true_ts_true_render,
              ],
              ["__scopeId", "data-v-19c2e5e0"],
            ]
          );

          /* harmony default export */ var RenderComponent_Tab_Tab =
            Tab_exports_;
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;

            for (var i = 0, arr2 = new Array(len); i < len; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

          function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return _arrayLikeToArray(arr);
          }
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js
          var es_array_from = __webpack_require__("a630");

          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

          function _iterableToArray(iter) {
            if (
              (typeof Symbol !== "undefined" &&
                iter[Symbol.iterator] != null) ||
              iter["@@iterator"] != null
            )
              return Array.from(iter);
          }
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.test.js
          var es_regexp_test = __webpack_require__("00b4");

          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

          function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (
              n === "Arguments" ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return _arrayLikeToArray(o, minLen);
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
          function _nonIterableSpread() {
            throw new TypeError(
              "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
            );
          }
          // CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

          function _toConsumableArray(arr) {
            return (
              _arrayWithoutHoles(arr) ||
              _iterableToArray(arr) ||
              _unsupportedIterableToArray(arr) ||
              _nonIterableSpread()
            );
          }
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js
          var es_array_concat = __webpack_require__("99af");

          // CONCATENATED MODULE: ./src/components/Editor/action/abstractAction.ts

          var abstractAction_Action = /*#__PURE__*/ _createClass(
            function Action() {
              _classCallCheck(this, Action);
            }
          );
          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find-index.js
          var es_array_find_index = __webpack_require__("c740");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.constructor.js
          var es_regexp_constructor = __webpack_require__("4d63");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.dot-all.js
          var es_regexp_dot_all = __webpack_require__("c607");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.sticky.js
          var es_regexp_sticky = __webpack_require__("2c3e");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js
          var es_regexp_to_string = __webpack_require__("25f0");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.search.js
          var es_string_search = __webpack_require__("841c");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.match.js
          var es_string_match = __webpack_require__("466d");

          // EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js
          var es_string_replace = __webpack_require__("5319");

          // CONCATENATED MODULE: ./src/components/Previewer/router.ts

          var router_Router = /*#__PURE__*/ (function () {
            // 路由参数标识符 key=xxxxxxx
            // 路由表
            // 路由模式，hash或query。
            // 上个路由
            // 当前路由
            // 匹配路由的正则
            // 默认首页
            // 当前路由对应渲染的组件列表
            function Router(_ref) {
              var _this = this;

              var _ref$routes = _ref.routes,
                routes = _ref$routes === void 0 ? [] : _ref$routes,
                _ref$mode = _ref.mode,
                mode = _ref$mode === void 0 ? "hash" : _ref$mode,
                _ref$homePage = _ref.homePage,
                homePage = _ref$homePage === void 0 ? "" : _ref$homePage,
                _ref$routerKey = _ref.routerKey,
                routerKey =
                  _ref$routerKey === void 0 ? "hpath" : _ref$routerKey;

              _classCallCheck(this, Router);

              _defineProperty(this, "routes", void 0);

              _defineProperty(this, "mode", void 0);

              _defineProperty(this, "routerKey", "");

              _defineProperty(this, "from", null);

              _defineProperty(this, "current", null);

              _defineProperty(this, "reg", void 0);

              _defineProperty(this, "homePage", void 0);

              _defineProperty(
                this,
                "renderComponents",
                Object(external_commonjs_vue_commonjs2_vue_root_Vue_["ref"])([])
              );

              _defineProperty(this, "history", []);

              _defineProperty(this, "onChange", function () {});

              Router.key = routerKey;
              Router.mode = mode;
              this.routes = routes;
              this.routerKey = routerKey;
              this.mode = mode;
              this.homePage = homePage;
              this.reg = Router.generateRouterKeyReg(); // 如果是hash模式，需要监听hashchange事件

              if (mode === "hash") {
                window.addEventListener("hashchange", function () {
                  _this.renderComponents.value = _this.getRouteComponents();

                  if (_this.onChange) {
                    _this.onChange(_this);
                  }
                });
              } // 如果有首页，设置首页

              if (this.homePage) {
                Router.go(this.homePage);
              } else {
                // 如果没有path参数
                if (!this.getRouteId()) {
                  var _homePage = this.routes[0].id;
                  Router.go(_homePage);
                }
              }

              this.renderComponents.value = this.getRouteComponents();
            } // 通过routerKey构建用来获取path的的正则表达式

            _createClass(
              Router,
              [
                {
                  key: "setPath",
                  value:
                    /**
                     * 设置路由
                     * @param param 路由id或者翻页动作
                     */
                    function setPath(param) {
                      var _this2 = this;

                      var index = this.routes.findIndex(function (item) {
                        var _this2$current;

                        return (
                          item.id ===
                          ((_this2$current = _this2.current) === null ||
                          _this2$current === void 0
                            ? void 0
                            : _this2$current.id)
                        );
                      });
                      index = index < 0 ? 0 : index;
                      var routerId = ""; // 如果是翻页

                      if (param === "next" || param === "prev") {
                        if (param === "prev") {
                          index--;
                          index = index < 0 ? 0 : index;
                        }

                        if (param === "next") {
                          index++;
                          index =
                            index > this.routes.length - 1
                              ? this.routes.length - 1
                              : index;
                        }

                        routerId = this.routes[index].id;
                      } else {
                        routerId = param;
                      }

                      Router.go(routerId);
                    },
                  /**
                   * 跳转到指定步数，同vue-router go
                   * @param step
                   */
                },
                {
                  key: "go",
                  value: function go(step) {
                    step = this.history.length - (1 - step);
                    step = step < 0 ? 0 : step;
                    var page = this.history[step];
                    Router.go(page.id);
                  },
                  /**
                   * 获取路由id
                   */
                },
                {
                  key: "getRouteId",
                  value: function getRouteId() {
                    if (this.mode === "query")
                      return Router.getRoureIdByQuery();
                    return Router.getRouteIdByHash();
                  },
                  /**
                   * 获取当前路由下的组件
                   */
                },
                {
                  key: "getRouteComponents",
                  value: function getRouteComponents() {
                    var routerId = this.getRouteId() || this.routes[0].id;
                    var page = this.routes.find(function (page) {
                      return page.id === routerId;
                    });

                    if (page) {
                      this.from = this.current;
                      this.current = page;
                      this.history.push(this.current);
                      return page.components;
                    }

                    return [];
                  },
                },
              ],
              [
                {
                  key: "generateRouterKeyReg",
                  value: function generateRouterKeyReg() {
                    return new RegExp("(?<=".concat(this.key, "=)[^&/]*"));
                  },
                  /**
                   * 路由跳转
                   * @param routerId
                   */
                },
                {
                  key: "go",
                  value: function go(routerId) {
                    var mode = this.mode;
                    mode === "query"
                      ? this.setPathByQuery(routerId)
                      : this.setPathByHash(routerId);
                  },
                  /**
                   * 通过hash获取路由id
                   * @private
                   */
                },
                {
                  key: "getRouteIdByHash",
                  value: function getRouteIdByHash() {
                    var hash = window.location.hash;
                    return this.getRoureIdByQuery(hash);
                  },
                  /**
                   * 通过query获取路由id
                   * @private
                   */
                },
                {
                  key: "getRoureIdByQuery",
                  value: function getRoureIdByQuery() {
                    var search =
                      arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : window.location.search;
                    var routerMatch = search.match(this.generateRouterKeyReg());
                    if (routerMatch) return routerMatch[0];
                  },
                  /**
                   * 通过query设置path
                   * @param routeId
                   * @private
                   */
                },
                {
                  key: "setPathByQuery",
                  value: function setPathByQuery(routeId) {
                    var query = location.search;
                    var routerKey = this.key;
                    var reg = this.generateRouterKeyReg();

                    if (!query) {
                      query = "?".concat(routerKey, "=").concat(routeId);
                    } else {
                      var hasPath = query.match(reg);

                      if (hasPath) {
                        query = query.replace(reg, routeId);
                      } else {
                        query += "&".concat(routerKey, "=").concat(routeId);
                      }
                    }

                    location.search = query;
                  },
                  /**
                   * 通过hash设置path
                   * @param routeId
                   * @private
                   */
                },
                {
                  key: "setPathByHash",
                  value: function setPathByHash(routeId) {
                    var hash = location.hash; // 获取routerKey

                    var routerKey = this.key;
                    var reg = this.generateRouterKeyReg();
                    var hasPath = hash.match(reg);

                    if (!hasPath) {
                      hash += "?".concat(routerKey, "=").concat(routeId);
                    } else {
                      hash = hash.replace(reg, routeId);
                    }

                    location.hash = hash;
                  },
                },
              ]
            );

            return Router;
          })();

          _defineProperty(router_Router, "key", "");

          _defineProperty(router_Router, "mode", "hash");
          // CONCATENATED MODULE: ./src/components/Editor/action/redirect/index.ts

          var redirectTypeList = [
            {
              name: "内部跳转",
              value: "inside",
            },
            {
              name: "外部跳转",
              value: "outside",
            },
          ];
          var redirect_Redirect = /*#__PURE__*/ (function (_Action) {
            _inherits(Redirect, _Action);

            var _super = _createSuper(Redirect);

            function Redirect(event) {
              var _this;

              _classCallCheck(this, Redirect);

              _this = _super.call(this);

              _defineProperty(_assertThisInitialized(_this), "url", void 0);

              _defineProperty(_assertThisInitialized(_this), "type", void 0);

              _this.url = event.url;
              _this.type = event.type;
              return _this;
            }

            _createClass(Redirect, [
              {
                key: "handle",
                value: function handle() {
                  switch (this.type) {
                    case "inside":
                      router_Router.go(this.url);
                      break;

                    case "outside":
                      location.href = this.url;
                      break;
                  }
                },
              },
            ]);

            return Redirect;
          })(abstractAction_Action);
          // CONCATENATED MODULE: ./src/components/Editor/action/alert/index.ts

          var alert_Alert = /*#__PURE__*/ (function (_Action) {
            _inherits(Alert, _Action);

            var _super = _createSuper(Alert);

            function Alert(props) {
              var _this;

              _classCallCheck(this, Alert);

              _this = _super.call(this);

              _defineProperty(_assertThisInitialized(_this), "content", void 0);

              _this.content = props.content;
              return _this;
            }

            _createClass(Alert, [
              {
                key: "handle",
                value: function handle() {
                  alert(this.content);
                },
              },
            ]);

            return Alert;
          })(abstractAction_Action);
          // CONCATENATED MODULE: ./src/components/Editor/action/factory.ts

          var factory_ActionFactory = /*#__PURE__*/ (function () {
            function ActionFactory() {
              _classCallCheck(this, ActionFactory);
            }

            _createClass(ActionFactory, null, [
              {
                key: "getAction",
                value: function getAction(event) {
                  switch (event.actionType) {
                    case "redirect":
                      return new redirect_Redirect(event.actionProps);

                    case "alert":
                      return new alert_Alert(event.actionProps);
                  }
                },
              },
            ]);

            return ActionFactory;
          })();
          // CONCATENATED MODULE: ./src/hooks/useBindEvent.ts

          /**
           * 给组件绑定自定义事件
           */

          /* harmony default export */ var useBindEvent = function (events) {
            var root = Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["ref"]
            )();

            if (events) {
              // 构建所有事件池对象
              var eventsObj = {
                click: [],
                mouseenter: [],
                mouseleave: [],
                mounted: [],
              }; // 遍历组件中的所有事件

              events.forEach(function (item) {
                // 判断是否存在于所有事件池中
                var targetEvent = eventsObj[item.eventType]; // 如果没有，在对应的事件类型中添加事件

                if (!targetEvent) {
                  eventsObj[item.eventType] = [item];
                } else {
                  eventsObj[item.eventType] = [].concat(
                    _toConsumableArray(targetEvent),
                    [item]
                  );
                }
              });
              /**
               * 触发action
               * @param actions
               */

              var trigger = function trigger(actions) {
                // 执行action中的handle 触发事件
                actions.forEach(function (item) {
                  return item.handle();
                });
              };

              Object(
                external_commonjs_vue_commonjs2_vue_root_Vue_["onMounted"]
              )(function () {
                var _loop = function _loop(eventType) {
                  // 取出当前事件类型下的所有events
                  // 例如：click:[events1,events2,events3,....]
                  var currentEvents = eventsObj[eventType]; // 初始化当前事件下对应的action

                  var handlePool = []; // 如果有这个事件类型绑定了事件

                  if (currentEvents.length > 0) {
                    // 遍历事件，通过ActionFactory.getAction工厂函数，根据事件中的actionType，actionProps实例化一个Action
                    currentEvents.forEach(function (item) {
                      // 实例化Action，添加到handlePool中。 [action,action,action,.....]
                      handlePool.push(factory_ActionFactory.getAction(item));
                    }); // 开始绑定事件
                    // 如果是初始化事件

                    if (eventType === "mounted") {
                      trigger(handlePool);
                    } else {
                      // 其他类型事件，均通过ref绑定在dom元素上
                      root.value.addEventListener(eventType, function () {
                        trigger(handlePool);
                      });
                    }
                  }
                };

                // 遍历所有事件池，click:[...events],mouseenter:[...events],mouseleave:[...events]...
                for (var eventType in eventsObj) {
                  _loop(eventType);
                }
              });
            }

            return {
              root: root,
            };
          };
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Previewer/render.vue?vue&type=script&lang=ts

          /* harmony default export */ var rendervue_type_script_lang_ts =
            Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
            )({
              name: "render",
              inheritAttrs: false,
              props: {
                property: {
                  type: Object,
                  required: true,
                },
                rem: {
                  type: Boolean,
                  default: true,
                },
              },
              components: {
                HImg: Img_Img,
                HContainer: Container_Container,
                HText: Text_Text,
                HTab: RenderComponent_Tab_Tab,
              },
              setup: function setup(props) {
                var _toRefs = Object(
                    external_commonjs_vue_commonjs2_vue_root_Vue_["toRefs"]
                  )(props),
                  property = _toRefs.property;

                var style = useStyle(property, props.rem);

                var _useBindEvent = useBindEvent(props.property.events),
                  root = _useBindEvent.root;

                return {
                  style: style,
                  root: root,
                };
              },
            });
          // CONCATENATED MODULE: ./src/components/Previewer/render.vue?vue&type=script&lang=ts

          // CONCATENATED MODULE: ./src/components/Previewer/render.vue

          const render_exports_ = /*#__PURE__*/ exportHelper_default()(
            rendervue_type_script_lang_ts,
            [["render", rendervue_type_template_id_238b1b0f_ts_true_render]]
          );

          /* harmony default export */ var Previewer_render = render_exports_;
          // CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader-v16/dist??ref--0-1!./src/components/Previewer/index.vue?vue&type=script&lang=ts

          /* harmony default export */ var Previewervue_type_script_lang_ts =
            Object(
              external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"]
            )({
              name: "previewer",
              inheritAttrs: false,
              props: {
                rem: {
                  type: Boolean,
                  default: true,
                },
                pages: {
                  type: Array,
                  default: function _default() {
                    return [];
                  },
                },
                homePageId: {
                  type: String,
                },
              },
              components: {
                Render: Previewer_render,
              },
              setup: function setup(props) {
                console.log("22", props.pages);
                var router = new router_Router({
                  routes: Object(lodash["cloneDeep"])(props.pages),
                  homePage: props.homePageId,
                  mode: "hash",
                });

                router.onChange = function ($router) {
                  console.log("1", $router);
                };

                return {
                  components: router.renderComponents,
                  setPath: function setPath(flag) {
                    router.setPath(flag);
                  },
                };
              },
            });
          // CONCATENATED MODULE: ./src/components/Previewer/index.vue?vue&type=script&lang=ts

          // EXTERNAL MODULE: ./src/components/Previewer/index.vue?vue&type=style&index=0&id=7e27f9cc&lang=less
          var Previewervue_type_style_index_0_id_7e27f9cc_lang_less =
            __webpack_require__("c5ac");

          // CONCATENATED MODULE: ./src/components/Previewer/index.vue

          const Previewer_exports_ = /*#__PURE__*/ exportHelper_default()(
            Previewervue_type_script_lang_ts,
            [["render", render]]
          );

          /* harmony default export */ var Previewer = Previewer_exports_;
          // CONCATENATED MODULE: ./src/components/Previewer/index.ts

          /* harmony default export */ var components_Previewer = {
            install: function install(app) {
              app.component("Previewer", Previewer);
            },
          };
          // CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js

          /* harmony default export */ var entry_lib = (__webpack_exports__[
            "default"
          ] = components_Previewer);

          /***/
        },

        /***/ fb6a: /***/ function (module, exports, __webpack_require__) {
          "use strict";

          var $ = __webpack_require__("23e7");
          var isArray = __webpack_require__("e8b5");
          var isConstructor = __webpack_require__("68ee");
          var isObject = __webpack_require__("861d");
          var toAbsoluteIndex = __webpack_require__("23cb");
          var lengthOfArrayLike = __webpack_require__("07fa");
          var toIndexedObject = __webpack_require__("fc6a");
          var createProperty = __webpack_require__("8418");
          var wellKnownSymbol = __webpack_require__("b622");
          var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

          var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");

          var SPECIES = wellKnownSymbol("species");
          var nativeSlice = [].slice;
          var max = Math.max;

          // `Array.prototype.slice` method
          // https://tc39.es/ecma262/#sec-array.prototype.slice
          // fallback for not array-like ES3 strings and DOM objects
          $(
            { target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT },
            {
              slice: function slice(start, end) {
                var O = toIndexedObject(this);
                var length = lengthOfArrayLike(O);
                var k = toAbsoluteIndex(start, length);
                var fin = toAbsoluteIndex(
                  end === undefined ? length : end,
                  length
                );
                // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
                var Constructor, result, n;
                if (isArray(O)) {
                  Constructor = O.constructor;
                  // cross-realm fallback
                  if (
                    isConstructor(Constructor) &&
                    (Constructor === Array || isArray(Constructor.prototype))
                  ) {
                    Constructor = undefined;
                  } else if (isObject(Constructor)) {
                    Constructor = Constructor[SPECIES];
                    if (Constructor === null) Constructor = undefined;
                  }
                  if (Constructor === Array || Constructor === undefined) {
                    return nativeSlice.call(O, k, fin);
                  }
                }
                result = new (Constructor === undefined ? Array : Constructor)(
                  max(fin - k, 0)
                );
                for (n = 0; k < fin; k++, n++)
                  if (k in O) createProperty(result, n, O[k]);
                result.length = n;
                return result;
              },
            }
          );

          /***/
        },

        /***/ fba5: /***/ function (module, exports, __webpack_require__) {
          var assocIndexOf = __webpack_require__("cb5a");

          /**
           * Checks if a list cache value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf ListCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }

          module.exports = listCacheHas;

          /***/
        },

        /***/ fc6a: /***/ function (module, exports, __webpack_require__) {
          // toObject with fallback for non-array-like ES3 strings
          var IndexedObject = __webpack_require__("44ad");
          var requireObjectCoercible = __webpack_require__("1d80");

          module.exports = function (it) {
            return IndexedObject(requireObjectCoercible(it));
          };

          /***/
        },

        /***/ fce3: /***/ function (module, exports, __webpack_require__) {
          var fails = __webpack_require__("d039");
          var global = __webpack_require__("da84");

          // babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
          var $RegExp = global.RegExp;

          module.exports = fails(function () {
            var re = $RegExp(".", "s");
            return !(re.dotAll && re.exec("\n") && re.flags === "s");
          });

          /***/
        },

        /***/ fd6a: /***/ function (
          module,
          __webpack_exports__,
          __webpack_require__
        ) {
          "use strict";
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Container_vue_vue_type_style_index_0_id_20b88ce2_lang_less__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__("600f");
          /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Container_vue_vue_type_style_index_0_id_20b88ce2_lang_less__WEBPACK_IMPORTED_MODULE_0___default =
            /*#__PURE__*/ __webpack_require__.n(
              _node_modules_mini_css_extract_plugin_dist_loader_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_less_loader_dist_cjs_js_ref_10_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_v16_dist_index_js_ref_0_1_Container_vue_vue_type_style_index_0_id_20b88ce2_lang_less__WEBPACK_IMPORTED_MODULE_0__
            );
          /* unused harmony reexport * */

          /***/
        },

        /***/ fdbc: /***/ function (module, exports) {
          // iterable DOM collections
          // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
          module.exports = {
            CSSRuleList: 0,
            CSSStyleDeclaration: 0,
            CSSValueList: 0,
            ClientRectList: 0,
            DOMRectList: 0,
            DOMStringList: 0,
            DOMTokenList: 1,
            DataTransferItemList: 0,
            FileList: 0,
            HTMLAllCollection: 0,
            HTMLCollection: 0,
            HTMLFormElement: 0,
            HTMLSelectElement: 0,
            MediaList: 0,
            MimeTypeArray: 0,
            NamedNodeMap: 0,
            NodeList: 1,
            PaintRequestList: 0,
            Plugin: 0,
            PluginArray: 0,
            SVGLengthList: 0,
            SVGNumberList: 0,
            SVGPathSegList: 0,
            SVGPointList: 0,
            SVGStringList: 0,
            SVGTransformList: 0,
            SourceBufferList: 0,
            StyleSheetList: 0,
            TextTrackCueList: 0,
            TextTrackList: 0,
            TouchList: 0,
          };

          /***/
        },

        /***/ fdbf: /***/ function (module, exports, __webpack_require__) {
          /* eslint-disable es/no-symbol -- required for testing */
          var NATIVE_SYMBOL = __webpack_require__("4930");

          module.exports =
            NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";

          /***/
        },

        /***/ fea9: /***/ function (module, exports, __webpack_require__) {
          var global = __webpack_require__("da84");

          module.exports = global.Promise;

          /***/
        },

        /***/ ffcf: /***/ function (module, exports, __webpack_require__) {
          // extracted by mini-css-extract-plugin
          /***/
        },

        /***/ ffd6: /***/ function (module, exports, __webpack_require__) {
          var baseGetTag = __webpack_require__("3729"),
            isObjectLike = __webpack_require__("1310");

          /** `Object#toString` result references. */
          var symbolTag = "[object Symbol]";

          /**
           * Checks if `value` is classified as a `Symbol` primitive or object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
           * @example
           *
           * _.isSymbol(Symbol.iterator);
           * // => true
           *
           * _.isSymbol('abc');
           * // => false
           */
          function isSymbol(value) {
            return (
              typeof value == "symbol" ||
              (isObjectLike(value) && baseGetTag(value) == symbolTag)
            );
          }

          module.exports = isSymbol;

          /***/
        },

        /******/
      }
    )["default"];
  }
);
//# sourceMappingURL=index.umd.js.map
